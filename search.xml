<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Adaptor Pattern 轉接器模式 [Design Pattern in Java]</title>
      <link href="/2020/07/29/Design-Pattern-Java-Adaptor-Pattern-%E8%BD%89%E6%8E%A5%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/29/Design-Pattern-Java-Adaptor-Pattern-%E8%BD%89%E6%8E%A5%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="轉接器模式-Adaptor-Pattern"><a href="#轉接器模式-Adaptor-Pattern" class="headerlink" title="轉接器模式 Adaptor Pattern"></a>轉接器模式 Adaptor Pattern</h1><p>假如要使用A, 但無法直接使用, 只能使用B介面</p><p>所以我們用轉接器類別包裝A的方法，並且實作B，達到轉接的效果</p><a id="more"></a><h2 id="用螢幕轉接器的例子直接解釋"><a href="#用螢幕轉接器的例子直接解釋" class="headerlink" title="用螢幕轉接器的例子直接解釋"></a>用螢幕轉接器的例子直接解釋</h2><p>例如我們有個 HDMI的線, 叫做 HDMI interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HDMI</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定義連接裝置的方法格式</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但現在有個螢幕只有支援VGA的插孔</p><p>所以我們需要個 HDMI轉VGA的Adaptor類別, 把VGA的類別引入進來, 並使用之</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HdmiToVgaAdpator</span> <span class="keyword">implements</span> <span class="title">HDMI</span> </span>&#123;</span><br><span class="line">    VGA vgaCable = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    HdmiToVgaAdpator(VGA vgaCable) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vgaCable = vgaCable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必須要實作HDMI的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 介接Vga線的connect功能</span></span><br><span class="line">        System.out.println(<span class="string">"使用轉接器的connect功能!"</span>);</span><br><span class="line">        vgaCable.connect(device);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為有使用到VGA類別, 所以來定義一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">VGA</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定義連接裝置的方法格式</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGACable</span> <span class="keyword">implements</span> <span class="title">VGA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"VGA線連接: "</span> + device);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>來定義有台筆電, 是只有具備hdmi孔, 但具備著可以連接到某裝置進行投影</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Labtop</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 該台筆電只有hdmi孔, 並指定要連接的螢幕(device)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectToDevice</span><span class="params">(HDMI hdmi, String device)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"筆電只有hdmi孔, 使用實作hdmi介面的 'hdmi轉vga的轉接器' 類別！"</span>);</span><br><span class="line">        hdmi.connect(device);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著來使用吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Labtop laptop = <span class="keyword">new</span> Labtop();</span><br><span class="line">        <span class="comment">// 如果某筆電只有hdmi插孔, 但要接的投影螢幕只有vga</span></span><br><span class="line">        laptop.connectToDevice(</span><br><span class="line">                <span class="keyword">new</span> HdmiToVgaAdpator( <span class="comment">// 這時可以使用Hdmi轉Vga的轉接器！ 轉接器需要帶入實際具有VGA功能的VGA線物件</span></span><br><span class="line">                        <span class="keyword">new</span> VGACable()),</span><br><span class="line">                <span class="string">"老舊投影機"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們可以看到結果為:</p><p><img src="https://i.imgur.com/pwtgvua.png" alt=""></p><ol><li>筆電使用了 實作hdmi介面的轉接器 (轉接器因為實作了hdmi interface, 所以可以插入筆電的hdmi孔)</li><li>接著轉接器引入了VGA cable類別, 故轉接器就可以使用VGA的connect()功能</li><li>最後就觸發VGA功能, 與投影裝置連動</li></ol><h2 id="實際應用場景"><a href="#實際應用場景" class="headerlink" title="實際應用場景"></a>實際應用場景</h2><p>通常轉接器模式可用在轉接那些已經過時的模組&amp;方法</p><p>例如有模組是用Java較舊迭代Collection的版本去寫的, 為Enumeration Interface</p><p>但現在新的專案中，是使用Iterator方式去迭代Collection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewLoopService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用Java 5版本之後支援的Iterator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopCollection</span><span class="params">(Collection col, Iterator itr)</span> </span>&#123;</span><br><span class="line">        itr = col.iterator();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">            System.out.println(itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用NewLoopService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span>() </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"apple"</span>);</span><br><span class="line">        list.add(<span class="string">"banana"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 宣告Iterator的變數</span></span><br><span class="line">        Iterator itr;</span><br><span class="line">        </span><br><span class="line">        NewLoopService loopService = <span class="keyword">new</span> NewLoopService();</span><br><span class="line">        loopService.loopCollection(list, itr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但現在若只能用舊版的 <code>Enumeration</code> 方式去迭代</p><p>這時就可以寫一個 <code>EnumeratorAdaptor</code> 來實作可兼容<code>Iterator</code>的類別, 並可呼叫 <code>Enumeration</code>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 實作Iterator的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnumeratorAdaptor</span>&lt;<span class="title">E</span>&gt; <span class="title">implement</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    Enumeration&lt;E&gt; enumeration;</span><br><span class="line">    </span><br><span class="line">    EnumeratorAdaptor(Enumeration&lt;E&gt; enumeration) &#123;</span><br><span class="line">        <span class="keyword">this</span>.enumeration = enumeration;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 實作Iterator 介面所需的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 但實際上是使用Enumeration的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.enumeration.hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.enumeration.nextElement();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 但這時候會遇到Enumeration沒有的方法, 但又必須要實作 滿足Iterator的介面規範, 這時可以throw Exception來處理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時我們可以在<code>main()</code>中改用轉接器, 來間接使用Enumeration了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span>() </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"apple"</span>);</span><br><span class="line">        list.add(<span class="string">"banana"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 `實作Iterator介面` 的轉接器</span></span><br><span class="line">        EnumeratorAdaptor itr;</span><br><span class="line">        </span><br><span class="line">        NewLoopService loopService = <span class="keyword">new</span> NewLoopService();</span><br><span class="line">        loopService.loopCollection(list, itr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewLoopService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用Java 5版本之後支援的Iterator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopCollection</span><span class="params">(Collection col, Iterator itr)</span> </span>&#123;</span><br><span class="line">        itr = col.iterator();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 這時會是使用EnumeratorAdaptor內的hasNext()與next() 達到轉接的效果</span></span><br><span class="line">        <span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">            System.out.println(itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過以上方法, 可以把要使用Enumeration方式的service, 但該Service又是只能吃Iterator的輸入, 那就可以實作一個 <code>EnumeratorAdaptor</code>, 帶入Service, 並透過轉接器使用 Enumeration的方式去撈出Collection內容.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Observer Pattern 觀察者模式 [Design Pattern in Java]</title>
      <link href="/2020/07/26/Design-Pattern-Java-Observer-Pattern-%E8%A7%80%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/26/Design-Pattern-Java-Observer-Pattern-%E8%A7%80%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>觀察者模式可以讓物件了解資料變化的情況。<br>物件甚至可以在執行期間決定是否要繼續被通知，又或者是可以主動去詢問資料的狀態。<br>在此模式中也會了解一對多，以及物件鬆綁的意義是如何。</p><a id="more"></a><h3 id="以氣象監測系統的概況來當做例子"><a href="#以氣象監測系統的概況來當做例子" class="headerlink" title="以氣象監測系統的概況來當做例子"></a>以氣象監測系統的概況來當做例子</h3><p>假設系統中有三個組成要件：<br>(1) 氣象站: 獲取實際氣象的物理裝置，假設有三個:溫度,濕度,壓力感應<br>(2) Weather Data物件: 追蹤來自氣象站的資料，並且顯示在佈告版上<br>(3) 佈告版: 將Weather Data物件給予的資料呈現出來</p><p>整個例子會有，一個氣象站(產出假的氣象資料)，Weather Data物件(獲取氣象資料並通知佈告版)，佈告版將拿到的資料給呈現出來</p><h3 id="沒使用觀察者模式-Observer-Pattern的情況"><a href="#沒使用觀察者模式-Observer-Pattern的情況" class="headerlink" title="沒使用觀察者模式 Observer Pattern的情況"></a>沒使用觀察者模式 Observer Pattern的情況</h3><p>初學者會很直覺的寫出這樣的程式架構：</p><h4 id="佈告欄"><a href="#佈告欄" class="headerlink" title="佈告欄"></a>佈告欄</h4><p>CurrentConditionsDisplay.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.temp = temp;</span><br><span class="line">       <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">       <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 顯示資料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        System.out.println(humidity);</span><br><span class="line">        System.out.println(pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="WeatherData-class"><a href="#WeatherData-class" class="headerlink" title="WeatherData.class"></a>WeatherData.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line">    <span class="comment">// instance variable declarations</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宣告佈告欄</span></span><br><span class="line">    CurrentConditionsDisplay currentConditionsDisplay;</span><br><span class="line">    StatisticsDisplay statisticsDisplay;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 建構子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        CurrentConditionsDisplay currentConditionsDisplay,</span></span></span><br><span class="line"><span class="function"><span class="params">        StatisticsDisplay statisticsDisplay</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentConditionsDisplay = currentConditionsDisplay;</span><br><span class="line">        <span class="keyword">this</span>.statisticsDisplay = statisticsDisplay;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> temp = getTemperature();</span><br><span class="line">        <span class="keyword">float</span> humidity = getHumidity();</span><br><span class="line">        <span class="keyword">float</span> pressure = getPressure();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 對佈告欄類別進行更新他們的顯示內容</span></span><br><span class="line">        currentConditionsDisplay.update(temp, humidity, pressure);</span><br><span class="line">        statisticsDisplay.update(temp, humidity, pressure);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 其他WeatherData function...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是以上程式結構會有耦合性的狀況：</p><p><img src="https://i.imgur.com/gpIs58H.png" alt=""></p><p>所以接下來來了解觀察者模式的內涵</p><h4 id="觀察者模式解析"><a href="#觀察者模式解析" class="headerlink" title="觀察者模式解析"></a>觀察者模式解析</h4><p>定義了物件之間一對多關係，如此一來，當一個物件改變狀態時，其他相依者都會收到通知並自動做改變</p><p>其示意圖如下：</p><p><img src="https://i.imgur.com/d1zWR3x.png" alt=""></p><p>主題與觀察者們定義了一對多的關係</p><p>若要實踐出可以隔離主題和觀察者們的方式，以 <code>Subject</code>介面和<code>Observer</code>介面最為常見</p><p><img src="https://i.imgur.com/C155cCF.png" alt=""></p><p>在這張圖要注意一個重點是，由於現在已經針對介面實作，現在的Subject中的註冊Observer都是以註冊”<span style="color:red">介面</span>“為主！而非是像上面一開始的新手例子是直接針對實踐而寫</p><p>如此一來如果要在新增一個佈告欄叫做ForecastDisplay，直接實踐Observer就好，這樣就不用動到實踐Subject介面的WeatherData之程式碼</p><p><img src="https://i.imgur.com/GJTGp80.png" alt=""></p><h4 id="以觀察者模式來重寫氣象監測系統"><a href="#以觀察者模式來重寫氣象監測系統" class="headerlink" title="以觀察者模式來重寫氣象監測系統"></a>以觀察者模式來重寫氣象監測系統</h4><p>Subject.interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObserverInterface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WeatherData.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向觀察者們送以改動的資料</span></span><br><span class="line">    <span class="comment">// 可以看到現在我們是直接註冊Observer介面，如此一來觀察者類別的實作就不用去在意</span></span><br><span class="line">    <span class="comment">// 只要知道要註冊的對象必須要有實作Observer介面就好</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;observers.size(); i++) &#123;</span><br><span class="line">            Observer observer = (Observer)observers.get(i);</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 執行向觀察者們通知資料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 讀取假資料，可以改動這地方，改為向氣象局網站爬資料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> temperature,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> humidity,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡我們只實踐一個佈告欄 CurrentConditionDisplay</p><p>CurrentConditionDisplay.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current condition: "</span>+temperature + <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity and "</span>+ pressure + <span class="string">" pressure"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行程式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        CurrentConditionDisplay currentDisplay = <span class="keyword">new</span> CurrentConditionDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">64</span>, <span class="number">30.4f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到以下結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Current condition: 80.0F degrees and 64.0% humidity and 30.4 pressure</span><br></pre></td></tr></table></figure><p>之後只要透過主題呼叫觀察者的update()的方法，就可以通知新的資料給觀察者</p><p>並且透過註冊的方式+只加入針對實踐Observer介面的觀察者，如此一來可以達到分離主題物件與觀察者物件的邏輯，之後新增新的佈告欄就不用動到主題的程式邏輯。</p><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><h4 id="java-sdk也有自行提供Observer方法"><a href="#java-sdk也有自行提供Observer方法" class="headerlink" title="java sdk也有自行提供Observer方法"></a>java sdk也有自行提供Observer方法</h4><p>其中會有<code>setChange()</code>的方法，主要讓呼叫者定義什麼時候才要通知新的資料給觀察者，避免每次資料一改變就一直通知觀察者。Ex: 如果沒有setChanged的方法，WeahterData物件就會持續不斷的通知觀察者，所以若我們希望溫度差距半度才更新，溫度差距插到半度以上，主題才會呼叫觀察者的update()的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setChanged() &#123;</span><br><span class="line">    changed = ture;</span><br><span class="line">&#125;tifyObservers(Object arg) &#123;</span><br><span class="line">    if(changed) &#123;</span><br><span class="line">        for every observer on the list &#123;</span><br><span class="line">            call update(this. org)</span><br><span class="line">        &#125;</span><br><span class="line">        changed = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyObsergers() &#123;</span><br><span class="line">    notifyObservers(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strategy Pattern 策略模式 [Design Pattern in Java]</title>
      <link href="/2020/07/26/Design-Pattern-Java-Strategy-Pattern-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/26/Design-Pattern-Java-Strategy-Pattern-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>可以在執行期動態更換物件的行為</p><p>『策略模式』定義了演算法家族，將他們個別封裝起來，可以讓他們之間互相替換，此模式不會影響到使用此演算法的程式。</p><a id="more"></a><h2 id="沒有思考使用設計模式的時候-模擬鴨子版本"><a href="#沒有思考使用設計模式的時候-模擬鴨子版本" class="headerlink" title="沒有思考使用設計模式的時候:模擬鴨子版本"></a>沒有思考使用設計模式的時候:模擬鴨子版本</h2><p>假設我們要開發模擬鴨子遊戲，會有各種不同的鴨子，這時候會們通常都會先設計出一個class叫做 Duck，然後Duck會包含鴨子的共同行為：發出叫聲 quack(), 游泳 swin(), 以及展現外觀 display()，然後有綠頭鴨 MallardDuck class和 紅頭鴨 RedheadDuck class分別繼承 Duck類別</p><p>(做UML)</p><p>若現在需要讓每隻鴨子都會飛，我們會很直覺的在 Duck class中加入 fly()</p><p>但若現在有個橡皮鴨子，會不小心繼承到Duck class的fly(), 但橡皮鴨不會飛！</p><h3 id="用繼承的可以改善作法"><a href="#用繼承的可以改善作法" class="headerlink" title="用繼承的可以改善作法"></a>用繼承的可以改善作法</h3><p>直接在橡皮鴨 class中的fly() 不定義任何事情</p><p>(做UML)</p><h4 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h4><p>若又遇到誘餌鴨，就會面臨fly()沒定義任何事情，quack()也沒定義任何事情<br>因為若有很多新型態的鴨子，會導致每一個不同的鴨子都得檢視該鴨子是否可飛或可叫</p><p>(做UML)</p><h3 id="改用介面做改善"><a href="#改用介面做改善" class="headerlink" title="改用介面做改善"></a>改用介面做改善</h3><p>將fly與quack從Duck抽離出來變成 Flyable與Quackable介面，讓有需要飛或叫的鴨子實作之</p><h4 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h4><p>重複的程式碼會變超多，因為同樣會飛或叫的鴨子都各自實作了Flyable與Quackable介面的程式碼，該程式碼邏輯都是相同的。</p><h3 id="設計守則-一"><a href="#設計守則-一" class="headerlink" title="設計守則(一)"></a>設計守則(一)</h3><ul><li><p>找出程式中需要更動之處，並將之獨立出來，不要和那些不需要更動的程式碼混在一起</p></li><li><p>把會變動的部分取出來並將之封裝起來，以便以後可以輕易地擴充此部分，而不影響不需要更動的部分。</p></li></ul><blockquote><p>將鴨子的行為從Duck類別取出來！</p></blockquote><h3 id="抽離會變動的部分成為獨立類別"><a href="#抽離會變動的部分成為獨立類別" class="headerlink" title="抽離會變動的部分成為獨立類別"></a>抽離會變動的部分成為獨立類別</h3><p>將飛行行為 fly,與呱呱叫行為 quack獨立成class</p><p>並且在Duck類別設置 “可以設定行為的方法”，可以在“執行期”動態地改變鴨子的飛行或呱呱叫行為</p><h3 id="設計守則-二"><a href="#設計守則-二" class="headerlink" title="設計守則(二)"></a>設計守則(二)</h3><p>寫程式是針對介面而寫，而不是針對實踐</p><h3 id="用介面代表每個行為-FlyBehavior-QuackBehavior"><a href="#用介面代表每個行為-FlyBehavior-QuackBehavior" class="headerlink" title="用介面代表每個行為: FlyBehavior, QuackBehavior"></a>用介面代表每個行為: FlyBehavior, QuackBehavior</h3><p>用各個鴨子的行為類別去實踐FlyBehavior和QuackBehavior介面<br>而不是由Duck類別實踐該介面</p><p>:::info<br>寫程式是針對介面去寫：其真正意思是『寫程式是針對超型態(supertype)而寫』</p><p>使用超型態的話可以不用理會以後執行時的真正物件型態：為“多型”的實踐</p><p>ex:</p><p>Animal interface { makeSound() }<br>Dog implment Animal { makeSound() { bark() }}<br>Cat implement Animal { makeSound() { meow() }}</p><p>Animal animal = new Dog();<br>animal.makeSound();</p><p>有個好處是，可以不用直接在一開始僵化某個變數的宣告型態 ex: Dog x = new dog(); // 僵化了x變數為dog型態</p><p>而是可以在執行期，也就是使用的時候指定該物件型態</p><p>ex:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 定義getAnimal為回傳Dog();</span><br><span class="line">x = getAnimal(); // 得到 Dog型態</span><br><span class="line">x.makeSound(); // 發出狗叫聲</span><br><span class="line"></span><br><span class="line">// 將getAnimal() 中改成傳回Cat();</span><br><span class="line">x = getAnimal(); // 得到 Cat型態</span><br><span class="line">x.makeSound(); // 發出貓叫聲</span><br></pre></td></tr></table></figure><p>:::</p><h2 id="實踐鴨子的行為"><a href="#實踐鴨子的行為" class="headerlink" title="實踐鴨子的行為"></a>實踐鴨子的行為</h2><ul><li><p>FlyBehavior介面，用FlyWithWings(實踐所有有翅膀的丫子會飛的行為)與FlyNoWay(實踐所有不會飛的鴨子的動作)這兩個類別來實作</p></li><li><p>QuackBehavior介面，用Quack(真的呱呱叫)、Squeak(橡皮吱吱叫)與MuteQuack(叫不出聲音)這三個類別來實作</p></li></ul><p>:::info<br>以上設計將飛行與呱呱叫的行為可以被其他物件再三利用，將鴨子的行為抽離出來<br>:::</p><h3 id="問題與思考"><a href="#問題與思考" class="headerlink" title="問題與思考"></a>問題與思考</h3><ol><li>是否該先把系統做出來，在看看哪些地方需要更動，再回頭將需更動的邏輯獨立出來？<ul><li>答：不儘然，設計系統中可以預先考慮到未來哪些地方可能需要變動</li></ul></li><li>鴨子是不是也可以設計成一個介面？<ul><li>答: 不恰當，因為已經將會變動的邏輯(fly與quack)抽離出dock class, 那dock class就可以直接為每隻鴨子都會有同樣邏輯的類別，讓不同類型的鴨子直接繼承使用</li></ul></li></ol><h2 id="整合鴨子的行為"><a href="#整合鴨子的行為" class="headerlink" title="整合鴨子的行為"></a>整合鴨子的行為</h2><p>將飛行與呱呱叫的動作，委託其他人處理 (在Dock類別中宣告 FlyBehavior與QuackBehavior，透過Behavior介面取得 有實作該Behavior介面的行為們 ex: FlyBehavior介面會有FlyWithNoWings類別實作)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Duck &#123;</span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    </span><br><span class="line">    public void performQuack() &#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void performFly() &#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>現在由綠頭鴨(MallarDuck)來使用Duck的quackBehavior所擁有的有實踐自己的子類別 Quack()<br>用flyBehavior的FlyWithNoWings</p><p>且MallarDuck繼承了Duck類別，所以可以使用quackBehavior和flyBehavior取用自己對應的動作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class MallardDuck extends Duck &#123;</span><br><span class="line">    // constructor</span><br><span class="line">    pubilc MallardDuck() &#123;</span><br><span class="line">        quackBehavior = new Quack();</span><br><span class="line">        flyBehavior = new FlyWithNoWings();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    quackBehavior.performQuack(); </span><br><span class="line">    flyBehavior.performFly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="完整測試的code：實作一個MiniDuck"><a href="#完整測試的code：實作一個MiniDuck" class="headerlink" title="完整測試的code：實作一個MiniDuck"></a>完整測試的code：實作一個MiniDuck</h2><h3 id="Duck-class"><a href="#Duck-class" class="headerlink" title="Duck class"></a>Duck class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"All ducks float, even decoys!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FlyBehavior-and-QuackBehavior介面與實踐之的動作"><a href="#FlyBehavior-and-QuackBehavior介面與實踐之的動作" class="headerlink" title="FlyBehavior and QuackBehavior介面與實踐之的動作"></a>FlyBehavior and QuackBehavior介面與實踐之的動作</h3><p>FlyBehavior.inrface<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>各種實踐Fly的類別</p><p>FlyWithWings.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am flying"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>FlyNoWay.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I cannot fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>QuackBehavior.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>各種實踐Quack的類別</p><p>Quack.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Quack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MuteQuack.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt;Silence&gt;&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Squeak.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Squeak"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="實踐綠頭鴨的類別：MallardDuck-java"><a href="#實踐綠頭鴨的類別：MallardDuck-java" class="headerlink" title="實踐綠頭鴨的類別：MallardDuck.java"></a>實踐綠頭鴨的類別：MallardDuck.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="comment">// constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am a real Mallard duck"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="測試用類別：MiniDuckSimulator-java"><a href="#測試用類別：MiniDuckSimulator-java" class="headerlink" title="測試用類別：MiniDuckSimulator.java"></a>測試用類別：MiniDuckSimulator.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Duck mallard = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 會呼叫 MallardDuck繼承來的performQuack()</span></span><br><span class="line">       <span class="comment">// 進而委託 quackBehavior處理quack行為，而非在自己class內處理</span></span><br><span class="line">       mallard.performQuack();</span><br><span class="line">       mallard.performFly();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="動態設定行為"><a href="#動態設定行為" class="headerlink" title="動態設定行為"></a>動態設定行為</h2><p>在鴨子類別中可以加入設置flyBehavior和quackBehavior的方法</p><p>可以隨時呼叫以下方法改變鴨子的行為<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior fb)</span> </span>&#123;</span><br><span class="line">       flyBehavior = fb;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior qb)</span> </span>&#123;</span><br><span class="line">       quackBehavior = qb;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如有個 “模型鴨“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyNoWay();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Model duck"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立一個新的FlyBehavior型態，具有火箭噴射的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am flying a rocket"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改變測試類別，加上模型鴨子，使模型鴨具有火箭動力！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Duck mallard = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 具有噴射動力的模型鴨子</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Duck modelDuck = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">        modelDuck.performFly(); <span class="comment">// 不會飛</span></span><br><span class="line">        <span class="comment">// 動態地更換飛行的行為</span></span><br><span class="line">        modelDuck.setFlyBehavior(<span class="keyword">new</span> FlyRocketPowered());</span><br><span class="line">        modelDuck.performFly(); <span class="comment">// 噴射！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的行為為將兩個類別(FlyBehavior與QuackBehavior)組合起來使用，為”Composition 合成”的精神，與繼承不一樣的是，鴨子Duck的行為不是繼承而來，而是透過適當的行為物件『合成』而來！</p><h3 id="設計守則"><a href="#設計守則" class="headerlink" title="設計守則"></a>設計守則</h3><p>多用合成，少用繼承</p><p>合成可以將演算法封裝成類別，更可以『在執行動態地改變行為』，只要合成的行為物件，符合特定的介面標準即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Factory Pattern 工廠模式 [Design Pattern in Java]</title>
      <link href="/2020/07/26/Design-Pattern-Java-Factory-Pattern-%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/26/Design-Pattern-Java-Factory-Pattern-%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>工廠模式提供了可創建(new)各種不同類別(class)的實例(instance)</p><p>工廠模式主要又涵蓋了 (1) 簡單工廠模式 Simple Factory Pattern (2) 工廠方法模式 (3) 抽象方法模式</p><p>簡單工廠方法是最初階的用法，會違反OOP的Open-close principle(OCP)<br>然而工廠方法和抽象方法則比較能讓模組間耦合度降低。</p><p>以下會依序做介紹</p><a id="more"></a><h2 id="簡單工廠模式-Simple-Factory-Method"><a href="#簡單工廠模式-Simple-Factory-Method" class="headerlink" title="簡單工廠模式 Simple Factory Method"></a>簡單工廠模式 Simple Factory Method</h2><p>簡單工廠模式僅提供一個工廠類別，接收參數(決定生產哪種產品)，來產生出對應的產品物件(Object)</p><p>以生產Pizza為例，假設我們有個披薩簡單工廠(SimplePizzaFactory)可以生產兩種不同口味的Pizza(Cheese和Potato):</p><p>SimplePizzaFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工廠會回傳抽象的Pizza類別</p><p>Pizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  String ingridient;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing"</span> + name);</span><br><span class="line">    System.out.println(<span class="string">"Ingredient"</span> + ingridient);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Bake for 20 mins"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及實作了兩個口味的披薩 CheesePizza和PotatoPizza</p><p>CheesePizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name = <span class="string">"CheesePizza"</span>;</span><br><span class="line">  String ingridient = <span class="string">"Cheese"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PotatoPizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PotatoPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name = <span class="string">"PotatoPizza"</span>;</span><br><span class="line">  String ingridient = <span class="string">"Potato"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Pizza都定義完畢後，定義SimplePizzaFactory.java</p><p>SimplePizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Main.java透過SimplePizzaFactory製作兩個Pizza:</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SimplePizzaFactory simplePizzaFactory = <span class="keyword">new</span> SimplePizzaFactory();</span><br><span class="line">    </span><br><span class="line">    simplePizzaFactory.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">    simplePizzaFactory.orderPizza(<span class="string">"potato"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行Main.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Preparing: CheesePizza</span><br><span class="line">Ingredient: Cheese</span><br><span class="line">Bake for 20 mins</span><br><span class="line">Preparing: PotatoPizza</span><br><span class="line">Ingredient: Potato</span><br><span class="line">Bake for 20 mins</span><br></pre></td></tr></table></figure><p>但此若之後要擴充Pizza的種類，例如要多一個叫做OnionPizza，勢必得修改SimplePizzaFacotory.java</p><p>SimplePizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"onion"</span>)) &#123; <span class="comment">// 新增洋蔥口味pizza  </span></span><br><span class="line">      pizza = <span class="keyword">new</span> OnionPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>:::danger<br>上述做法破壞了OOD的OCP(Open-Close Principle)的原則，亦即進行擴充時不修改到SimplePizzaFactory的程式碼。<br>:::</p><h2 id="工廠方法模式"><a href="#工廠方法模式" class="headerlink" title="工廠方法模式"></a>工廠方法模式</h2><p>為了改善簡單工廠模式，工廠方法模式透過”抽象方法”的模式，讓之後擴充的工廠實作該”抽象方法”，以進行其他類別的擴充</p><p>舉例：有個PizzaFactory負責定義了Pizza工廠該做的一件事(抽象方法)<br>叫做 createPizza();</p><p>PizzaFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本我們已經有兩種口味(Cheese和Potato) Pizza，叫做原味披薩(OriginalPizzaFactory), 使OringinalPizzaFactory去實作PizzaFactory的createPizza()方法</p><p>OringinalPizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OriginalPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>若要新增洋蔥口味的Pizza的話，那就直接在定義一個額外的工廠叫做，特別披薩工廠 (SpecialPizzaFactory)進行擴充，如此一來就不用更動到到原本原味披薩工廠(OriginalPizzaFactory)的程式碼</p><p>SpecialPizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecialPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"onion"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> OnionPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>記得多新增一個洋蔥披薩的類別 </p><p>OnionPizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnionPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OnionPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"OnionPizza"</span>;</span><br><span class="line">    ingridient = <span class="string">"Onion"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Main.java中呼叫原味和特別口味的披薩</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    PizzaFactory originalPizzaFactory = <span class="keyword">new</span> OriginalPizzaFactory();</span><br><span class="line">    </span><br><span class="line">    originalPizzaFactory.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">    originalPizzaFactory.orderPizza(<span class="string">"potato"</span>);</span><br><span class="line"></span><br><span class="line">    PizzaFactory specialPizzaFactory = <span class="keyword">new</span> SpecialPizzaFactory();</span><br><span class="line">    specialPizzaFactory.orderPizza(<span class="string">"onion"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>透過下面的圖可以看到，透過定義一個抽象方法的工廠，若要擴充產品(在這裡我們用的是Pizza)類別的話，透過實作該抽象方法工廠，來進行擴充。</p><p><img src="https://i.imgur.com/cmWuZ3v.png" alt=""></p><p>由於我們亦把Pizza類別給獨立出來成為一個抽象類別，若要新增其他口味的Pizza也可以達到不違反OCP精神的擴充，如下圖所示：</p><p><img src="https://i.imgur.com/Wp4QRfE.png" alt=""></p><h2 id="抽象工廠"><a href="#抽象工廠" class="headerlink" title="抽象工廠"></a>抽象工廠</h2><p>抽象工廠顧名思義就是定義一個抽象介面工廠，欲擴充的話就實作該抽象介面工廠</p><p>以披薩原料工廠(PizzaIngredientFactory)為例，有醬料和蔬菜兩種原料：<br>方面給之後我們要製作的中式和美式披薩的原料實作，做擴展：</p><p>PizzaIngredientFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="抽象工廠-原料工廠-在透過工廠方法來製作原料產品"><a href="#抽象工廠-原料工廠-在透過工廠方法來製作原料產品" class="headerlink" title="抽象工廠(原料工廠)在透過工廠方法來製作原料產品"></a>抽象工廠(原料工廠)在透過工廠方法來製作原料產品</h3><p>我們再分別產生美式版本(AmericaIngredientFactory)和中式版本(ChinesePizzaFactory)的披薩原料工廠，可以看到使用了createSauce和createVegetable，透過工廠方法來產生原料產品</p><p>AmericaIngredientFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomatoSauce();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Potato();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ChineseIngredientFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SoySauce();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Onion();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接著定義剛剛原料工廠有使用到的原料類別們(Sauce: SoySauce與PotatoSauce; Vegetable: Onion和Potato，該原料亦在實作Pizza類別的具體類別亦會用到</p><p>:::info<br>Pizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在Pizza類別中已經有宣告會用到的原料有哪些，是以介面來實作，方便做擴展</span></span><br><span class="line">  Sauce sauce;</span><br><span class="line">  Vegetable vegetable;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>:::</p><p>定義醬料Sauce原料們：</p><p>Sauce.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Sauce</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getSauce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SoySauce.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoySauce</span> <span class="keyword">extends</span> <span class="title">Sauce</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoySauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"soy sauce"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The sauce is :"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TomatoSauce.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomatoSauce</span> <span class="keyword">extends</span> <span class="title">Sauce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TomatoSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"tomato sauce"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The sauce is :"</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下來換定義Vegetable原料們</p><p>Vegetable.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getVegetable</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Onion.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Onion</span> <span class="keyword">extends</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Onion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"onion"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The vegetable is :"</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Potato.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Potato</span> <span class="keyword">extends</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Potato</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"potato"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The vegetable is :"</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>將披薩修改成包含上述原料 (Sauce和Vegetable)</p><p>Pizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  </span><br><span class="line">  Sauce sauce;</span><br><span class="line">  Vegetable vegetable;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 將prepare修改成抽象，該方法需要收集Pizza所需的原料，原料來自於原料工廠！</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Bake for 30 mins"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定義兩個style的Pizza: 中式披薩(Chinese Pizza)和美式披薩(America Pizza)，在這兩隻類別可以看到我們傳入了原料工廠，以決定哪種風格的披薩就用對應風格的原料工廠</p><p>ChinesePizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ChinesePizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing: "</span> + name);</span><br><span class="line"></span><br><span class="line">    sauce = ingredientFactory.createSauce();</span><br><span class="line">    sauce.getSauce();</span><br><span class="line"></span><br><span class="line">    vegetable = ingredientFactory.createVegetable();</span><br><span class="line">    vegetable.getVegetable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AmericaPizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericaPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AmericaPizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing: "</span> + name);</span><br><span class="line"></span><br><span class="line">    sauce = ingredientFactory.createSauce();</span><br><span class="line">    sauce.getSauce();</span><br><span class="line"></span><br><span class="line">    vegetable = ingredientFactory.createVegetable();</span><br><span class="line">    vegetable.getVegetable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接著再利用工廠方法，定義中式和美式的披薩工廠，製作出中式和美式的披薩</p><p>PizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AmericaPizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericaPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String style)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用了美式原料工廠</span></span><br><span class="line">    PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> AmericaIngredientFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(style.equals(<span class="string">"America"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> AmericaPizza(ingredientFactory);</span><br><span class="line">      pizza.setName(<span class="string">"America style pizza"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>:::info<br>可以在對美式工廠新增其他種不同口味的Pizza，用不同的原料工廠來達成<br>:::</p><p>ChinesePizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinesePizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String style)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用了中式原料工廠</span></span><br><span class="line">    PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> ChineseIngredientFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(style.equals(<span class="string">"Chinese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> ChinesePizza(ingredientFactory);</span><br><span class="line">      pizza.setName(<span class="string">"Chinese style pizza"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>最後在Main.java中來製作披薩：</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    PizzaFactory AmericaPizzaFactory = <span class="keyword">new</span> AmericaPizzaFactory();</span><br><span class="line">    </span><br><span class="line">    AmericaPizzaFactory.orderPizza(<span class="string">"America"</span>);</span><br><span class="line"></span><br><span class="line">    PizzaFactory ChinesePizzaFactory = <span class="keyword">new</span> ChinesePizzaFactory();</span><br><span class="line"></span><br><span class="line">    ChinesePizzaFactory.orderPizza(<span class="string">"Chinese"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到抽象工廠方法可以幫我們把相關產品集結起來(上述例子為原料們)，可以產生出不同組的原料類別們，另外抽象工廠通常還會再搭配工廠方法，來建立其產品(披薩們，各個披薩會用到各個不同的抽象工廠所建立的原料工廠)，如同該連結所做的-&gt;<a href="#抽象工廠(原料工廠">連結</a>在透過工廠方法來製作原料產品)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Singleton Pattern 獨體模式 [Design Pattern in Java]</title>
      <link href="/2020/07/26/Design-Pattern-Java-Singleton-Pattern-%E7%8D%A8%E9%AB%94%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/26/Design-Pattern-Java-Singleton-Pattern-%E7%8D%A8%E9%AB%94%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>每次引用類別都只會產出相同的物件</p><p>適合用在: 執行緒池(thread pool)，快取區(cache)，對話盒、處理對話設定和登錄的物件，和驅動程式溝通的物件。</p><a id="more"></a><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><p>假如有一個類別叫做MyClass，現在要讓MyClass變成獨體模式，讓外面的類別只能透過 MyClass.getInstance() 取得MyClass物件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 設定成private與static，不能給外面類別存取</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 將建構式設定成 private，這樣就可以避免直接被類別 new出來</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 設置成static，使外面類別可以直接存取MyClass.getInstance方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若第一次取得MyClass， new 出MyClass();</span></span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> MyClass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他類別要取用MyClass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">    // 1. 第一次取用getInstance</span><br><span class="line">    Myclass instance = MyClass.getInstance();</span><br><span class="line">    // 2. 第二次取用getInstance時，MyClass的uniqueInstance已經有值了，得到與上面instance一樣的object</span><br><span class="line">    Myclass instance1 = MyClass.getInstance();</span><br><span class="line">    </span><br><span class="line">    if(instance == instance1) &#123;</span><br><span class="line">        System.out.println(&quot;instance and instance1 are the same&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多執行緒下獨體模式會遇到的狀況"><a href="#多執行緒下獨體模式會遇到的狀況" class="headerlink" title="多執行緒下獨體模式會遇到的狀況"></a>多執行緒下獨體模式會遇到的狀況</h2><p>假如有兩個thread(thread 1和thread 2)，同時要跟MyClass取得物件，但會面臨thread1和thread2會取得不同的MyClass物件，情況如下：</p><p><img src="https://i.imgur.com/OjAKXpb.png" alt=""></p><h3 id="解法一：只要把getInstance-給同步化-會有效能不佳的狀況，可能造成效率下降100倍"><a href="#解法一：只要把getInstance-給同步化-會有效能不佳的狀況，可能造成效率下降100倍" class="headerlink" title="解法一：只要把getInstance()給同步化 (會有效能不佳的狀況，可能造成效率下降100倍)"></a>解法一：只要把getInstance()給同步化 (會有效能不佳的狀況，可能造成效率下降100倍)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 設定成synchronized，就可以讓執行緒依序進入getInstance內</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> MyClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> MyClass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我們只需要第一次進入getInstance才進行同步化就好，不然其他次要取得uniqueInstnace都得變成同步的方式，造成取用Instance的緩慢</p><h3 id="解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體"><a href="#解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體" class="headerlink" title="解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體"></a>解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 直接初始話MyClass()，並設成private</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass uniqueInstnace = <span class="keyword">new</span> MyClass();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此作法依賴JVM載入此類別時，馬上建立此唯一的獨體物件，JVM保證在任何執行緒存取uniqueInstnace靜態變數之前，一定先建立此實體</p><h3 id="解法三：利用-“雙重檢查上鎖”-在getInstance-中減少使用同步化"><a href="#解法三：利用-“雙重檢查上鎖”-在getInstance-中減少使用同步化" class="headerlink" title="解法三：利用 “雙重檢查上鎖” 在getInstance()中減少使用同步化"></a>解法三：利用 “雙重檢查上鎖” 在getInstance()中減少使用同步化</h3><p>利用雙重檢查上鎖，首先檢查是否實體已經建立了，<br>若沒有，“才”進行同步化，如此一來只有第一次進入getInstance才同步化，才是我們所想要的。</p><p><code>`</code>java=<br>public class MyClass {<br>    // volatile為Java 6之後才有的關鍵字，能夠使執行緒們取得相同的uniqueInstance<br>    private volatile static MyClass uniqueInstance;</p><pre><code>private MyClass() {}public static MyClass getInstance() {    // 只有第一次才徹底執行以下程式碼     // 當執行緒遇到被宣告成volatile的uniqueInstnace，會變得謹慎    if(uniqueInstance == null) {        synchronized(MyClass.class) {            // 再檢查一次，若為null則new MyClass();            if(uniqueInstance == null) {                uniqueInstance = new MyClass();            }        }    }    return uniqueInstance;}</code></pre><p>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command Pattern 命令模式 [Design Pattern in Java]</title>
      <link href="/2020/07/26/Design-Pattern-Command-Pattern-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/26/Design-Pattern-Command-Pattern-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>命令模式主要將執行的命令, 與執行者做鬆綁的動作</p><a id="more"></a><h2 id="沒有命令模式會是怎樣的寫法？？"><a href="#沒有命令模式會是怎樣的寫法？？" class="headerlink" title="沒有命令模式會是怎樣的寫法？？"></a>沒有命令模式會是怎樣的寫法？？</h2><p>假如我們現在要寫一個 遙控器 RemoteControl (執行者), 上面會有很多按鈕功能 (命令)</p><p>每個按鈕可能都對應各個功能, 例如 打開, 關閉某些房間的燈</p><p>於是我們定義了 <code>Light</code> 抽象類別, 有著 <code>on()</code>與<code>off()</code>開關燈的方法, 並且實作了 <code>LivingRoomLight</code>, <code>KitchenLight</code>這兩個房間並繼承 <code>Light</code>抽象類別的方法, 使他們都有開關的功能！</p><p>接著在遙控器 <code>RemoteControl</code>類別內定義了 <code>Light[]</code> 陣列, 儲存欲執行的功能 (實作Light的類別們)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定義出一個遙控器instance</span></span><br><span class="line">        RemoteControl remoteControl =</span><br><span class="line">                <span class="keyword">new</span> RemoteControl(</span><br><span class="line">                <span class="keyword">new</span> Light[]&#123;</span><br><span class="line">                        <span class="keyword">new</span> LivingRoomLight(),</span><br><span class="line">                        <span class="keyword">new</span> KitchenLight()</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// 0: 打開LivingRoom Light</span></span><br><span class="line">        <span class="comment">// 1: 打開Kitchen Light</span></span><br><span class="line">        remoteControl.turnOnLight(<span class="number">0</span>);</span><br><span class="line">        remoteControl.turnOnLight(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 0: 關閉LivingRoom Light</span></span><br><span class="line">        <span class="comment">// 1: 關閉Kitchen Light</span></span><br><span class="line">        remoteControl.turnOffLight(<span class="number">0</span>);</span><br><span class="line">        remoteControl.turnOffLight(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Light[] lights = <span class="keyword">new</span> Light[<span class="number">10</span>];</span><br><span class="line">    RemoteControl(Light[] lights) &#123;</span><br><span class="line">        <span class="comment">// 將傳進來的lights放入到lights內</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lights[i] = lights[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOnLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOffLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    Light() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingRoomLight</span> <span class="keyword">extends</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    LivingRoomLight() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the living room light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn off the living room light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KitchenLight</span> <span class="keyword">extends</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    KitchenLight() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the kitchen light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn off the kitchem light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行結果如下</p><p><img src="https://i.imgur.com/AvxerGU.png" alt=""></p><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>假如現在又想要添加電視與冷氣開關的功能 <code>TV</code>, <code>AirConditioner</code>, 那不就又要在<code>RemoteControl</code>類別內進行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 又新增了HomeDevice陣列...定義家具集合的類別</span></span><br><span class="line">    HomeDevice[] homeDevices = <span class="keyword">new</span> HomeDevice[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    Light[] lights = <span class="keyword">new</span> Light[<span class="number">10</span>];</span><br><span class="line">    RemoteControl(Light[] lights) &#123;</span><br><span class="line">        <span class="comment">// 將傳進來的lights放入到lights內</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lights[i] = lights[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOnLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOffLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].off();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 又在定義HomeDevice的開關功能...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可看到每次若要為遙控器類別新增功能, 都要對<code>RemoteControl</code>進行修改的動作, 如此一來可能會造成其他已經內嵌好的功能可能被改壞的狀況發生, 這時我們可以使用 <code>Command 模式</code> 來避免這種狀況發生</p><h2 id="Command-命令模式的優勢"><a href="#Command-命令模式的優勢" class="headerlink" title="Command 命令模式的優勢"></a>Command 命令模式的優勢</h2><p>命令模式可以幫我們把要賦予<code>RemoteControl</code>的這些功能給封裝起來, 成為一個獨立的個體, 不會跟<code>RemoteControl</code>給耦合再一起 (像上面turnOnLight, turnOffLight等功能)</p><p>我們可以把 <code>Light</code> 的開關功能都視作為 <code>Command (命令)</code>抽象介面, 該介面包含了一個 <code>execute()</code>功能, </p><p>接著由Command (命令)衍伸出 <code>LightOnCommand</code>與<code>LightOffCommand</code>這兩個實作類別, 負責定義<code>Light</code>的開與關的動作</p><p><img src="https://i.imgur.com/t1zF1vQ.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定義一個命令, 包含的執行execute的動作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 實作燈的開關命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the light"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn off the light"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    LightOnCommand() &#123;</span><br><span class="line">        <span class="keyword">this</span>.light = <span class="keyword">new</span> Light();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    LightOffCommand() &#123;</span><br><span class="line">        <span class="keyword">this</span>.light = <span class="keyword">new</span> Light();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    NoCommand() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Not yet defined"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著我們需要在遙控器類別 <code>RemoteControl</code> 定義可放置Command的動作 <code>setXXXCommand()</code>, 以及呼叫Command的 <code>pressOnButton()</code>與<code>pressOffButton()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定義遙控器類別</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    Command[] onCommands = <span class="keyword">new</span> Command[<span class="number">7</span>];</span><br><span class="line">    Command[] offCommands = <span class="keyword">new</span> Command[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一開始的插槽, 若沒功能就定義一個沒作用的command供呼叫 (可避免用 if (command != null) 這種判斷方式</span></span><br><span class="line">    RemoteControl() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCommand</span><span class="params">(<span class="keyword">int</span> slot, Command onCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands[slot] = onCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffCommand</span><span class="params">(<span class="keyword">int</span> slot, Command offCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offCommands[slot] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pressOnButton</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pressOffButton</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顯示我們塞了哪些功能到slot內</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuff = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        stringBuff.append(<span class="string">"\n ------- Remote Control-------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; onCommands.length; i++) &#123;</span><br><span class="line">            stringBuff.append(<span class="string">"[slot "</span> + i + <span class="string">"] "</span> + onCommands[i].getClass().getName() + <span class="string">"    "</span> + offCommands[i].getClass().getName() + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuff.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過這樣的做法, 我們可以看到原本<code>RemoteControl</code>內的與Light操作有關的動作, 都被我們透過 <code>Command</code> 抽象介面以及其 <code>LightOnCommand</code>與<code>LightOffCommand</code>實作類別給抽離出來了</p><p>於是我們可以來執行看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定義出兩種房間的燈</span></span><br><span class="line">        Light LivingRoomLight = <span class="keyword">new</span> Light(<span class="string">"Living Room"</span>);</span><br><span class="line">        Light KitchenLight = <span class="keyword">new</span> Light(<span class="string">"Kitchen"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 設置Command按鈕</span></span><br><span class="line">        remoteControl.setOnCommand(<span class="number">0</span>, <span class="keyword">new</span> LightOnCommand(LivingRoomLight));</span><br><span class="line">        remoteControl.setOffCommand(<span class="number">0</span>, <span class="keyword">new</span> LightOffCommand(LivingRoomLight));</span><br><span class="line"></span><br><span class="line">        remoteControl.setOnCommand(<span class="number">1</span>, <span class="keyword">new</span> LightOnCommand(KitchenLight));</span><br><span class="line">        remoteControl.setOffCommand(<span class="number">1</span>, <span class="keyword">new</span> LightOffCommand(KitchenLight));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顯示有哪些功能</span></span><br><span class="line">        System.out.println(remoteControl.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 執行命令</span></span><br><span class="line">        <span class="comment">//// 客廳的</span></span><br><span class="line">        remoteControl.pressOnButton(<span class="number">0</span>);</span><br><span class="line">        remoteControl.pressOffButton(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//// 廚房的</span></span><br><span class="line">        remoteControl.pressOnButton(<span class="number">1</span>);</span><br><span class="line">        remoteControl.pressOffButton(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/q9PTG18.png" alt=""></p><p>若接下來需要新增如浴室開關, 電視開關, 只要透過<code>RemoteConrol</code>的<code>setCommand()</code>方法, 即可以動態做設置, 不需更動到遙控器類別原本的程式碼！ (除非要改變遙控器的slot大小了)</p><h2 id="進階的Command-Pattern技巧"><a href="#進階的Command-Pattern技巧" class="headerlink" title="進階的Command Pattern技巧"></a>進階的Command Pattern技巧</h2><p>等待補充 (為Command介面新增 undo()方法, 使動作復原)</p><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><p>運用在任務序列中, 多執行緒只要拿到Command物件, 並且執行<code>execute</code>方法負責執行完就好</p><p>或是用在日誌管理, 將執行過的動作給記錄起來, 並且若後續伺服器當機, 可將命令給復原</p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下班自修的經驗分享</title>
      <link href="/2020/05/16/%E4%B8%8B%E7%8F%AD%E8%87%AA%E4%BF%AE%E7%9A%84%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
      <url>/2020/05/16/%E4%B8%8B%E7%8F%AD%E8%87%AA%E4%BF%AE%E7%9A%84%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>最近剛好在Backend版上看到有人Po文問說: “下班後要如何精進自修”, 意外看到許多大大們在下面留言, 正好最近我也在思考要如何精進自己, 所以趁這機會來統整一下大大們提出來的想法並且與自己目前的進修方式做結合, 主要會以Full-Stack engineer的精進方式來做個紀錄分享.</p><a id="more"></a><h2 id="如果對某程式語言-amp-框架掌握度還不夠-請先熟悉之！"><a href="#如果對某程式語言-amp-框架掌握度還不夠-請先熟悉之！" class="headerlink" title="如果對某程式語言&amp;框架掌握度還不夠, 請先熟悉之！"></a>如果對某程式語言&amp;框架掌握度還不夠, 請先熟悉之！</h2><p>如果上班接觸到某種自己不熟悉的語言或框架, 像我目前需要寫Java &amp; Spring, 與Angular &amp; Typescript.</p><p>所以我會偏好先到線上程式語言線上平台進修之, 因為這些學習平台能夠提供完整的學習輪廓, 能夠讓我快速掌握該程式語言&amp;框架所需具備的硬知識為何.</p><p>說到線上程式學習平台, 我蠻推薦 <a href="https://app.pluralsight.com/" target="_blank" rel="noopener">Pluralsight</a>, 因為該平台提供了該程式語言或框架推薦學習的影片, 並且透過測驗推估你對該技術的知識程度為何.</p><p><img src="https://i.imgur.com/2vtrkLm.png" alt=""></p><p>有興趣可以到該平台試試看, 不過每個月會收取29美元的花費, 不過這花費當作投資是蠻值得的.</p><h2 id="若已經對程式語言-amp-框架有經驗-可以嘗試看看Side-Project"><a href="#若已經對程式語言-amp-框架有經驗-可以嘗試看看Side-Project" class="headerlink" title="若已經對程式語言&amp;框架有經驗, 可以嘗試看看Side Project"></a>若已經對程式語言&amp;框架有經驗, 可以嘗試看看Side Project</h2><p>為什麼會特地提到Side Project?? 那是因為在公司其實很難自己能夠負責專案的所有全貌, 例如可能只是負責寫API, 也可能只負責前端頁面的刻畫.</p><p>所以透過Side Project, 便能夠有機會嘗試所有技術的機會, 並且從中去體會到自己最想要加強的領域是哪邊, 例如後端效能? 前端渲染速度? Container, CI/CD的運作? 諸如此類, 從而培養一個Full-Stack的經驗.</p><p>所以下班後自己跑一個Side Project是個不錯的精進方式.</p><h3 id="但要怎麼樣想出一個Side-Project"><a href="#但要怎麼樣想出一個Side-Project" class="headerlink" title="但要怎麼樣想出一個Side Project?"></a>但要怎麼樣想出一個Side Project?</h3><p>我覺得學習最快的方式就是模仿, 可以到Github上搜尋有興趣的專案, 並且試著用自己的程式語言與框架自己做出一套是最快的方式.</p><p>像我因為很喜歡用Markdown方式來做筆記, 目前打算自己做個小型的線上筆記編輯系統, 並看到Github上有提供<a href="https://github.com/codimd/server" target="_blank" rel="noopener">CodiMD</a> 的開源專案可參考, 來試著自己建造出一個看看. 之後會再分享到自己的部落格上怎麼一步一步進行的.</p><h2 id="嘗試撰寫線上筆記或部落格吧"><a href="#嘗試撰寫線上筆記或部落格吧" class="headerlink" title="嘗試撰寫線上筆記或部落格吧"></a>嘗試撰寫線上筆記或部落格吧</h2><p>我認為現在技術真的太多太多了, 如果沒有將自己看過的技術文章或學習影片給消化和記錄起來, 很快就又會忘記. 所以最好的方式是有個做筆記的習慣!</p><p>做筆記的話我都是用Hackmd先記錄起來, 之後等有空的時間會再消化審視自己寫過的內容, 並發佈到自己的Bloger上, 這樣有助於將學習過的知識給內化到自己的腦海中.</p><h2 id="其他更進階的進修方法"><a href="#其他更進階的進修方法" class="headerlink" title="其他更進階的進修方法"></a>其他更進階的進修方法</h2><h3 id="根據技能樹-RoadMap-來補充自己最常用-有興趣但所缺乏的觀念與技術"><a href="#根據技能樹-RoadMap-來補充自己最常用-有興趣但所缺乏的觀念與技術" class="headerlink" title="根據技能樹(RoadMap)來補充自己最常用,有興趣但所缺乏的觀念與技術"></a>根據技能樹(RoadMap)來補充自己最常用,有興趣但所缺乏的觀念與技術</h3><p>這網站<a href="https://roadmap.sh/roadmaps" target="_blank" rel="noopener">Roadmap</a>提供了各開發者(Frontend, Backend, DevOps)所需要具備的技能樹為何<br>, 若想要往後端精進, 可以看到下面這張圖會碰到哪些所需具備的能力.</p><p><img src="https://i.imgur.com/tGdhgGX.png" alt=""></p><p>看完之後會發覺有太多東西需要Cover了, 學海無涯 (茶).</p><h3 id="經營-Stackoverflow"><a href="#經營-Stackoverflow" class="headerlink" title="經營 Stackoverflow"></a>經營 Stackoverflow</h3><p>這點是我看到大大們提出來可以嘗試的方式, 不過我目前也只有在Stackoverflow上面問幾個小問題, 對這方面還沒有涉略, 可參考下面大大所寫的Stackoverflow的介紹, 未來我會想在這邊嘗試看看能不能也試著回答別人遇到的問題.</p><p><a href="https://lab.howie.tw/2019/04/learn-from-stackoverflow.html?fbclid=IwAR2VuMNEjP8gvE-IFa69zJZaHNROM8-pj8dgt0-641gcjGwmkCNuBzNal8k" target="_blank" rel="noopener">工程師鍛鍊接軌世界的能力從stackoverflow 開始 - 阿貝好威的實驗室</a></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>下班後要再自修真的需要有興趣使然以及強大的毅力, 否則很容易就會半途而廢.</p><p>所以最重要的還是要讓自己有個規劃, 並且從實踐規劃中內化成自己的日常習慣, 久而久之就會讓自己變得更強的！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年的想法</title>
      <link href="/2020/01/01/2020%E5%B9%B4%E7%9A%84%E6%83%B3%E6%B3%95%E8%88%87%E8%87%AA%E4%BF%AE%E8%A6%8F%E5%8A%83/"/>
      <url>/2020/01/01/2020%E5%B9%B4%E7%9A%84%E6%83%B3%E6%B3%95%E8%88%87%E8%87%AA%E4%BF%AE%E8%A6%8F%E5%8A%83/</url>
      
        <content type="html"><![CDATA[<p>回顧了一下2019年對自己的期許，<br>自己與期許的似乎還有所差距，<br>就再接再厲。<br><a id="more"></a></p><p>希望今年強化自身的網站開發的實力(以後端為主)<br>接下來2020年想要趁下班閒暇時間時來做：</p><ul><li>刷刷leetcode</li><li>找一個side project來經營 (預計用Java Spring Boot後端, Angular前端)</li><li>複習資料結構，資料庫SQL語法等</li></ul><p>以上繼續精進，自我勉勵</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何查看透過智能合約存在以太坊上的資料？</title>
      <link href="/2019/02/10/checksmartcontractdata/"/>
      <url>/2019/02/10/checksmartcontractdata/</url>
      
        <content type="html"><![CDATA[<p>在看這篇文章之前必須要知道一件事，那就是透過智能合約存在區塊鏈上的資訊都是<span style="color:red">公開的</span>。</p><a id="more"></a><p>不管你是否有在智能合約上面有用<code>requre(), revert(), assert()</code>等等來限制某地址的人來存取智能合約上的變數，但這些變數都會存以太坊EVM的Storage上面，每個節點都可以透過以下方式來對EVM的Storage內的編碼進行解析，並還原當初透過合約所儲存的變數資料！！！</p><p>以下透過一個範例來瞭解如何透過web3.js library中的<code>eth.getStorage()</code>方法來解析Storage內儲存的資訊。</p><h4 id="智能合約範例："><a href="#智能合約範例：" class="headerlink" title="智能合約範例："></a>智能合約範例：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">prama solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract testStorage &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint</span> storeduint1 = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">uint</span> constant constuint = <span class="number">16</span>;</span><br><span class="line">    uint128 investmentsLimit = <span class="number">17055</span>;</span><br><span class="line">    <span class="keyword">uint32</span> investmentsDeadlinedTimeStamp = <span class="keyword">uint32</span>(now);</span><br><span class="line">    </span><br><span class="line">    bytes16 string1 = <span class="string">'test1'</span>;</span><br><span class="line">    bytes32 string2 = <span class="string">'test1236'</span>;</span><br><span class="line">    <span class="keyword">string</span> string3 = <span class="string">'lets string something'</span>;</span><br><span class="line">    </span><br><span class="line">    mapping (address =&gt; <span class="keyword">uint</span>) uints1;</span><br><span class="line">    mapping (address =&gt; DeviceData) structs1;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">uint</span>[] uintarray;</span><br><span class="line">    DeviceData[] deviceDataArray;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> DeviceData &#123;</span><br><span class="line">        <span class="keyword">string</span> deviceBrand;</span><br><span class="line">        <span class="keyword">string</span> deviceYear;</span><br><span class="line">        <span class="keyword">string</span> batteryWearLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function testStorage() &#123;</span><br><span class="line">        address address1 = <span class="number">0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df</span>6</span><br><span class="line">        address address2 = <span class="number">0xaee905fdd3ed851e48d22059575b9f</span>4245a82b04;</span><br><span class="line">        </span><br><span class="line">        uints1[address1] = <span class="number">88</span>;</span><br><span class="line">        uints1[address2] = <span class="number">99</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> dev1 = DeviceData(<span class="string">'deviceBrand'</span>, <span class="string">'deviceYear'</span>, <span class="string">'wearLevel'</span>);</span><br><span class="line">        <span class="keyword">var</span> dev2 = DeviceData(<span class="string">'deviceBrand2'</span>, <span class="string">'deviceYear2'</span>, <span class="string">'wearLevel2'</span>);</span><br><span class="line">        </span><br><span class="line">        structs1[addresss1] = dev1;</span><br><span class="line">        structs1[addresss2] = dev2;</span><br><span class="line">        </span><br><span class="line">        uintarray.push(<span class="number">8000</span>);</span><br><span class="line">        uintarray.push(<span class="number">9000</span>);</span><br><span class="line">        </span><br><span class="line">        deviceDataArray.push(dev1);</span><br><span class="line">        deviceDataArray.push(dev2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假設我們合約的地址是在：<code>0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b</code></p><p>所有儲存在storage內的參數都可以用index來索引，index的格式為256 bytes以及對應64碼。<br>在以上的範例中我們有 10個參數，所以可以透過index來一一遍歷他們：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let contractAddress = &apos;0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b&apos;</span><br><span class="line">for (index = 0; index &lt; 10; index++)&#123;</span><br><span class="line"> console.log(`[$&#123;index&#125;]` + </span><br><span class="line">   web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">&#125;</span><br><span class="line">result:</span><br><span class="line">[0] 0x000000000000000000000000000000000000000000000000000000000000000f</span><br><span class="line">[1] 0x00000000000000000000000059b92d9a0000000000000000000000000000429f</span><br><span class="line">[2] 0x0000000000000000000000000000000074657374310000000000000000000000</span><br><span class="line">[3] 0x7465737431323336000000000000000000000000000000000000000000000000</span><br><span class="line">[4] 0x6c65747320737472696e6720736f6d657468696e67000000000000000000002a</span><br><span class="line">[5] 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">[6] 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">[7] 0x0000000000000000000000000000000000000000000000000000000000000002</span><br><span class="line">[8] 0x0000000000000000000000000000000000000000000000000000000000000002</span><br><span class="line">[9] 0x0000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p>開始針對合約內的10個變數一一做遍歷和解析</p><h3 id="index-0-storeduint1"><a href="#index-0-storeduint1" class="headerlink" title="index 0 - storeduint1"></a>index 0 - storeduint1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let contractAddress = &apos;0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b&apos;</span><br><span class="line">let index = 0</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;DEC:&apos; + web3.toDecimal(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result:</span><br><span class="line">0x000000000000000000000000000000000000000000000000000000000000000f</span><br><span class="line">DEC:15</span><br></pre></td></tr></table></figure><h3 id="constuint"><a href="#constuint" class="headerlink" title="constuint"></a>constuint</h3><p>Constants(常數) 不會被存在storage內，只能夠透過code來存取</p><h3 id="index-1-investmentsLimit-investmentsDeadlineTimeStamp"><a href="#index-1-investmentsLimit-investmentsDeadlineTimeStamp" class="headerlink" title="index 1 - investmentsLimit, investmentsDeadlineTimeStamp"></a>index 1 - investmentsLimit, investmentsDeadlineTimeStamp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let index = 1</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">result:</span><br><span class="line"> 0x00000000000000000000000059b92d9a0000000000000000000000000000429f</span><br><span class="line">DEC:  1505308058   and  17055</span><br></pre></td></tr></table></figure><p>在index 1中，會將2個變數(investmentsLimit, investmentsDeadlineTimeStamp)做合併來最佳化storage的存放</p><h3 id="index-2-string1"><a href="#index-2-string1" class="headerlink" title="index 2 - string1"></a>index 2 - string1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index = 2</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result: </span><br><span class="line">0x0000000000000000000000000000000074657374310000000000000000000000</span><br><span class="line">ASCII: test1</span><br></pre></td></tr></table></figure><h3 id="index-3-string2"><a href="#index-3-string2" class="headerlink" title="index 3 - string2"></a>index 3 - string2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index = 3</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result:</span><br><span class="line">0x7465737431323336000000000000000000000000000000000000000000000000</span><br><span class="line">ASCII: test1236</span><br></pre></td></tr></table></figure><h3 id="index-4-string3"><a href="#index-4-string3" class="headerlink" title="index 4 - string3"></a>index 4 - string3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index = 4</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result:</span><br><span class="line">0x6c65747320737472696e6720736f6d657468696e67000000000000000000002a</span><br><span class="line">ASCII: lets string something         * (42)</span><br></pre></td></tr></table></figure><p>在result最後有 2a(dec42)為 string儲存的長度<br>可參閱solidity官方文件描述變數在storage中呈現的格式：<a href="https://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage</a></p><h3 id="index-5-—-uints1"><a href="#index-5-—-uints1" class="headerlink" title="index 5 — uints1"></a>index 5 — uints1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = 5</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">PROBLEM!!!!</span><br></pre></td></tr></table></figure><p>若遇到 mapping struct宣告的變數，無法直接透過一般的index來取得struct內所儲存的值，必須得曉得對應value中的 <code>key</code>值，否則是不可能取得的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 要取回在 uints1 struct所儲存在addresss1的值 :88</span><br><span class="line">// uints1[address1] = 88; </span><br><span class="line"></span><br><span class="line">address1 = 0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">index = &apos;0000000000000000000000000000000000000000000000000000000000000005&apos;</span><br><span class="line"></span><br><span class="line">// convert address1 to the 256 bytes...</span><br><span class="line">key =  &apos;00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6&apos;</span><br><span class="line"></span><br><span class="line">let newKey =  web3.sha3(key + index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;DEC: &apos; + web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000000058</span><br><span class="line">DEC: 88</span><br></pre></td></tr></table></figure><h3 id="index6-structs1"><a href="#index6-structs1" class="headerlink" title="index6 - structs1"></a>index6 - structs1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000006&quot;</span><br><span class="line">key =  &quot;00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6&quot;</span><br><span class="line">let newKey =  web3.sha3(key + index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963654272616e64000000000000000000000000000000000000000016</span><br><span class="line">ASCII: deviceBrand</span><br></pre></td></tr></table></figure><p>若要讀取下一個struct的值，只需要將newKey的值+1即可取到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function increaseHexByOne(hex) &#123;</span><br><span class="line"> let x = new BigNumber(hex)</span><br><span class="line"> let sum = x.add(1)</span><br><span class="line"> let result = &apos;0x&apos; + sum.toString(16)</span><br><span class="line"> return result</span><br><span class="line">&#125;</span><br><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000006&quot;</span><br><span class="line">key =  &quot;00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6&quot;</span><br><span class="line">let newKey =  increaseHexByOne(</span><br><span class="line">  web3.sha3(key + index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress,newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963655965617200000000000000000000000000000000000000000014</span><br><span class="line">ASCII: deviceYear</span><br></pre></td></tr></table></figure><p>若還需要第三個之後的值，繼續將newKey遞增，就能夠取到。</p><h3 id="index-7-uintarray"><a href="#index-7-uintarray" class="headerlink" title="index 7 - uintarray"></a>index 7 - uintarray</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;7&quot;</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line">  0x0000000000000000000000000000000000000000000000000000000000000002</span><br></pre></td></tr></table></figure><p>以上的result表示 array目前有2個值 (8000, 9000)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000007&quot;</span><br><span class="line">let newKey = web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;DEC: &apos; +</span><br><span class="line">  web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000001f40</span><br><span class="line">DEC: 8000</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">newKey = increaseHexByOne(web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;DEC: &apos; +</span><br><span class="line">  web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000002328</span><br><span class="line">DEC: 9000</span><br></pre></td></tr></table></figure><h3 id="index-8-deviceDataArray"><a href="#index-8-deviceDataArray" class="headerlink" title="index 8 - deviceDataArray"></a>index 8 - deviceDataArray</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000008&quot;</span><br><span class="line">let newKey = web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963654272616e64000000000000000000000000000000000000000016</span><br><span class="line">ASCII: deviceBrand</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000008&quot;</span><br><span class="line">let newKey = increaseHexByOne(web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line">web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963655965617200000000000000000000000000000000000000000014</span><br><span class="line">ASCII: deviceYear</span><br></pre></td></tr></table></figure><p>繼續增加index的值(+1), result:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000008&quot;</span><br><span class="line">let newKey = increaseHexByTwo(web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line">web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x776561724c6576656c0000000000000000000000000000000000000000000012</span><br><span class="line">ASCII: wearLevel</span><br></pre></td></tr></table></figure><p>若加3之後，result會顯示第二組(dev2) 存進array的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result:</span><br><span class="line">0x6465766963654272616e64320000000000000000000000000000000000000018</span><br><span class="line"></span><br><span class="line">ASCII: deviceBrand2</span><br></pre></td></tr></table></figure><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>How to read Ethereum contract storage - Darius</p><p><a href="https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925" target="_blank" rel="noopener">https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925</a></p>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethereum </tag>
            
            <tag> Solidity </tag>
            
            <tag> Smart Contract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年的想法與規劃</title>
      <link href="/2019/02/05/2019%E5%B9%B4%E7%9A%84%E6%83%B3%E6%B3%95%E8%88%87%E8%A6%8F%E5%8A%83/"/>
      <url>/2019/02/05/2019%E5%B9%B4%E7%9A%84%E6%83%B3%E6%B3%95%E8%88%87%E8%A6%8F%E5%8A%83/</url>
      
        <content type="html"><![CDATA[<p>剛好在農曆新年第一天，為自己的Blog換的新的Skin，<br>同時也想勉勵自己重拾寫部落格的手感。</p><a id="more"></a><p>由於自己想往區塊鏈或是雲端後端工程師發展，<br>所以在2019年希望自己能夠再次複習網路以及作業系統等知識，</p><p>以上，希望2019年能夠順利完成論文，<br>且能夠找到一份好工作，並且持續精進自己的技術。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊測試網連接：Connect to the Rospen Network</title>
      <link href="/2018/05/13/rospen/"/>
      <url>/2018/05/13/rospen/</url>
      
        <content type="html"><![CDATA[<p>Enviroment: MacOS</p><p>Assume reader has basic understanding of geth and ethereum.</p><a id="more"></a><h2 id="Create-a-Ethereum-Wallet"><a href="#Create-a-Ethereum-Wallet" class="headerlink" title="Create a Ethereum Wallet"></a>Create a Ethereum Wallet</h2><p>We can via <code>myetherwallet</code> to create a wallet.<br><a href="https://www.myetherwallet.com/#generate-wallet" target="_blank" rel="noopener">https://www.myetherwallet.com/#generate-wallet</a></p><p>Record your privakey, pubkey:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private key: a406da76baa7c741ad28bfe87cef2133950d6bb6bcaaf0b1742d93c3bea56bab</span><br><span class="line">public key:  0x2C58e0338435FE91FD2209105EcADebE8aaFCebB</span><br></pre></td></tr></table></figure></p><p>Because we are going to connect the testnet <code>Rospen</code>, we should do some stuff…</p><ul><li>Get a ether from faucet: </li></ul><p>For simplicity, we just ask someone to send some ether on testnet to us. Please attach your account address to get some ether.</p><p><a href="https://l.facebook.com/l.php?u=http%3A%2F%2Ffaucet.ropsten.be%3A3001%2F&amp;h=ATPjPzMFxxXmP_Egwq9V35ye_LjGOM4A_vzMkbQOdLCN8FYVRgfurVVTwrcuUzqNCMUiXF2C8sUqt241q8nmTJO6hCnY7WhpkV6iUVWxsIqjlALAeEVFv_kH5Q" target="_blank" rel="noopener">https://l.facebook.com/l.php?u=http%3A%2F%2Ffaucet.ropsten.be%3A3001%2F&amp;h=ATPjPzMFxxXmP_Egwq9V35ye_LjGOM4A_vzMkbQOdLCN8FYVRgfurVVTwrcuUzqNCMUiXF2C8sUqt241q8nmTJO6hCnY7WhpkV6iUVWxsIqjlALAeEVFv_kH5Q</a></p><ul><li>Check Tx from <code>Rospen</code> network<br><a href="https://ropsten.etherscan.io/address/0x6508a973F080A9042a29d13925d9DB006f8c2989" target="_blank" rel="noopener">https://ropsten.etherscan.io/address/0x6508a973F080A9042a29d13925d9DB006f8c2989</a></li></ul><p>In serch bar, enter your account address to see whether if the ether is sending to your account or not.</p><h2 id="Start-to-build-a-node-and-synchronize-the-Rospen-network"><a href="#Start-to-build-a-node-and-synchronize-the-Rospen-network" class="headerlink" title="Start to build a node and synchronize the Rospen network."></a>Start to build a node and synchronize the <code>Rospen</code> network.</h2><p><warning> Notice that your geth version should be the latest so that you can sucessfully sync the network.</warning></p><p><code>Current version : Version: 1.8.7-stable</code></p><h3 id="Before-sync-the-node-Put-your-keystore-file-in-the-testnet-document"><a href="#Before-sync-the-node-Put-your-keystore-file-in-the-testnet-document" class="headerlink" title="Before sync the node , Put your keystore file in the testnet document."></a>Before sync the node , Put your keystore file in the testnet document.</h3><p>When you download your keystore file.<br>For example, the filename will be:<br><code>UTC--2018-05-13T04-05-37.569Z--2c58e0338435fe91fd2209105ecadebe8aafcebb</code><br>Copy this file into your testnet key store:<br><code>/User/Library/Ethereum/testnet/keystore</code></p><h3 id="Sync-to-the-Rospen-network"><a href="#Sync-to-the-Rospen-network" class="headerlink" title="Sync to the Rospen network"></a>Sync to the Rospen network</h3><p><a href="https://github.com/ethereum/ropsten" target="_blank" rel="noopener">https://github.com/ethereum/ropsten</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --unlock &lt;account&gt; --testnet --syncmode &quot;full&quot; &quot;enode://20c9ad97c081d63397d7b685a412227a40e23c8bdc6688c6f37e97cfbc22d2b4d1db1510d8f61e6a8866ad7f0e17c02b14182d37ea7c3c8b9c2683aeb6b733a1@52.169.14.227:30303,enode://6ce05930c72abc632c58e2e4324f7c7ea478cec0ed4fa2528982cf34483094e9cbc9216e7aa349691242576d552a2a56aaeae426c5303ded677ce455ba1acd9d@13.84.180.240:30303&quot;</span><br></pre></td></tr></table></figure><p>Threre are some flags:</p><ul><li>–unlock <account>: use password to unlock the account.</account></li><li>–testnet: connect to the rospen network.</li><li>–syncmode “full”:  in order to get our balances, we should synchronize whole blocks.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --testnet --fast --bootnodes &quot;enode://20c9ad97c081d63397d7b685a412227a40e23c8bdc6688c6f37e97cfbc22d2b4d1db1510d8f61e6a8866ad7f0e17c02b14182d37ea7c3c8b9c2683aeb6b733a1@52.169.14.227:30303,enode://6ce05930c72abc632c58e2e4324f7c7ea478cec0ed4fa2528982cf34483094e9cbc9216e7aa349691242576d552a2a56aaeae426c5303ded677ce455ba1acd9d@13.84.180.240:30303&quot;</span><br></pre></td></tr></table></figure><p>If we already sync the entire network, we can just use<br><code>--fast --bootnodes</code> to connect testnet…</p><h3 id="Attach-your-geth"><a href="#Attach-your-geth" class="headerlink" title="Attach your geth"></a>Attach your geth</h3><p>On MacOS (for testnet):</p><p><code>geth attach ipc:/Users/&lt;username&gt;/Library/Ethereum/testnet/geth.ipc</code></p><p>Then, in the console do <code>eth.syncing</code></p><p>you will see those stuff:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; eth.syncing</span><br><span class="line">&#123;</span><br><span class="line">  currentBlock: 542220,</span><br><span class="line">  highestBlock: 3224277,</span><br><span class="line">  knownStates: 0,</span><br><span class="line">  pulledStates: 0,</span><br><span class="line">  startingBlock: 31397</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That means you are sucessfully connecting the testnet.<br>After finish syncing process, you can see there is some ether in your accounts </p><h3 id="Problem-for-connecting-the-ropsten-network"><a href="#Problem-for-connecting-the-ropsten-network" class="headerlink" title="Problem for connecting the ropsten network"></a>Problem for connecting the ropsten network</h3><p><a href="https://stackoverflow.com/questions/49195614/connection-failed-to-ethereum-ropsten-testnet-network" target="_blank" rel="noopener">https://stackoverflow.com/questions/49195614/connection-failed-to-ethereum-ropsten-testnet-network</a></p><h3 id="Deploy-to-rospen-network-toturial"><a href="#Deploy-to-rospen-network-toturial" class="headerlink" title="Deploy to rospen network toturial:"></a>Deploy to rospen network toturial:</h3><p><a href="https://michalzalecki.com/deploying-smart-contracts-with-truffle/" target="_blank" rel="noopener">https://michalzalecki.com/deploying-smart-contracts-with-truffle/</a></p>]]></content>
      
      
      <categories>
          
          <category> Ethereum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Ethereum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERC Token介紹：ERC20 &amp; ERC721</title>
      <link href="/2018/03/25/erctoken/"/>
      <url>/2018/03/25/erctoken/</url>
      
        <content type="html"><![CDATA[<p>即利用當今火紅的以太坊上的智能合約，實作出代幣功能。<br>可擁有與虛擬貨幣作為價值傳遞功能。</p><a id="more"></a><h3 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h3><ul><li>不用自己架設公有鏈，就可以擁有自己發行的代幣</li><li>以既定匯率，可以直接與以太幣進行交換。</li></ul><h3 id="為何需要ERC標準合約？"><a href="#為何需要ERC標準合約？" class="headerlink" title="為何需要ERC標準合約？"></a>為何需要ERC標準合約？</h3><p>由於代幣是建立在以太坊上的智能合約，故其代幣也只是存在智能合約上的某筆紀錄。<br>故透過一些狀態改變和轉移，故ERC合約可以明確定義某個以太坊地址上的某個代幣餘額，並可以對其進行操作，而操作的規範就定義在ERC上。</p><p>故一個代幣要擁有合理的發行機制，就得符合現在所擁有的ERC20以及ERC721之類的標準。</p><h3 id="ERC代幣有自己的錢包嗎？？"><a href="#ERC代幣有自己的錢包嗎？？" class="headerlink" title="ERC代幣有自己的錢包嗎？？"></a>ERC代幣有自己的錢包嗎？？</h3><p>由於是透過以太坊智能合約控制的，故只要透過以太坊錢包(地址)就可以了。</p><h2 id="ERC20-介紹"><a href="#ERC20-介紹" class="headerlink" title="ERC20 介紹"></a>ERC20 介紹</h2><h3 id="記載ERC20規則-官方文件"><a href="#記載ERC20規則-官方文件" class="headerlink" title="記載ERC20規則 官方文件"></a>記載ERC20規則 官方文件</h3><p><a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" target="_blank" rel="noopener">https://theethereum.wiki/w/index.php/ERC20_Token_Standard</a></p><h3 id="ERC20-Token-Standard-Interface"><a href="#ERC20-Token-Standard-Interface" class="headerlink" title="ERC20 Token Standard Interface"></a>ERC20 Token Standard Interface</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface ERC20 &#123; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">totalSupply</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint</span>); </span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">balanceOf</span>(<span class="params">address tokenOwner</span>) <span class="title">public</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint balance</span>); |</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">allowance</span>(<span class="params">address tokenOwner, address spender</span>) <span class="title">public</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint remaining</span>); |</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">transfer</span>(<span class="params">address to, uint tokens</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool success</span>); |</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">approve</span>(<span class="params">address spender, uint tokens</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool success</span>); |</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">transferFrom</span>(<span class="params">address from, address to, uint tokens</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool success</span>); |</span></span><br><span class="line"><span class="function">    <span class="title">event</span> <span class="title">Transfer</span>(<span class="params">address indexed from, address indexed to, uint tokens</span>); |</span></span><br><span class="line"><span class="function">    <span class="title">event</span> <span class="title">Approval</span>(<span class="params">address indexed tokenOwner, address indexed spender, uint tokens</span>); </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>以上的Interface定義了六個Function，有Input及Output格式。<br>以及兩個Event，僅有Input。</p><p>其中Function為可以操縱智能合約狀態的動作，會需要消耗Gas，而可以看到有些Function後面有 <code>constant</code>關鍵字，表示僅做唯獨，不會更改到智能合約上的State，主要是回傳的State資訊，不會消耗到Gas。</p><p>而Event為紀錄重大事件的發生，例如在鏈上進行Token的轉移。</p><h3 id="設定ERC-Token資訊"><a href="#設定ERC-Token資訊" class="headerlink" title="設定ERC Token資訊"></a>設定ERC Token資訊</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string public constant name = <span class="string">"Token Name"</span>; </span><br><span class="line">string public constant symbol = <span class="string">"TKN"</span>; </span><br><span class="line">uint8 public constant decimals = <span class="number">18</span>; <span class="comment">// 18 is the most common number of decimal places</span></span><br></pre></td></tr></table></figure><p>ERC20 需要設定此 Token 的三個資訊: name、symbol、decimals</p><ul><li>name 是 Token 的名字。</li><li>symbol 則是此 Token 會使用的代稱，像是 Binance Token 的 symbol 就是 BNB，而此 symbol 也會出現在 <a href="https://etherscan.io/" target="_blank" rel="noopener">Etherscan</a>上面</li><li>decimals 是用來設定此 Token 最小會有幾個位數，通常會設定成 18，意即最多到達小數點後 18 位數，這樣的設定跟 Ether 本身的設定也是一樣的(1 ether: 10 ^ 18 wei)。</li></ul><blockquote><p>補充說明：在 Solidity 中並沒有浮點數的存在，所有的運算都是整數，因此平常我們所說的 1 Ether，事實上在 Solidity 程式中是以wei的單位(1 ether = 10¹⁸)來撰寫。</p></blockquote><h3 id="ERC20-詳述"><a href="#ERC20-詳述" class="headerlink" title="ERC20 詳述"></a>ERC20 詳述</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">contract TokenContractFragment &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// Balances for each account</span></span><br><span class="line">     mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint256) balances;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// Owner of account approves the transfer of an amount to another account</span></span><br><span class="line">     mapping(<span class="function"><span class="params">address</span> =&gt;</span> mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint256)) allowed;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// Get the token balance for account \`tokenOwner\`</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address tokenOwner</span>) <span class="title">public</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint balance</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> balances\[tokenOwner\];</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// Transfer the balance from owner's account to another account</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address to, uint tokens</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">         balances\[msg.sender\] = balances\[msg.sender\].sub(tokens);</span><br><span class="line">         balances\[to\] = balances\[to\].add(tokens);</span><br><span class="line">         Transfer(msg.sender, to, tokens);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// Send \`tokens\` amount of tokens from address \`from\` to address \`to\`</span></span><br><span class="line">     <span class="comment">// The transferFrom method is used for a withdraw workflow, allowing contracts to send</span></span><br><span class="line">     <span class="comment">// tokens on your behalf, for example to "deposit" to a contract address and/or to charge</span></span><br><span class="line">     <span class="comment">// fees in sub-currencies; the command should fail unless the _from account has</span></span><br><span class="line">     <span class="comment">// deliberately authorized the sender of the message via some mechanism; we propose</span></span><br><span class="line">     <span class="comment">// these standardized APIs for approval:</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">transferFrom</span>(<span class="params">address from, address to, uint tokens</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">         balances\[<span class="keyword">from</span>\] = balances\[<span class="keyword">from</span>\].sub(tokens);</span><br><span class="line">         allowed\[<span class="keyword">from</span>\]\[msg.sender\] = allowed\[<span class="keyword">from</span>\]\[msg.sender\].sub(tokens);</span><br><span class="line">         balances\[to\] = balances\[to\].add(tokens);</span><br><span class="line">         Transfer(<span class="keyword">from</span>, to, tokens);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// Allow \`spender\` to withdraw from your account, multiple times, up to the \`tokens\` amount.</span></span><br><span class="line">     <span class="comment">// If this function is called again it overwrites the current allowance with _value.</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address spender, uint tokens</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">         allowed\[msg.sender\]\[spender\] = tokens;</span><br><span class="line">         Approval(msg.sender, spender, tokens);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><h4 id="Token-Balance"><a href="#Token-Balance" class="headerlink" title="Token Balance"></a>Token Balance</h4><p>我們假設這個智能合約目前有兩個地址擁有該Token<br>balances[‘0x123456’] = 100<br>balances[‘0x654321’] = 200</p><p>則 Function balanceOf 則會回傳以下資訊:<br>tokenContract.balanceOf(‘0x123456’) will return 100<br>tokenContract.balanceOf(‘0x654321’) will return 200</p><h4 id="Transfer-Token-Balance"><a href="#Transfer-Token-Balance" class="headerlink" title="Transfer Token Balance"></a>Transfer Token Balance</h4><p>如果 0x123456想要轉移 10 tokens 給 0x654321，則呼叫<br>tokenContract.transfer(‘0x654321’, 10)</p><p>將得到下列結果<br>balances[‘0x123456’] = 90<br>balances[‘0x654321’] = 210</p><h4 id="Approve-And-TransferFrom-Token-Balance"><a href="#Approve-And-TransferFrom-Token-Balance" class="headerlink" title="Approve And TransferFrom Token Balance"></a>Approve And TransferFrom Token Balance</h4><p>如果 0x123456 允許 0x654321 擁有轉移 30 tokens 的權利，則呼叫<br>tokenContract.approve(‘0x654321’, 30)</p><p>將得到下列結果<br>tokenContract.allowed[‘0x123456’][‘0x654321’] = 30</p><p>如果此時’0x654321’ 想要轉移 ‘0x123456’ 的 20 tokens 給自己，則呼叫<br>‘tokenContract.transferFrom(‘0x123456’, ‘0x654321’, 20)</p><p>將得到下列結果<br>tokenContract.balances[‘0x123456’] = 70<br>tokenContract.balances[‘0x654321’] = 230<br>tokenContract.allowed[‘0x123456’][‘0x654321’] = 10</p><h2 id="ERC721-介紹"><a href="#ERC721-介紹" class="headerlink" title="ERC721 介紹"></a>ERC721 介紹</h2><p>ERC-721 是用来定義 Non-fungible token (不可替代的代幣)。<br>每個代幣是唯一的(unique)，具不可分割性，不像ERC20 每個token都相同。</p><p>具體應用: <a href="https://www.cryptokitties.co/" target="_blank" rel="noopener">以太貓(cryptokitties)</a><br>每個以太貓，都是一個ERC721代幣。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface ERC721 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">supportsInterface</span>(<span class="params">bytes4 _interfaceID</span>) <span class="title">external</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">bool</span>);</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">ownerOf</span>(<span class="params">uint256 \_deedId</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address \_owner</span>);</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">countOfDeeds</span>(<span class="params"></span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _count</span>);</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">countOfDeedsByOwner</span>(<span class="params">address \_owner</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 \_count</span>);</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">deedOfOwnerByIndex</span>(<span class="params">address \_owner, uint256 \_index</span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256 _deedId</span>);</span></span><br><span class="line"><span class="function">    <span class="title">event</span> <span class="title">Transfer</span>(<span class="params">address indexed from, address indexed to, uint256 indexed deedId</span>);</span></span><br><span class="line"><span class="function">    <span class="title">event</span> <span class="title">Approval</span>(<span class="params">address indexed owner, address indexed approved, uint256 indexed deedId</span>);</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">approve</span>(<span class="params">address \_to, uint256 \_deedId</span>) <span class="title">external</span> <span class="title">payable</span>;</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">takeOwnership</span>(<span class="params">uint256 _deedId</span>) <span class="title">external</span> <span class="title">payable</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><p>ERC20 Token Standard<br><a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" target="_blank" rel="noopener">https://theethereum.wiki/w/index.php/ERC20_Token_Standard</a></p></li><li><p>请问以太坊里的ERC-721和ERC-20是什么？<br><a href="http://www.blockchainbrother.com/question/510" target="_blank" rel="noopener">http://www.blockchainbrother.com/question/510</a></p></li><li><p>What has ERC-721  better than ERC-20?<br><a href="https://medium.com/@PatrickGohBS/ethereum-erc-721-vs-erc-20-4bff8c147fdf" target="_blank" rel="noopener">https://medium.com/@PatrickGohBS/ethereum-erc-721-vs-erc-20-4bff8c147fdf</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethereum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分散式系統共識算法筆記：Paxos和Raft</title>
      <link href="/2018/03/11/consensusAlgo/"/>
      <url>/2018/03/11/consensusAlgo/</url>
      
        <content type="html"><![CDATA[<h2 id="Paxos介紹"><a href="#Paxos介紹" class="headerlink" title="Paxos介紹"></a>Paxos介紹</h2><p>分布式系統中，只有出現故障節點(fault node),但不存在惡意節點(corrupt node)下達成共識的問題。</p><a id="more"></a><h3 id="問題起源"><a href="#問題起源" class="headerlink" title="問題起源"></a>問題起源</h3><p>故事背景為古希臘的Paxon島上有諸位法官要對某一件法案進行裁決並如何達成共識的結果。</p><p>過程中法官會透過傳訊關傳遞訊息，但法官可能中途離席，而服務員可能偷懶睡覺。</p><p>故Paxos算法基於<span style="color:red">“兩階段提交”</span>來確保法官們可以得到共識結果的一致性。</p><h3 id="Paxos特性"><a href="#Paxos特性" class="headerlink" title="Paxos特性"></a>Paxos特性</h3><p>Paxos將參與節點中分為三類：</p><ul><li>Proposer(客戶端): 提出一個案子，等待大家批准並得到答案。</li><li>Acceptor(服務端): 接受提案，並進行投票。</li><li>Learner(客戶端or服務端): 被告知提案結果，並將自己的狀態與結果更新。</li></ul><p>過程中必須滿足分散式系統共識所必須的兩特性：</p><ol><li>Safty：保證決議結果是對的，無異議，並不會出現錯誤情況。</li><li>Liveness：保證在”有限”時間內完成共識結果。</li></ol><h3 id="Paxos過程"><a href="#Paxos過程" class="headerlink" title="Paxos過程"></a>Paxos過程</h3><ol><li>由Proposer提出提案，爭取Acceptors的支持。</li><li>超過一半的Acceptors支持，則發送該提案結果給所有人進行確認。</li></ol><h3 id="兩階段提繳"><a href="#兩階段提繳" class="headerlink" title="兩階段提繳"></a>兩階段提繳</h3><h4 id="Step-1-Prepare階段"><a href="#Step-1-Prepare階段" class="headerlink" title="Step 1: Prepare階段"></a>Step 1: Prepare階段</h4><ul><li>Proposer發送自己的計畫給多個Acceptors.</li><li>Acceptor根據該計畫的編號，若是最新的編號則保留，反之則退回。</li></ul><h4 id="Step-2-Commit階段"><a href="#Step-2-Commit階段" class="headerlink" title="Step 2: Commit階段"></a>Step 2: Commit階段</h4><ul><li>Proposer收到Accpetor的確認回覆。若收到的回覆中不帶有新的提案請求，表示鎖定成功。</li><li>若沒有收到超過1/2個Accpetor的回覆。</li></ul><h4 id="特殊情況"><a href="#特殊情況" class="headerlink" title="特殊情況"></a>特殊情況</h4><ul><li>若Proposer在提案過程中發生故障，可以透過超時機制票選下一位Proposer。</li><li>Paxos算法保證在正常節點有 1/2個以上時，可滿足共識的Safety和Liveness.</li></ul><h2 id="Raft介紹"><a href="#Raft介紹" class="headerlink" title="Raft介紹"></a>Raft介紹</h2><p>為Paxos的簡化版本。</p><h3 id="參與者"><a href="#參與者" class="headerlink" title="參與者"></a>參與者</h3><p>包括三種角色： 1.Leader 2.Candidate 3.Follower</p><h3 id="共識流程"><a href="#共識流程" class="headerlink" title="共識流程"></a>共識流程</h3><ul><li>Leader選舉：每個Candidate在一定時間內會提出選舉方案，而選舉結果的那位成為Leader.</li><li>同步每個Replication的Log: Leader會找到系統中的Log檔案上最新的紀錄，並要求所有Follower根據該最新紀錄同步到他們自己的Log檔案上。</li></ul><p>log檔可能為系統上發生的動作紀錄。</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/26868753548/in/dateposted-public/" title="Raft_consense" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4774/26868753548_176bc63750_o.png" width="2240" alt="Raft_consense"></a></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>Paxos和Raft為目前分散式系統的帶來不錯的共識結果，其他共識演算法像是PBFT (practical byzantine fault tolerant protocal)以及目前由Amis團隊所於etherum上所實現的BFT算法- Istanbul BFT，都算是本次筆記提到的再進階的共識算法，有興趣的讀者可以在到以下連結去深入瞭解。</p><p><a href="https://www.slideshare.net/YuTeLin1/istanbul-bft" target="_blank" rel="noopener">Istanbul BFT - AMIS</a></p><p><a href="https://www.slideshare.net/WilliamLin23/pbft-90300607" target="_blank" rel="noopener">PBFT Introduction</a></p>]]></content>
      
      
      <categories>
          
          <category> Consensus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Consensus </tag>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript筆記:Closure(閉包)概念</title>
      <link href="/2017/09/13/javascript-closure/"/>
      <url>/2017/09/13/javascript-closure/</url>
      
        <content type="html"><![CDATA[<p>閉包（closure): 為一個function包在某一個函式內，用return來取得內部function的回傳值</p><p>Closure are commonly used to give objects data privacy.</p><a id="more"></a><h2 id="為什麼要有閉包？？"><a href="#為什麼要有閉包？？" class="headerlink" title="為什麼要有閉包？？"></a>為什麼要有閉包？？</h2><p>因為有以下問題<br>ㄧ、Counter dilemma<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line"></span><br><span class="line"><span class="comment">// the counter is now equal to 3</span></span><br></pre></td></tr></table></figure></p><p>counter被改變成3、不過也可以不用透過add()直接更改counter的值。<br>那這樣會造成變數污染衝突。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></table></figure><p>counter被宣告在add()內，為local variable，不會被其他function或global改寫。<br>但會有重複呼叫add()後無法使counter值做累加的動作。<br><span style="color:red">(因為var counter使變數重複被定義)。</span></p><p>二、解決方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;counter += <span class="number">1</span>;&#125;</span><br><span class="line">    plus();    </span><br><span class="line">    <span class="keyword">return</span> counter; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過內部plus函式才能更改counter值、解決counter dilemma問題，不過還會遇到var counter重複宣告的問題，這時候就得用閉包的技巧！如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line">add();</span><br><span class="line"></span><br><span class="line"><span class="comment">// the counter is now 3</span></span><br></pre></td></tr></table></figure><p>將add變數宣告成 self-invoking function(僅執行內部一次 var counter不會在add()第二次被呼叫時再次被宣告)，然後回傳function expression，如此一來add變數就變成 add() function了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) ***</span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;***&#125;</span><br></pre></td></tr></table></figure><p>就被包在add()函式內，直接呼叫add() 就只會跑上面*的部分。</p><p>以上做法即為closure閉包，使得變數不會被污染和衝突。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript筆記:使用prototype chain(原型鍊)來達成繼承效果</title>
      <link href="/2017/09/13/javascript-prototypechain/"/>
      <url>/2017/09/13/javascript-prototypechain/</url>
      
        <content type="html"><![CDATA[<p>先知道個keyword：</p><ul><li><code>__proto__</code>： javascript自己定義的變數，用來實現inheritance效果，有點類似像link list <code>node</code>的概念，連結其他的 prototype</li></ul><a id="more"></a><p>javascript記憶體管理的配置：</p><ul><li><code>class</code>儲存在 global底下</li><li>class的<code>prototype</code>放置在heap （即class底下的各種variable和function)</li><li><code>instance</code>（ex var b = new B()) 的b儲存在 callstack(記憶體RAM裡面)</li></ul><p><code>slogan</code>:在自己的scope裡面找不到要的函式或變數就跟自己的<code>__proto__</code>要！</p><p>繼承範例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//constructor</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.brand = <span class="string">"default"</span>;</span><br><span class="line">  <span class="keyword">var</span> _wheels</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// private method</span></span><br><span class="line">  <span class="keyword">var</span> initialWheels = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    _wheels = <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.getNumberofWheel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.brand;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Benz = <span class="function"><span class="keyword">function</span>(<span class="params">brandName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//constructor</span></span><br><span class="line">  Car.apply(<span class="keyword">this</span>, argument)  <span class="comment">//等於呼叫 super(args);</span></span><br><span class="line">  <span class="comment">//argument為 var Benz = function(args...); 的 args們 = [brandName, wheel]</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 這一行就是把 Benz.prototype.__proto__ = Car.prototype接起來;</span></span><br><span class="line">  <span class="comment">// 即Benz class inheritance Car</span></span><br><span class="line">  <span class="comment">// 疑問：上面敘述需和Ben確認一下 那這樣為什麼下面又得自己做Benz.prototype = Object.create(Car.prototype) ??</span></span><br><span class="line">  <span class="comment">// 解答：若沒有做Car.apply (即super()) 動作，這樣子類別會無法將接受的arguments傳遞給從parent複製過來的函式</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.brand = brandName; <span class="comment">//初始化車品牌的名稱</span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// javascript ES5得自己綁定繼承關係，用__proto__這個keyword</span></span><br><span class="line"><span class="comment">// 建立父類別實體 設定繼承關係:</span></span><br><span class="line"></span><br><span class="line">Benz.prototype = <span class="built_in">Object</span>.create(Car.prototype)  </span><br><span class="line"><span class="comment">//上面即是做了Benz.prototype.__proto__ = Car.prototype</span></span><br><span class="line"><span class="comment">//使Benz class繼承Car class(Benz extends Car)</span></span><br><span class="line"></span><br><span class="line">Benz.prototype.constructor = Benz</span><br><span class="line"><span class="comment">//Benz的constructor指向Benz class</span></span><br><span class="line"><span class="comment">//將Benz的constructor綁定到自己身上，</span></span><br><span class="line"><span class="comment">//才能在Benz new出一個物件時作初始化動作（即呼叫Benz =function函式&#123;&#125;) </span></span><br><span class="line"><span class="comment">//var benz = new Benz("Benz") 初始化該車子名稱："Benz"; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> benz = <span class="keyword">new</span> Benz() </span><br><span class="line"><span class="comment">// benz.__proto__ = Benz.prototype</span></span><br><span class="line"><span class="comment">// 宣告一個物件叫 benz</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(benz.numberOfWheels()) </span><br><span class="line"><span class="comment">// 會先搜尋benz.prototype有沒有numberOfWheels()方法</span></span><br><span class="line"><span class="comment">// 沒有==&gt;那就找benz.__proto__ = Benz.prototype;</span></span><br><span class="line"><span class="comment">// Benz.prototype就會找到 numberOfWheels()的方法！</span></span><br></pre></td></tr></table></figure></p><p> benz.numberOfWheels() 有此方法<br> 每次呼叫Car.apply(this, arguments)時”複製”到子類別的物件上<br>初始化物件時較慢，在run time想要動態改變numberOfWheels()的實作時<br> 無法影響已經創建的子類別或父類別instances.</p><p> 以下為初始化較有效率的寫法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// constructor</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// public property</span></span><br><span class="line">  <span class="keyword">this</span>.wheels = <span class="number">4</span></span><br><span class="line">  <span class="comment">// pulic property</span></span><br><span class="line">  <span class="keyword">this</span>.brand = <span class="string">'default'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這種寫法不支援存取private property</span></span><br><span class="line"><span class="comment">// 因為每個物件都可以直接存取掛在parent.prototype上的property</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但可以在run time修改此Car.prototype.numberOfWheels()的實作</span></span><br><span class="line"><span class="comment">// 就可以透過prototype chain更改所有相關的instance功能 因為instance共用prototype chain上的方法</span></span><br><span class="line">Car.prototype.numberOfWheels = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.wheels</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Benz = <span class="function"><span class="keyword">function</span> (<span class="params">brandName</span>) </span>&#123;</span><br><span class="line">  Car.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) <span class="comment">// 複製繼承父類別public property</span></span><br><span class="line">  <span class="keyword">this</span>.brand = <span class="string">'brandName'</span>;</span><br><span class="line">  <span class="keyword">this</span>.getBrand = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.brand</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>numberOfWheels該方法已經被掛在 Car.prototype上，<br>所以並不像Car.apply上直接複製一份給子class們，而是子class去共用Car.prototype.numberOfWheels 這個方法。</p><ul><li>優點：節省初始化的時間和提升效率</li><li>缺點：這種寫法不支援存取private property</li></ul><h2 id="javascript-類別、prototype以及reference中的proto所指向的關係示意圖："><a href="#javascript-類別、prototype以及reference中的proto所指向的關係示意圖：" class="headerlink" title="javascript 類別、prototype以及reference中的proto所指向的關係示意圖："></a>javascript 類別、prototype以及reference中的<strong>proto</strong>所指向的關係示意圖：</h2><p>圖片作者： Ben大大<br><img src="https://farm5.staticflickr.com/4426/36361682884_afa196bbd2_o.jpg" width="4208" alt="javascript_prototype_chain"></p><p>假設 B class extend A;<br>let b = new B(); // <code>b.__proto__ = B.prototype</code><br>let a = new A(); // <code>a.__proto__ = A.prototype</code><br>let o = new Object(); <code>o.__proto__ = Object.prototype</code><br>//對應到圖片左邊的b、a、o.</p><p>(先從圖片最左上角開始看<br>那 var b = new B();<br>b想要使用繼承A的 getValue() 函式，<br>那麼就得先找自己的 b.prototype 沒有的話 找 <code>b.__proto__</code> = <code>B.prototype</code></p><p>若<code>b.__proto__</code>也沒有的話(即B.prototype)也沒有，<br>那麼找 <code>B.prototype.__proto__</code> == <code>A.prototype</code><br>在<code>A.prototype</code>就會找到getValue()的函式！</p><p>如果又沒找到，那就最後找<code>A.prototype.__proto__</code> == <code>Object.prototype</code><br>若沒有那就找 <code>Object.prototype.__proto__</code> == null 即找無該函式，compile告知發生錯誤);</p><h2 id="Prototype-inheritance-的好處"><a href="#Prototype-inheritance-的好處" class="headerlink" title="Prototype inheritance 的好處"></a>Prototype inheritance 的好處</h2><ul><li>Suitable in loosely typed environments, no need to define explicit types.</li><li>Makes it incredibly easy to implement <code>singleton pattern</code> (compare JavaScript and Java in this regard, and you’ll know what I am talking about).</li></ul><p>(why? 因為prototype inheritance提供???? 請看補充二）</p><ul><li>Provides ways of applying a method of an object in the context of a different object, adding and replacing methods dynamically from an object etc. (things which are not possible in a strongly typed languages).</li></ul><h2 id="Prototype-inheritance的壞處"><a href="#Prototype-inheritance的壞處" class="headerlink" title="Prototype inheritance的壞處"></a>Prototype inheritance的壞處</h2><ul><li>No easy way of implementing private variables. Its possible to implement private vars using Crockford’s wizardry using <code>closures</code>, but its definitely not as trivial as using private variables in say Java or C#.<br>(因為<code>__prpto__</code>會指向prototype的所有成員！故無法像class inheritance那樣避免繼承到有<code>private</code>關鍵字的變數，故得用closure手法來避免繼承到_private變數)</li></ul><p>Reference:<br><a href="https://stackoverflow.com/questions/816071/prototype-based-vs-class-based-inheritance" target="_blank" rel="noopener">prototype based vs. class based inheritance</a></p><h3 id="補充ㄧ：Function-prototype-apply"><a href="#補充ㄧ：Function-prototype-apply" class="headerlink" title="補充ㄧ：Function.prototype.apply"></a>補充ㄧ：Function.prototype.apply</h3><p><code>fun.apply(thisArg, [argsArray])</code><br>// 將一連串參數用array包起來：[argsArray]，丟給fun函式處理</p><p>範例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function theFunction(name, profession) &#123;</span><br><span class="line">    console.log(&quot;My name is &quot; + name + &quot; and I am a &quot; + profession + &quot;.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// call function</span><br><span class="line"></span><br><span class="line">function callFn(name, profession) &#123;</span><br><span class="line">  theFunction.apply(this, [name, profession]);</span><br><span class="line">&#125;</span><br><span class="line">theFunction(&apos;小will&apos;, &apos;工程師&apos;);</span><br><span class="line">callFn(&apos;大Will&apos;, &apos;小廢廢&apos;);</span><br><span class="line"></span><br><span class="line">// 輸出:</span><br><span class="line">// My name is 小will and I am a 工程師.</span><br><span class="line">// My name is 大Will and I am a 小廢廢.</span><br></pre></td></tr></table></figure></p><h3 id="補充二：用Closure實作Singleton模式"><a href="#補充二：用Closure實作Singleton模式" class="headerlink" title="補充二：用Closure實作Singleton模式"></a>補充二：用Closure實作Singleton模式</h3><p>閉包觀念連結：==&gt; <a href="https://a10000005588.github.io/2017/09/13/javascript-closure/">閉包是什麼？？</a></p><p>先看範例程式碼<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UniverseN;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    UniverseN = <span class="function"><span class="keyword">function</span> <span class="title">UniverseN</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance)&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        instance = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.start_time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.bang = <span class="string">'Big'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uni9 = <span class="keyword">new</span> UniverseN();</span><br><span class="line"><span class="keyword">var</span> uni10 = <span class="keyword">new</span> UniverseN();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(uni9 === uni10); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">UniverseN.prototype.inEverything = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>可以看出若利用了Prototype inheritance的特性，，將IIFE函式掛在UniverseN.prototype.IIFE上，使得之後宣告的物件不會在複製一份IIFE出來出來，讓IIFE只跑一次！<br>這樣就可以達成一個class (UniverseN) 只能宣告一次的物件 (uni9)。 如果在宣告出 uni10，他們都還是指向同一樣的instance(<code>uni9.__proto__</code> == <code>uni10__proto__</code>)</p><p>Reference:<br><a href="http://cythilya.blogspot.tw/2015/06/javascript-design-pattern-singleton.html" target="_blank" rel="noopener">JavaScript Design Pattern - Singleton 單體模式</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用OpenZeppelin搭配Truffle來打造智能合約</title>
      <link href="/2017/09/13/openzepplin/"/>
      <url>/2017/09/13/openzepplin/</url>
      
        <content type="html"><![CDATA[<p>本篇是參考truffle官網所做的筆記：<a href="http://truffleframework.com/tutorials/robust-smart-contracts-with-openzeppelin" target="_blank" rel="noopener">ROBUST SMART CONTRACTS WITH OPENZEPPELIN</a></p><a id="more"></a><h2 id="OpenZeppelin介紹"><a href="#OpenZeppelin介紹" class="headerlink" title="OpenZeppelin介紹"></a>OpenZeppelin介紹</h2><p>可以把OpenZeppelin當成強化Solidity資訊安全的Framework，為智能合約附上Ethereum所認可的ERC-20標準，畢竟合約要處理的可是真正的錢！</p><p>ERC-20標準介紹：<a href="http://www.investopedia.com/news/what-erc20-and-what-does-it-mean-ethereum/" target="_blank" rel="noopener">What is ERC-20 and What Does it Mean for Ethereum?</a></p><blockquote><p>簡單來說ERC-20標準<br>允許錢包、交易所和其他智能合約以一種常見的方式對接各種代幣。</p></blockquote><h2 id="使用OpenZeppelin預備知識"><a href="#使用OpenZeppelin預備知識" class="headerlink" title="使用OpenZeppelin預備知識"></a>使用OpenZeppelin預備知識</h2><p>建議先瞭解ethereum以及Smart Contract語言Solidity<br>以及開發Smart Contract的框架 Truffle</p><p>可以參考官網或是我之前所做的筆記</p><ul><li><a href="https://ethereum.org/" target="_blank" rel="noopener">Ethereum官方網站</a>：</li><li><a href="https://a10000005588.github.io/2017/09/12/solidity/">菜鳥William的Solidity學習紀錄</a></li><li><a href="https://a10000005588.github.io/2017/09/07/truffle-petshop/">使用Truffle來練習撰寫認養寵物的智能合約</a></li></ul><h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><p>創立一個資料夾 open_z<br>使用truffle unbox把練習專案給下載到本機上<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd open_z</span><br><span class="line">truffle ubbox tutorialtoken</span><br></pre></td></tr></table></figure></p><p>安裝 zeppelin-solidity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install zeppelin-solidity</span><br></pre></td></tr></table></figure><h2 id="為tutorialtoken專案撰寫-TutorialToken合約"><a href="#為tutorialtoken專案撰寫-TutorialToken合約" class="headerlink" title="為tutorialtoken專案撰寫 TutorialToken合約"></a>為tutorialtoken專案撰寫 TutorialToken合約</h2><p>在 /contracts 目錄底下創建 <code>TutorialToken.sol</code></p><h3 id="TutorialToken-sol"><a href="#TutorialToken-sol" class="headerlink" title="TutorialToken.sol"></a>TutorialToken.sol</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.4</span>;</span><br><span class="line"><span class="comment">// 引入zepplin-solidity的StandardToken.sol 合約</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zeppelin-solidity/contracts/token/StandardToken.sol'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用is 來繼承StandardToken合約</span></span><br><span class="line">contract TutorialToken is StandardToken &#123;</span><br><span class="line"></span><br><span class="line">    string public name = <span class="string">'TutorialToken'</span>;</span><br><span class="line">    <span class="comment">// token name</span></span><br><span class="line">    string public symbol = <span class="string">'TT'</span>;</span><br><span class="line">    uint public decimals = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 合約被創建時所產生的金額總數</span></span><br><span class="line">    uint public INITIAL_SUPPLY = <span class="number">12000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TutorialToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      totalSupply = INITIAL_SUPPLY;</span><br><span class="line">      balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過以上簡短的程式碼就已經創造出符合Ethereum的 ERC-20標準的Token囉！</p><h2 id="編譯-Compile-以及部署-Deploy"><a href="#編譯-Compile-以及部署-Deploy" class="headerlink" title="編譯(Compile)以及部署(Deploy)"></a>編譯(Compile)以及部署(Deploy)</h2><p>在<code>/migrations</code>內，創建<code>2_deploy_contracts.js</code>檔案</p><h3 id="2-deploy-contracts-js"><a href="#2-deploy-contracts-js" class="headerlink" title="2_deploy_contracts.js"></a>2_deploy_contracts.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TutorialToken = artifacts.require(<span class="string">"./TutorialToken.sol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(TutorialToken);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在terminal，先用testrpc啟好自己的測試鍊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testrpc</span><br></pre></td></tr></table></figure><p>then 執行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">truffle comile</span><br><span class="line">truffle migrate</span><br></pre></td></tr></table></figure></p><h2 id="和TutorialToken-Dapp互動"><a href="#和TutorialToken-Dapp互動" class="headerlink" title="和TutorialToken Dapp互動"></a>和TutorialToken Dapp互動</h2><p>我們使用<a href="https://metamask.io/#how-it-works" target="_blank" rel="noopener">metamask</a>和我們的Dapp互動</p><p>並且該專案已經內建 <code>lite-server</code>可運行Dapp</p><p>執行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>看到以下畫面則表示成功運行！<br>(別忘了要先登入metamask，以便前端能夠擷取到testrpc所開啟的錢包資訊)</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/37056160091/in/dateposted-public/" title="螢幕快照 2017-09-13 上午10.20.59" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4416/37056160091_c5c1ff268c_o.png" width="600" alt="螢幕快照 2017-09-13 上午10.20.59"></a></p><p>以及可以看到在metamask上錢包的資訊</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/37198399085/in/dateposted-public/" title="螢幕快照 2017-09-13 上午10.27.00" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4350/37198399085_78990fa582_o.png" width="900" alt="螢幕快照 2017-09-13 上午10.27.00"></a></p><h2 id="總結-Truffle-OpenZeppelin-A-Superb-Development-Experience"><a href="#總結-Truffle-OpenZeppelin-A-Superb-Development-Experience" class="headerlink" title="總結: Truffle+OpenZeppelin = A Superb Development Experience"></a>總結: Truffle+OpenZeppelin = A Superb Development Experience</h2><p>透過：</p><ul><li>Truffle：開發智能合約的框架</li><li>OpenZeppelin：可為智能合約提供ERC-20標準的工具</li></ul><p>就可以打造出可上市的智能合約的開發環境！ </p><hr><p>對OpenZeppelin內的合約架構有興趣的朋友可以觀看我這篇筆記：</p><p><a href="https://" target="_blank" rel="noopener">OpenZeppelin合約架構透析</a></p>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
            <tag> Truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity學習紀錄</title>
      <link href="/2017/09/12/solidity/"/>
      <url>/2017/09/12/solidity/</url>
      
        <content type="html"><![CDATA[<p>這篇主要記錄著我對Solidity官網文檔的學習紀錄</p><a id="more"></a><h2 id="簡單的合約開始介紹起"><a href="#簡單的合約開始介紹起" class="headerlink" title="簡單的合約開始介紹起"></a>簡單的合約開始介紹起</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>; <span class="comment">// 告訴compiler要如何對待這份code</span></span><br><span class="line"></span><br><span class="line">contract SimpleStorage &#123;</span><br><span class="line">    uint storedData; <span class="comment">// 宣告uint型態的變數 uint為 256 bits.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下控制stored variable.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">uint x</span>) </span>&#123;</span><br><span class="line">        storedData = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storedData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一個比較複雜的合約</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Coin &#123;</span><br><span class="line">    <span class="comment">// The keyword "public" makes those variables</span></span><br><span class="line">    <span class="comment">// readable from outside.</span></span><br><span class="line">    address public minter;</span><br><span class="line">    </span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</span><br><span class="line">    <span class="comment">// 可把mapping 當成是hash tables</span></span><br><span class="line">    <span class="comment">// 將address當參數 映射到balances中會得到uint型態的回傳值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Events allow light clients to react on</span></span><br><span class="line">    <span class="comment">// changes efficiently.</span></span><br><span class="line">    event Sent(address <span class="keyword">from</span>, address to, uint amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和contract同名的函式名稱即為constructor，在合約被創造出來時呼叫</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Coin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        minter = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mint</span>(<span class="params">address receiver, uint amount</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.sender != minter) <span class="keyword">return</span>;</span><br><span class="line">        balances[receiver] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">address receiver, uint amount</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (balances[msg.sender] &lt; amount) <span class="keyword">return</span>;</span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">        balances[receiver] += amount;</span><br><span class="line">        Sent(msg.sender, receiver, amount);</span><br><span class="line">        <span class="comment">// msg.sender 合約的持有者</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>address</code>：160-bit value that does not allow any arithmetic operations.</li><li><p><code>public</code>：使其他合約可以存取自己的scope function,variable.</p></li><li><p><code>address public minter</code> 可看成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function minter() returns (address) &#123; return minter; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>mapping (address =&gt; uint) public balances;</code>可看成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function balances(address _account) returns (uint) &#123;</span><br><span class="line">    return balances[_account];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>event Sent(address from, address to, uint amount);</p></li></ul><p>透過該Sent function方便追蹤錢的流出和流入地址是哪</p><ul><li>Coin()：為建構子，合約創造出來就會呼叫且建構子會儲存：</li></ul><ol><li>msg：儲存創造合約的人的address以及其他properties (tx,block…)，擁有直接和blockchain溝通的權利</li><li>msg.sender：呼叫合約的人，若contract A呼叫contract B，那msg.sender在contract A B都是相同的。</li></ol><h2 id="Ethereum-Virtual-Machine"><a href="#Ethereum-Virtual-Machine" class="headerlink" title="Ethereum Virtual Machine"></a>Ethereum Virtual Machine</h2><p>The Ethereum Virtual Machine or EVM is the runtime environment for smart contracts in Ethereum. </p><h2 id="Features"><a href="#Features" class="headerlink" title="Features:"></a>Features:</h2><ul><li>Overview<br>The Ethereum Virtual Machine or EVM is the runtime environment for smart contracts in Ethereum</li><li>Accounts<br><code>External accounts</code> that are controlled by public-private key pairs (i.e. humans)<br><code>Contract accounts</code> which are controlled by the code stored together with the account.<br>—-Every account has a persistent key-value store mapping 256-bit words to 256-bit words called storage.</li><li>Transactions</li><li>Gas<br>The gas price is a value set by the creator of the transaction<br>合約的手續費，用來執行合約的燃料，避免Contract有bug會把錢一直轉走</li><li>Storage, Memory and the Stack</li></ul><p><code>Storage</code>:<br>每個Contract都會持有自己的storage,storage為一個key-value store that maps 256-bit words to 256-bit words.</p><p><code>Memory</code>：<br>of which a contract obtains a freshly cleared instance for each message call</p><ul><li>Delegatecall / Callcode and Libraries</li></ul><h2 id="Solidity-Examples"><a href="#Solidity-Examples" class="headerlink" title="Solidity Examples"></a>Solidity Examples</h2><h3 id="Solidity-Example-1：Voting-Contract"><a href="#Solidity-Example-1：Voting-Contract" class="headerlink" title="Solidity Example 1：Voting Contract."></a>Solidity Example 1：Voting Contract.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// @title Voting with delegation.</span></span><br><span class="line">contract Ballot &#123;</span><br><span class="line">    <span class="comment">// This declares a new complex type which will</span></span><br><span class="line">    <span class="comment">// be used for variables later.</span></span><br><span class="line">    <span class="comment">// It will represent a single voter.</span></span><br><span class="line">    struct Voter &#123;</span><br><span class="line">        uint weight; <span class="comment">// weight is accumulated by delegation</span></span><br><span class="line">        bool voted;  <span class="comment">// if true, that person already voted</span></span><br><span class="line">        address delegate; <span class="comment">// person delegated to</span></span><br><span class="line">        uint vote;   <span class="comment">// index of the voted proposal</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is a type for a single proposal.</span></span><br><span class="line">    struct Proposal &#123;</span><br><span class="line">        bytes32 name;   <span class="comment">// short name (up to 32 bytes)</span></span><br><span class="line">        uint voteCount; <span class="comment">// number of accumulated votes</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    address public chairperson;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This declares a state variable that</span></span><br><span class="line">    <span class="comment">// stores a `Voter` struct for each possible address.</span></span><br><span class="line">    <span class="comment">// 將每一個地址映射到對應的 Voter struct.</span></span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> Voter) public voters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A dynamically-sized array of `Proposal` structs.</span></span><br><span class="line">    Proposal[] public proposals;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Create a new ballot to choose one of `proposalNames`.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Ballot</span>(<span class="params">bytes32[] proposalNames</span>) </span>&#123;</span><br><span class="line">        chairperson = msg.sender;</span><br><span class="line">        voters[chairperson].weight = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For each of the provided proposal names,</span></span><br><span class="line">        <span class="comment">// create a new proposal object and add it</span></span><br><span class="line">        <span class="comment">// to the end of the array.</span></span><br><span class="line">        <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; proposalNames.length; i++) &#123;</span><br><span class="line">            <span class="comment">// `Proposal(&#123;...&#125;)` creates a temporary</span></span><br><span class="line">            <span class="comment">// Proposal object and `proposals.push(...)`</span></span><br><span class="line">            <span class="comment">// appends it to the end of `proposals`.</span></span><br><span class="line">            proposals.push(Proposal(&#123;</span><br><span class="line">                name: proposalNames[i],</span><br><span class="line">                voteCount: <span class="number">0</span></span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Give `voter` the right to vote on this ballot.</span></span><br><span class="line">    <span class="comment">// May only be called by `chairperson`.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">giveRightToVote</span>(<span class="params">address voter</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// If the argument of `require` evaluates to `false`,</span></span><br><span class="line">        <span class="comment">// it terminates and reverts all changes to</span></span><br><span class="line">        <span class="comment">// the state and to Ether balances. It is often</span></span><br><span class="line">        <span class="comment">// a good idea to use this if functions are</span></span><br><span class="line">        <span class="comment">// called incorrectly. But watch out, this</span></span><br><span class="line">        <span class="comment">// will currently also consume all provided gas</span></span><br><span class="line">        <span class="comment">// (this is planned to change in the future).</span></span><br><span class="line">        <span class="built_in">require</span>((msg.sender == chairperson) &amp;&amp; !voters[voter].voted &amp;&amp; (voters[voter].weight == <span class="number">0</span>));</span><br><span class="line">        voters[voter].weight = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Delegate your vote to the voter `to`.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">delegate</span>(<span class="params">address to</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// assigns reference</span></span><br><span class="line">        Voter storage sender = voters[msg.sender];</span><br><span class="line">        <span class="built_in">require</span>(!sender.voted);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Self-delegation is not allowed.</span></span><br><span class="line">        <span class="built_in">require</span>(to != msg.sender);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Forward the delegation as long as</span></span><br><span class="line">        <span class="comment">// `to` also delegated.</span></span><br><span class="line">        <span class="comment">// In general, such loops are very dangerous,</span></span><br><span class="line">        <span class="comment">// because if they run too long, they might</span></span><br><span class="line">        <span class="comment">// need more gas than is available in a block.</span></span><br><span class="line">        <span class="comment">// In this case, the delegation will not be executed,</span></span><br><span class="line">        <span class="comment">// but in other situations, such loops might</span></span><br><span class="line">        <span class="comment">// cause a contract to get "stuck" completely.</span></span><br><span class="line">        <span class="keyword">while</span> (voters[to].delegate != address(<span class="number">0</span>)) &#123;</span><br><span class="line">            to = voters[to].delegate;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We found a loop in the delegation, not allowed.</span></span><br><span class="line">            <span class="built_in">require</span>(to != msg.sender);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since `sender` is a reference, this</span></span><br><span class="line">        <span class="comment">// modifies `voters[msg.sender].voted`</span></span><br><span class="line">        sender.voted = <span class="literal">true</span>;</span><br><span class="line">        sender.delegate = to;</span><br><span class="line">        Voter delegate = voters[to];</span><br><span class="line">        <span class="keyword">if</span> (delegate.voted) &#123;</span><br><span class="line">            <span class="comment">// If the delegate already voted,</span></span><br><span class="line">            <span class="comment">// directly add to the number of votes</span></span><br><span class="line">            proposals[delegate.vote].voteCount += sender.weight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If the delegate did not vote yet,</span></span><br><span class="line">            <span class="comment">// add to her weight.</span></span><br><span class="line">            delegate.weight += sender.weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Give your vote (including votes delegated to you)</span></span><br><span class="line">    <span class="comment">/// to proposal `proposals[proposal].name`.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vote</span>(<span class="params">uint proposal</span>) </span>&#123;</span><br><span class="line">        Voter storage sender = voters[msg.sender];</span><br><span class="line">        <span class="built_in">require</span>(!sender.voted);</span><br><span class="line">        sender.voted = <span class="literal">true</span>;</span><br><span class="line">        sender.vote = proposal;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If `proposal` is out of the range of the array,</span></span><br><span class="line">        <span class="comment">// this will throw automatically and revert all</span></span><br><span class="line">        <span class="comment">// changes.</span></span><br><span class="line">        proposals[proposal].voteCount += sender.weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @dev Computes the winning proposal taking all</span></span><br><span class="line">    <span class="comment">/// previous votes into account.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">winningProposal</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint winningProposal</span>) </span>&#123;</span><br><span class="line">        uint winningVoteCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (uint p = <span class="number">0</span>; p &lt; proposals.length; p++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (proposals[p].voteCount &gt; winningVoteCount) &#123;</span><br><span class="line">                winningVoteCount = proposals[p].voteCount;</span><br><span class="line">                winningProposal = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calls winningProposal() function to get the index</span></span><br><span class="line">    <span class="comment">// of the winner contained in the proposals array and then</span></span><br><span class="line">    <span class="comment">// returns the name of the winner</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">winnerName</span>(<span class="params"></span>) <span class="title">constant</span></span></span><br><span class="line"><span class="function">            <span class="title">returns</span> (<span class="params">bytes32 winnerName</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        winnerName = proposals[winningProposal()].name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solidity-Example-2：Simple-Open-Auction"><a href="#Solidity-Example-2：Simple-Open-Auction" class="headerlink" title="Solidity Example 2：Simple Open Auction"></a>Solidity Example 2：Simple Open Auction</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract SimpleAuction &#123;</span><br><span class="line">    <span class="comment">// Parameters of the auction. Times are either</span></span><br><span class="line">    <span class="comment">// absolute unix timestamps (seconds since 1970-01-01)</span></span><br><span class="line">    <span class="comment">// or time periods in seconds.</span></span><br><span class="line">    address public beneficiary;</span><br><span class="line">    uint public auctionStart;</span><br><span class="line">    uint public biddingTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Current state of the auction.</span></span><br><span class="line">    address public highestBidder;</span><br><span class="line">    uint public highestBid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allowed withdrawals of previous bids</span></span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) pendingReturns;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set to true at the end, disallows any change</span></span><br><span class="line">    bool ended;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Events that will be fired on changes.</span></span><br><span class="line">    event HighestBidIncreased(address bidder, uint amount);</span><br><span class="line">    event AuctionEnded(address winner, uint amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following is a so-called natspec comment,</span></span><br><span class="line">    <span class="comment">// recognizable by the three slashes.</span></span><br><span class="line">    <span class="comment">// It will be shown when the user is asked to</span></span><br><span class="line">    <span class="comment">// confirm a transaction.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Create a simple auction with `_biddingTime`</span></span><br><span class="line">    <span class="comment">/// seconds bidding time on behalf of the</span></span><br><span class="line">    <span class="comment">/// beneficiary address `_beneficiary`.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SimpleAuction</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        uint _biddingTime,</span></span></span><br><span class="line"><span class="function"><span class="params">        address _beneficiary</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">        beneficiary = _beneficiary;</span><br><span class="line">        auctionStart = now;</span><br><span class="line">        biddingTime = _biddingTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Bid on the auction with the value sent</span></span><br><span class="line">    <span class="comment">/// together with this transaction.</span></span><br><span class="line">    <span class="comment">/// The value will only be refunded if the</span></span><br><span class="line">    <span class="comment">/// auction is not won.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bid</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// No arguments are necessary, all</span></span><br><span class="line">        <span class="comment">// information is already part of</span></span><br><span class="line">        <span class="comment">// the transaction. The keyword payable</span></span><br><span class="line">        <span class="comment">// is required for the function to</span></span><br><span class="line">        <span class="comment">// be able to receive Ether.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Revert the call if the bidding</span></span><br><span class="line">        <span class="comment">// period is over.</span></span><br><span class="line">        <span class="built_in">require</span>(now &lt;= (auctionStart + biddingTime));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the bid is not higher, send the</span></span><br><span class="line">        <span class="comment">// money back.</span></span><br><span class="line">        <span class="built_in">require</span>(msg.value &gt; highestBid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (highestBidder != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Sending back the money by simply using</span></span><br><span class="line">            <span class="comment">// highestBidder.send(highestBid) is a security risk</span></span><br><span class="line">            <span class="comment">// because it could execute an untrusted contract.</span></span><br><span class="line">            <span class="comment">// It is always safer to let the recipients</span></span><br><span class="line">            <span class="comment">// withdraw their money themselves.</span></span><br><span class="line">            pendingReturns[highestBidder] += highestBid;</span><br><span class="line">        &#125;</span><br><span class="line">        highestBidder = msg.sender;</span><br><span class="line">        highestBid = msg.value;</span><br><span class="line">        HighestBidIncreased(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Withdraw a bid that was overbid.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">        uint amount = pendingReturns[msg.sender];</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// It is important to set this to zero because the recipient</span></span><br><span class="line">            <span class="comment">// can call this function again as part of the receiving call</span></span><br><span class="line">            <span class="comment">// before `send` returns.</span></span><br><span class="line">            pendingReturns[msg.sender] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!msg.sender.send(amount)) &#123;</span><br><span class="line">                <span class="comment">// No need to call throw here, just reset the amount owing</span></span><br><span class="line">                pendingReturns[msg.sender] = amount;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// End the auction and send the highest bid</span></span><br><span class="line">    <span class="comment">/// to the beneficiary.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">auctionEnd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// It is a good guideline to structure functions that interact</span></span><br><span class="line">        <span class="comment">// with other contracts (i.e. they call functions or send Ether)</span></span><br><span class="line">        <span class="comment">// into three phases:</span></span><br><span class="line">        <span class="comment">// 1. checking conditions</span></span><br><span class="line">        <span class="comment">// 2. performing actions (potentially changing conditions)</span></span><br><span class="line">        <span class="comment">// 3. interacting with other contracts</span></span><br><span class="line">        <span class="comment">// If these phases are mixed up, the other contract could call</span></span><br><span class="line">        <span class="comment">// back into the current contract and modify the state or cause</span></span><br><span class="line">        <span class="comment">// effects (ether payout) to be performed multiple times.</span></span><br><span class="line">        <span class="comment">// If functions called internally include interaction with external</span></span><br><span class="line">        <span class="comment">// contracts, they also have to be considered interaction with</span></span><br><span class="line">        <span class="comment">// external contracts.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. Conditions</span></span><br><span class="line">        <span class="built_in">require</span>(now &gt;= (auctionStart + biddingTime)); <span class="comment">// auction did not yet end</span></span><br><span class="line">        <span class="built_in">require</span>(!ended); <span class="comment">// this function has already been called</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Effects</span></span><br><span class="line">        ended = <span class="literal">true</span>;</span><br><span class="line">        AuctionEnded(highestBidder, highestBid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Interaction</span></span><br><span class="line">        beneficiary.transfer(highestBid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solidity-Example-3：Blink-Auction"><a href="#Solidity-Example-3：Blink-Auction" class="headerlink" title="Solidity Example 3：Blink Auction"></a>Solidity Example 3：Blink Auction</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract BlindAuction &#123;</span><br><span class="line">    struct Bid &#123;</span><br><span class="line">        bytes32 blindedBid;</span><br><span class="line">        uint deposit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    address public beneficiary;</span><br><span class="line">    uint public auctionStart;</span><br><span class="line">    uint public biddingEnd;</span><br><span class="line">    uint public revealEnd;</span><br><span class="line">    bool public ended;</span><br><span class="line"></span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> Bid[]) public bids;</span><br><span class="line"></span><br><span class="line">    address public highestBidder;</span><br><span class="line">    uint public highestBid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allowed withdrawals of previous bids</span></span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) pendingReturns;</span><br><span class="line"></span><br><span class="line">    event AuctionEnded(address winner, uint highestBid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Modifiers are a convenient way to validate inputs to</span></span><br><span class="line">    <span class="comment">/// functions. `onlyBefore` is applied to `bid` below:</span></span><br><span class="line">    <span class="comment">/// The new function body is the modifier's body where</span></span><br><span class="line">    <span class="comment">/// `_` is replaced by the old function body.</span></span><br><span class="line">    modifier onlyBefore(uint _time) &#123; <span class="built_in">require</span>(now &lt; _time); _; &#125;</span><br><span class="line">    modifier onlyAfter(uint _time) &#123; <span class="built_in">require</span>(now &gt; _time); _; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">BlindAuction</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        uint _biddingTime,</span></span></span><br><span class="line"><span class="function"><span class="params">        uint _revealTime,</span></span></span><br><span class="line"><span class="function"><span class="params">        address _beneficiary</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">        beneficiary = _beneficiary;</span><br><span class="line">        auctionStart = now;</span><br><span class="line">        biddingEnd = now + _biddingTime;</span><br><span class="line">        revealEnd = biddingEnd + _revealTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Place a blinded bid with `_blindedBid` = keccak256(value,</span></span><br><span class="line">    <span class="comment">/// fake, secret).</span></span><br><span class="line">    <span class="comment">/// The sent ether is only refunded if the bid is correctly</span></span><br><span class="line">    <span class="comment">/// revealed in the revealing phase. The bid is valid if the</span></span><br><span class="line">    <span class="comment">/// ether sent together with the bid is at least "value" and</span></span><br><span class="line">    <span class="comment">/// "fake" is not true. Setting "fake" to true and sending</span></span><br><span class="line">    <span class="comment">/// not the exact amount are ways to hide the real bid but</span></span><br><span class="line">    <span class="comment">/// still make the required deposit. The same address can</span></span><br><span class="line">    <span class="comment">/// place multiple bids.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bid</span>(<span class="params">bytes32 _blindedBid</span>)</span></span><br><span class="line"><span class="function">        <span class="title">payable</span></span></span><br><span class="line"><span class="function">        <span class="title">onlyBefore</span>(<span class="params">biddingEnd</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bids[msg.sender].push(Bid(&#123;</span><br><span class="line">            blindedBid: _blindedBid,</span><br><span class="line">            deposit: msg.value</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Reveal your blinded bids. You will get a refund for all</span></span><br><span class="line">    <span class="comment">/// correctly blinded invalid bids and for all bids except for</span></span><br><span class="line">    <span class="comment">/// the totally highest.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reveal</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        uint[] _values,</span></span></span><br><span class="line"><span class="function"><span class="params">        bool[] _fake,</span></span></span><br><span class="line"><span class="function"><span class="params">        bytes32[] _secret</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>)</span></span><br><span class="line"><span class="function">        <span class="title">onlyAfter</span>(<span class="params">biddingEnd</span>)</span></span><br><span class="line"><span class="function">        <span class="title">onlyBefore</span>(<span class="params">revealEnd</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        uint length = bids[msg.sender].length;</span><br><span class="line">        <span class="built_in">require</span>(_values.length == length);</span><br><span class="line">        <span class="built_in">require</span>(_fake.length == length);</span><br><span class="line">        <span class="built_in">require</span>(_secret.length == length);</span><br><span class="line"></span><br><span class="line">        uint refund;</span><br><span class="line">        <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> bid = bids[msg.sender][i];</span><br><span class="line">            <span class="keyword">var</span> (value, fake, secret) =</span><br><span class="line">                    (_values[i], _fake[i], _secret[i]);</span><br><span class="line">            <span class="keyword">if</span> (bid.blindedBid != keccak256(value, fake, secret)) &#123;</span><br><span class="line">                <span class="comment">// Bid was not actually revealed.</span></span><br><span class="line">                <span class="comment">// Do not refund deposit.</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            refund += bid.deposit;</span><br><span class="line">            <span class="keyword">if</span> (!fake &amp;&amp; bid.deposit &gt;= value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (placeBid(msg.sender, value))</span><br><span class="line">                    refund -= value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Make it impossible for the sender to re-claim</span></span><br><span class="line">            <span class="comment">// the same deposit.</span></span><br><span class="line">            bid.blindedBid = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.sender.transfer(refund);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is an "internal" function which means that it</span></span><br><span class="line">    <span class="comment">// can only be called from the contract itself (or from</span></span><br><span class="line">    <span class="comment">// derived contracts).</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">placeBid</span>(<span class="params">address bidder, uint value</span>) <span class="title">internal</span></span></span><br><span class="line"><span class="function">            <span class="title">returns</span> (<span class="params">bool success</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt;= highestBid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (highestBidder != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Refund the previously highest bidder.</span></span><br><span class="line">            pendingReturns[highestBidder] += highestBid;</span><br><span class="line">        &#125;</span><br><span class="line">        highestBid = value;</span><br><span class="line">        highestBidder = bidder;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Withdraw a bid that was overbid.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        uint amount = pendingReturns[msg.sender];</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// It is important to set this to zero because the recipient</span></span><br><span class="line">            <span class="comment">// can call this function again as part of the receiving call</span></span><br><span class="line">            <span class="comment">// before `send` returns (see the remark above about</span></span><br><span class="line">            <span class="comment">// conditions -&gt; effects -&gt; interaction).</span></span><br><span class="line">            pendingReturns[msg.sender] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            msg.sender.transfer(amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// End the auction and send the highest bid</span></span><br><span class="line">    <span class="comment">/// to the beneficiary.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">auctionEnd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        <span class="title">onlyAfter</span>(<span class="params">revealEnd</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(!ended);</span><br><span class="line">        AuctionEnded(highestBidder, highestBid);</span><br><span class="line">        ended = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// We send all the money we have, because some</span></span><br><span class="line">        <span class="comment">// of the refunds might have failed.</span></span><br><span class="line">        beneficiary.transfer(<span class="keyword">this</span>.balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solidity-Example-4：-Remote-Purchase"><a href="#Solidity-Example-4：-Remote-Purchase" class="headerlink" title="Solidity Example 4： Remote Purchase"></a>Solidity Example 4： Remote Purchase</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract Purchase &#123;</span><br><span class="line">    uint public value;</span><br><span class="line">    address public seller;</span><br><span class="line">    address public buyer;</span><br><span class="line">    enum State &#123; Created, Locked, Inactive &#125;</span><br><span class="line">    State public state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Purchase</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        seller = msg.sender;</span><br><span class="line">        value = msg.value / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">require</span>((<span class="number">2</span> * value) == msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier condition(bool _condition) &#123;</span><br><span class="line">        <span class="built_in">require</span>(_condition);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyBuyer() &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender == buyer);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlySeller() &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender == seller);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier inState(State _state) &#123;</span><br><span class="line">        <span class="built_in">require</span>(state == _state);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Aborted();</span><br><span class="line">    event PurchaseConfirmed();</span><br><span class="line">    event ItemReceived();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Abort the purchase and reclaim the ether.</span></span><br><span class="line">    <span class="comment">/// Can only be called by the seller before</span></span><br><span class="line">    <span class="comment">/// the contract is locked.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">abort</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        <span class="title">onlySeller</span></span></span><br><span class="line"><span class="function">        <span class="title">inState</span>(<span class="params">State.Created</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Aborted();</span><br><span class="line">        state = State.Inactive;</span><br><span class="line">        seller.transfer(<span class="keyword">this</span>.balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Confirm the purchase as buyer.</span></span><br><span class="line">    <span class="comment">/// Transaction has to include `2 * value` ether.</span></span><br><span class="line">    <span class="comment">/// The ether will be locked until confirmReceived</span></span><br><span class="line">    <span class="comment">/// is called.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">confirmPurchase</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        <span class="title">inState</span>(<span class="params">State.Created</span>)</span></span><br><span class="line"><span class="function">        <span class="title">condition</span>(<span class="params">msg.value == (<span class="number">2</span> * value</span>))</span></span><br><span class="line"><span class="function">        <span class="title">payable</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        PurchaseConfirmed();</span><br><span class="line">        buyer = msg.sender;</span><br><span class="line">        state = State.Locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Confirm that you (the buyer) received the item.</span></span><br><span class="line">    <span class="comment">/// This will release the locked ether.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">confirmReceived</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        <span class="title">onlyBuyer</span></span></span><br><span class="line"><span class="function">        <span class="title">inState</span>(<span class="params">State.Locked</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ItemReceived();</span><br><span class="line">        <span class="comment">// It is important to change the state first because</span></span><br><span class="line">        <span class="comment">// otherwise, the contracts called using `send` below</span></span><br><span class="line">        <span class="comment">// can call in again here.</span></span><br><span class="line">        state = State.Inactive;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> This actually allows both the buyer and the seller to</span></span><br><span class="line">        <span class="comment">// block the refund - the withdraw pattern should be used.</span></span><br><span class="line"></span><br><span class="line">        buyer.transfer(value);</span><br><span class="line">        seller.transfer(<span class="keyword">this</span>.balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solidity-語法"><a href="#Solidity-語法" class="headerlink" title="Solidity 語法"></a>Solidity 語法</h2><h3 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h3><p>Holds a 20 byte value (size of an Ethereum address)</p><h4 id="Members-of-Addresses"><a href="#Members-of-Addresses" class="headerlink" title="Members of Addresses"></a>Members of Addresses</h4><p>address包含著有以下的properties：</p><ul><li>balance：地址的餘額</li><li>transfer：轉錢到該地址  若有錯誤會發送exception</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">address x = 0x123;</span><br><span class="line">address myAddress = this;</span><br><span class="line">if (x.balance &lt; 10 &amp;&amp; myAddress.balance &gt;= 10) </span><br><span class="line">x.transfer(10); // 送給x這個地址 10塊ether</span><br></pre></td></tr></table></figure><ul><li><p>send ：也是轉錢到該地址 若有錯誤只會return false，使用要比較小心</p></li><li><p>call ：傳送參數（.value()）或函式回傳值給合約， </p></li><li>delegatecall</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">address nameReg = 0x72ba7d8e73fe8eb666ea66babc8116a41bfb10e2;</span><br><span class="line">nameReg.call(&quot;register&quot;, &quot;MyName&quot;);</span><br><span class="line">nameReg.call(bytes4(keccak256(&quot;fun(uint256)&quot;)), a);</span><br><span class="line">nameReg.call.value(10);</span><br></pre></td></tr></table></figure><h3 id="Enums：類似實作interface"><a href="#Enums：類似實作interface" class="headerlink" title="Enums：類似實作interface"></a>Enums：類似實作interface</h3><p>Enums needs at least one member.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract test &#123;</span><br><span class="line">    enum ActionChoices &#123; GoLeft, GoRight, GoStraight, SitStill &#125;</span><br><span class="line">    ActionChoices choice;</span><br><span class="line">    ActionChoices constant defaultChoice = ActionChoices.GoStraight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setGoStraight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        choice = ActionChoices.GoStraight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since enum types are not part of the ABI, the signature of "getChoice"</span></span><br><span class="line">    <span class="comment">// will automatically be changed to "getChoice() returns (uint8)"</span></span><br><span class="line">    <span class="comment">// for all matters external to Solidity. The integer type used is just</span></span><br><span class="line">    <span class="comment">// large enough to hold all enum values, i.e. if you have more values,</span></span><br><span class="line">    <span class="comment">// `uint16` will be used and so on.</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getChoice</span>(<span class="params"></span>) <span class="title">returns</span> (<span class="params">ActionChoices</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDefaultChoice</span>(<span class="params"></span>) <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uint(defaultChoice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Functional的種類以及參數-constnat-payble"><a href="#Functional的種類以及參數-constnat-payble" class="headerlink" title="Functional的種類以及參數(constnat,payble)"></a>Functional的種類以及參數(constnat,payble)</h3><ul><li><code>Internal function</code>： can only be called inside the current contract.</li><li><code>External function</code>： consist of an address and a function signature and they can be passed via and returned from external function calls.</li></ul><p>function宣告的格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function (&lt;parameter types&gt;) &#123;internal|external&#125; [constant] [payable] [returns (&lt;return types&gt;)]</span><br><span class="line"></span><br><span class="line">parameter types：參數的形式</span><br><span class="line">constant：標註該function為read-only，不會改變contract的state.</span><br><span class="line">payable： 設定會需要收ether的函式都要加一個payable屬性，如果沒加而有人呼叫該函式順便帶ether的話就會造成error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line">function (address chairman) &#123;&#125; constant payble returns (uint) &#123;&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="兩種方法存取該function"><a href="#兩種方法存取該function" class="headerlink" title="兩種方法存取該function:"></a>兩種方法存取該function:</h4><ul><li><code>f</code>： will result in an internal function, </li><li><code>this.f</code>： an external function.</li></ul><p>Internal Example: 類似OOD的Protected、不能被其他合約呼叫<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line">library ArrayUtils &#123;</span><br><span class="line">  <span class="comment">// internal functions can be used in internal library functions because</span></span><br><span class="line">  <span class="comment">// they will be part of the same code context</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">uint[] memory self, function (uint</span>) <span class="title">returns</span> (<span class="params">uint</span>) <span class="title">f</span>)</span></span><br><span class="line"><span class="function">    <span class="title">internal</span></span></span><br><span class="line"><span class="function">    <span class="title">returns</span> (<span class="params">uint[] memory r</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    r = <span class="keyword">new</span> uint[](self.length);</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; self.length; i++) &#123;</span><br><span class="line">      r[i] = f(self[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    uint[] memory self,</span></span></span><br><span class="line"><span class="function"><span class="params">    function (uint, uint</span>) <span class="title">returns</span> (<span class="params">uint</span>) <span class="title">f</span></span></span><br><span class="line"><span class="function">  )</span></span><br><span class="line"><span class="function">    <span class="title">internal</span></span></span><br><span class="line"><span class="function">    <span class="title">returns</span> (<span class="params">uint r</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    r = self[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">1</span>; i &lt; self.length; i++) &#123;</span><br><span class="line">      r = f(r, self[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">uint length</span>) <span class="title">internal</span> <span class="title">returns</span> (<span class="params">uint[] memory r</span>) </span>&#123;</span><br><span class="line">    r = <span class="keyword">new</span> uint[](length);</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">      r[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Pyramid &#123;</span><br><span class="line">  using ArrayUtils <span class="keyword">for</span> *;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">pyramid</span>(<span class="params">uint l</span>) <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ArrayUtils.range(l).map(square).reduce(sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">uint x</span>) <span class="title">internal</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">uint x, uint y</span>) <span class="title">internal</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>External： 其他合約可以呼叫該合約的function<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract Oracle &#123;</span><br><span class="line">  struct Request &#123;</span><br><span class="line">    bytes data;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">bytes memory</span>) <span class="title">external</span> <span class="title">callback</span>;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line">  Request[] requests;</span><br><span class="line">  event NewRequest(uint);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">bytes data, function(bytes memory</span>) <span class="title">external</span> <span class="title">callback</span>) </span>&#123;</span><br><span class="line">    requests.push(Request(data, callback));</span><br><span class="line">    NewRequest(requests.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reply</span>(<span class="params">uint requestID, bytes response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Here goes the check that the reply comes from a trusted source</span></span><br><span class="line">    requests[requestID].callback(response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract OracleUser &#123;</span><br><span class="line">  Oracle constant oracle = Oracle(<span class="number">0x1234567</span>); <span class="comment">// known contract</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">buySomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    oracle.query(<span class="string">"USD"</span>, <span class="keyword">this</span>.oracleResponse);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">oracleResponse</span>(<span class="params">bytes response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == address(oracle));</span><br><span class="line">    <span class="comment">// Use the data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="宣告Array"><a href="#宣告Array" class="headerlink" title="宣告Array"></a>宣告Array</h3><p>ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uint[] memory a = new uint[](7);</span><br></pre></td></tr></table></figure></p><h3 id="宣告-Struct：-類似宣告一個物件模板"><a href="#宣告-Struct：-類似宣告一個物件模板" class="headerlink" title="宣告 Struct： 類似宣告一個物件模板"></a>宣告 Struct： 類似宣告一個物件模板</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct Funder &#123;</span><br><span class="line">     address addr;</span><br><span class="line">     uint amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mappings"><a href="#Mappings" class="headerlink" title="Mappings"></a>Mappings</h3><p>宣告成： mapping(_KeyType =&gt; _ValueType) 的形式，可以看成是hash table的形式，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract MappingExample &#123;</span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</span><br><span class="line">    <span class="comment">//設定balances的index為addreess形態的，映射出後會得到uint型態的回傳值。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">uint newBalance</span>) </span>&#123;</span><br><span class="line">        balances[msg.sender] = newBalance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract MappingUser &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        MappingExample m = <span class="keyword">new</span> MappingExample();</span><br><span class="line">        m.update(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> m.balances(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他-Operators-Involving-LValues（可被assign的value"><a href="#其他-Operators-Involving-LValues（可被assign的value" class="headerlink" title="其他 Operators Involving LValues（可被assign的value)"></a>其他 Operators Involving LValues（可被assign的value)</h3><p>delete a： 把a初始化成 0<br>（也可以用在array 都設成0, struct 都設成初始值)</p><h2 id="Ether單位"><a href="#Ether單位" class="headerlink" title="Ether單位"></a>Ether單位</h2><h3 id="Ether-Uint："><a href="#Ether-Uint：" class="headerlink" title="Ether Uint："></a>Ether Uint：</h3><p>1 ether =<br>1000000000000000000 wei, (10^18)<br>1000 finney, (10^3)<br>1000000 szabo (10^6)</p><h2 id="全域可用變數及函式"><a href="#全域可用變數及函式" class="headerlink" title="全域可用變數及函式"></a>全域可用變數及函式</h2><h3 id="Special-Variables-and-Functions"><a href="#Special-Variables-and-Functions" class="headerlink" title="Special Variables and Functions"></a>Special Variables and Functions</h3><ul><li><p><code>suicide.(A合約)</code>: 將目前合約的所有ether都轉入到指定的Ａ合約(contract)</p></li><li><p><code>delete</code>：回收宣告的成員，並且返回一些gas當作回收的獎勵。</p></li></ul><p>回收各型態的參考資料：<a href="http://me.tryblockchain.org/solidity-delete.html" target="_blank" rel="noopener">http://me.tryblockchain.org/solidity-delete.html</a></p><h4 id="Block-and-Transaction-Properties"><a href="#Block-and-Transaction-Properties" class="headerlink" title="Block and Transaction Properties"></a>Block and Transaction Properties</h4><ul><li>block.blockhash(uint blockNumber) returns (bytes32): hash of the given block - only works for 256 most recent blocks excluding current</li><li>block.coinbase (address): current block miner’s address</li><li>block.difficulty (uint): current block difficulty</li><li>block.gaslimit (uint): current block gaslimit</li><li>block.number (uint): current block number</li><li>block.timestamp (uint): current block timestamp as seconds since unix epoch</li><li>msg.data (bytes): complete calldata</li><li>msg.gas (uint): remaining gas</li><li><code>msg.sender</code> (address): sender of the message (current call)</li><li>msg.sig (bytes4): first four bytes of the calldata (i.e. function identifier)</li><li>msg.value (uint): number of wei sent with the message</li><li>now (uint): current block timestamp (alias for block.timestamp)</li><li>tx.gasprice (uint): gas price of the transaction</li><li>tx.origin (address): sender of the transaction (full call chain)(不建議用)</li></ul><h4 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h4><ul><li>assert(bool condition):<br>throws if the condition is not met - to be used for internal errors.</li><li>require(bool condition):<br>throws if the condition is not met - to be used for errors in inputs or external components.</li><li>revert():<br>abort execution and revert state changes</li></ul><h4 id="Mathematical-and-Cryptographic-Functions"><a href="#Mathematical-and-Cryptographic-Functions" class="headerlink" title="Mathematical and Cryptographic Functions"></a>Mathematical and Cryptographic Functions</h4><ul><li>addmod(uint x, uint y, uint k) returns (uint):<br>compute (x + y) % k where the addition is performed with arbitrary precision and does not wrap around at 2**256.</li><li>mulmod(uint x, uint y, uint k) returns (uint):<br>compute (x * y) % k where the multiplication is performed with arbitrary precision and does not wrap around at 2**256.</li><li>keccak256(…) returns (bytes32):<br>compute the Ethereum-SHA-3 (Keccak-256) hash of the (tightly packed) arguments</li><li>sha256(…) returns (bytes32):<br>compute the SHA-256 hash of the (tightly packed) arguments<br>sha3(…) returns (bytes32):<br>alias to keccak256</li><li>ripemd160(…) returns (bytes20):<br>compute RIPEMD-160 hash of the (tightly packed) arguments</li><li>ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address):<br>recover the address associated with the public key from elliptic curve signature or return zero on error (example usage)</li></ul><h2 id="Solidity的表達和控制的結構（Expressions-and-Control-Structures）"><a href="#Solidity的表達和控制的結構（Expressions-and-Control-Structures）" class="headerlink" title="Solidity的表達和控制的結構（Expressions and Control Structures）"></a>Solidity的表達和控制的結構（Expressions and Control Structures）</h2><h3 id="Input-Parameters-and-Output-Parameters-接收參數和回傳的形式"><a href="#Input-Parameters-and-Output-Parameters-接收參數和回傳的形式" class="headerlink" title="Input Parameters and Output Parameters 接收參數和回傳的形式"></a>Input Parameters and Output Parameters 接收參數和回傳的形式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Simple &#123;</span><br><span class="line">    <span class="comment">// 接收 uint _a , uint _b變數</span></span><br><span class="line">    <span class="comment">// 回傳uint -_sum uint o_product</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">arithmetics</span>(<span class="params">uint _a, uint _b</span>) <span class="title">returns</span> (<span class="params">uint o_sum, uint o_product</span>) </span>&#123;</span><br><span class="line">        o_sum = _a + _b;</span><br><span class="line">        o_product = _a * _b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="External-Function-Calls"><a href="#External-Function-Calls" class="headerlink" title="External Function Calls"></a>External Function Calls</h4><p>如果要得知呼叫某合約的function會有多少Wei和花費多少gas，可用<br><code>.value()</code> <code>.gas()</code></p><p>範例中的function info() 如果沒有加上 <span style="color:red">payable</span>這個keyword，就無法使用 <code>.value()</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract InfoFeed &#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params"></span>) <span class="title">payable</span> <span class="title">returns</span> (<span class="params">uint ret</span>) </span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Consumer &#123;</span><br><span class="line">    InfoFeed feed;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setFeed</span>(<span class="params">address addr</span>) </span>&#123; feed = InfoFeed(addr); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callFeed</span>(<span class="params"></span>) </span>&#123; feed.info.value(<span class="number">10</span>).gas(<span class="number">800</span>)(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Creating-Contracts-via-new"><a href="#Creating-Contracts-via-new" class="headerlink" title="Creating Contracts via new"></a>Creating Contracts via <code>new</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract D &#123;</span><br><span class="line">    uint x;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">uint a</span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        x = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    D d = <span class="keyword">new</span> D(<span class="number">4</span>); <span class="comment">// will be executed as part of C's constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createD</span>(<span class="params">uint arg</span>) </span>&#123;</span><br><span class="line">        D newD = <span class="keyword">new</span> D(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createAndEndowD</span>(<span class="params">uint arg, uint amount</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Send ether along with the creation</span></span><br><span class="line">        D newD = (<span class="keyword">new</span> D).value(amount)(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Error-handling-Assert-Require-Revertand-Exceptions"><a href="#Error-handling-Assert-Require-Revertand-Exceptions" class="headerlink" title="Error handling: Assert, Require, Revertand Exceptions"></a>Error handling: <code>Assert</code>, <code>Require</code>, <code>Revert</code>and <code>Exceptions</code></h3><ul><li><code>require</code> can be used to easily check conditions on inputs.</li><li><code>assert</code> can be used for internal error checking.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Sharer &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendHalf</span>(<span class="params">address addr</span>) <span class="title">payable</span> <span class="title">returns</span> (<span class="params">uint balance</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.value % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// Only allow even numbers</span></span><br><span class="line">        uint balanceBeforeTransfer = <span class="keyword">this</span>.balance;</span><br><span class="line">        addr.transfer(msg.value / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// Since transfer throws an exception on failure and</span></span><br><span class="line">        <span class="comment">// cannot call back here, there should be no way for us to</span></span><br><span class="line">        <span class="comment">// still have half of the money.</span></span><br><span class="line">        assert(<span class="keyword">this</span>.balance == balanceBeforeTransfer - msg.value / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="assert-發生的狀況："><a href="#assert-發生的狀況：" class="headerlink" title="assert 發生的狀況："></a><code>assert</code> 發生的狀況：</h4><ul><li>If you access an array at a too large or negative index (i.e. x[i] where i &gt;= x.length or i &lt; 0).</li><li>If you access a fixed-length bytesN at a too large or negative index.</li><li>If you divide or modulo by zero (e.g. 5 / 0 or 23 % 0).</li><li>If you shift by a negative amount.</li><li>If you convert a value too big or negative into an enum type.</li><li>If you call a zero-initialized variable of internal function type.</li><li>If you call assert with an argument that evaluates to false.</li></ul><h4 id="require-發生的狀況："><a href="#require-發生的狀況：" class="headerlink" title="require 發生的狀況："></a><code>require</code> 發生的狀況：</h4><ul><li>Calling throw.</li><li>Calling require with an argument that evaluates to false.</li><li>If you call a function via a message call but it does not finish properly (i.e. it runs out of gas, has no matching function, or throws an exception itself), except when a low level operation call, send, delegatecall or callcode is used. The low level operations never throw exceptions but indicate failures by returning false.</li><li>If you create a contract using the new keyword but the contract creation does not finish properly (see above for the definition of “not finish properly”).</li><li>If you perform an external function call targeting a contract that contains no code.</li><li>If your contract receives Ether via a public function without payable modifier (including the constructor and the fallback function).</li><li>If your contract receives Ether via a public getter function.</li><li>If a .transfer() fails.</li></ul><h2 id="Solidity-Contract-即Class"><a href="#Solidity-Contract-即Class" class="headerlink" title="Solidity Contract(即Class)"></a>Solidity Contract(即Class)</h2><p>創建contract的時候，constructor只會被呼叫一次</p><h3 id="合約的Visibility-and-Getters"><a href="#合約的Visibility-and-Getters" class="headerlink" title="合約的Visibility and Getters"></a>合約的Visibility and Getters</h3><h4 id="Visibility："><a href="#Visibility：" class="headerlink" title="Visibility："></a>Visibility：</h4><ul><li><code>external</code>:<br>External functions are part of the contract interface, which means they can be called from other contracts and via transactions. An external function f cannot be called internally (i.e. f() does not work, but this.f() works). External functions are sometimes more efficient when they receive large arrays of data.</li><li><code>public</code>:<br>Public functions are part of the contract interface and can be either called internally or via messages. For public state variables, an automatic getter function (see below) is generated.</li><li><code>internal</code>:<br>Those functions and state variables can only be accessed internally (i.e. from within the current contract or contracts deriving from it), without using this.</li><li><code>private</code>:<br>Private functions and state variables are only visible for the contract they are defined in and not in derived contracts.</li></ul><h4 id="Getter-Functions"><a href="#Getter-Functions" class="headerlink" title="Getter Functions"></a>Getter Functions</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    uint public data;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        data = <span class="number">3</span>; <span class="comment">// internal access 當成state變數</span></span><br><span class="line">        uint val = <span class="keyword">this</span>.data(); <span class="comment">// external access 當成是function</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function-Modifier-類似：函式插槽"><a href="#Function-Modifier-類似：函式插槽" class="headerlink" title="Function Modifier (類似：函式插槽)"></a>Function Modifier (類似：函式插槽)</h3><p>Modifier可用用來擴充其他function的內容，需要被inherit才能使用。<br>通常modifier用來設定一些條件，幫助函式被執行時能夠先滿足該條件再被執行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">contract owned &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">owned</span>(<span class="params"></span>) </span>&#123; owner = msg.sender; &#125;</span><br><span class="line">    address owner;</span><br><span class="line">    <span class="comment">// 該owned合約只有宣告一個modifier onlyOwner，並且沒有使用它</span></span><br><span class="line">    <span class="comment">// 該modifier只會被其他有繼承owned contract的合約所使用</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="comment">// "_;" 要繼承onlyOwner 函式的內容</span></span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract mortal is owned &#123;</span><br><span class="line">    <span class="comment">// 繼承 owned合約 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// close函式 使用modifier "onlyOwner" </span></span><br><span class="line">    <span class="comment">// 且close的內容會插入在 modifier中的 "_;"中</span></span><br><span class="line">    <span class="comment">// 可以把modifier想像成 slot（插槽)</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract priced &#123;</span><br><span class="line">    <span class="comment">// Modifier 也可以接收參數</span></span><br><span class="line">    modifier costs(uint price) &#123;</span><br><span class="line">    <span class="comment">// 若滿足msg.value &gt;= price 那就執行 使用該modifier函式的內容</span></span><br><span class="line">        <span class="keyword">if</span> (msg.value &gt;= price) &#123;</span><br><span class="line">            _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Register is priced, owned &#123;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> bool) registeredAddresses;</span><br><span class="line">    uint price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Register</span>(<span class="params">uint initialPrice</span>) </span>&#123; price = initialPrice; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要提供 payable，register才會接受ether</span></span><br><span class="line">    <span class="comment">// 使用 costs 的modifier .</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>) <span class="title">payable</span> <span class="title">costs</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">        registeredAddresses[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changePrice</span>(<span class="params">uint _price</span>) <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">        price = _price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Mutex &#123;</span><br><span class="line">    bool locked;</span><br><span class="line">    modifier noReentrancy() &#123;</span><br><span class="line">        <span class="built_in">require</span>(!locked);</span><br><span class="line">        locked = <span class="literal">true</span>;</span><br><span class="line">        _;</span><br><span class="line">        locked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// noReentrancy 被一個mutex所保護，必須要判斷locked是否是false才能執行 noReentrancy才能執行</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reentrant calls from within </span></span><br><span class="line">    <span class="comment">// msg.sender.call cannot call f again.因爲lock住了</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 noReentrancy(modifier),</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) <span class="title">noReentrancy</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender.call());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Constant-State-Variables"><a href="#Constant-State-Variables" class="headerlink" title="Constant State Variables"></a>Constant State Variables</h3><p>目前僅支援 uint, string使用</p><p>宣告一次後就不能再被改變</p><h3 id="Constant-Functions"><a href="#Constant-Functions" class="headerlink" title="Constant Functions"></a>Constant Functions</h3><p>不會改變contract state的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">uint a, uint b</span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * (b + <span class="number">42</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fallback-Function"><a href="#Fallback-Function" class="headerlink" title="Fallback Function"></a>Fallback Function</h3><p>沒有名稱的function,並且沒有接收參數以及不會傳任何值。<br>當呼叫某合約的方法時，沒有辦法成功</p><p>如果有合約直接收到ether的話（亦即不是透過send() or transfer() 那就得定義一個fallback function，不然會throw an exception.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Test &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; x = <span class="number">1</span>; &#125;</span><br><span class="line">  uint x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This contract keeps all Ether sent to it with no way</span></span><br><span class="line"><span class="comment">// to get it back.</span></span><br><span class="line">contract Sink &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Caller &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callTest</span>(<span class="params">Test test</span>) </span>&#123;</span><br><span class="line">        test.call(<span class="number">0xabcdef01</span>); </span><br><span class="line">        <span class="comment">// hash: 0xabcdef01 不存在 </span></span><br><span class="line">        <span class="comment">// 故 test.x的結果會變成 test.x = 1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The following will not compile, but even</span></span><br><span class="line">        <span class="comment">// if someone sends ether to that contract,</span></span><br><span class="line">        <span class="comment">// the transaction will fail and reject the</span></span><br><span class="line">        <span class="comment">// Ether.</span></span><br><span class="line">        <span class="comment">//test.send(2 ether);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>Event所寫入的資料會被記錄在一個Receipt（transaction logs)資料裡，並等待被打包進區塊鏈。</p><p>白話一點就是：通知全網有一件事情發生。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract ClientReceipt &#123;</span><br><span class="line">    event Deposit(</span><br><span class="line">        address indexed _from,</span><br><span class="line">        bytes32 indexed _id,</span><br><span class="line">        uint _value</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deposit</span>(<span class="params">bytes32 _id</span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Any call to this function (even deeply nested) can</span></span><br><span class="line">        <span class="comment">// be detected from the JavaScript API by filtering</span></span><br><span class="line">        <span class="comment">// for `Deposit` to be called.</span></span><br><span class="line">        Deposit(msg.sender, _id, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在javascript API的使用方式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abi = <span class="comment">/* abi as generated by the compiler */</span>;</span><br><span class="line"><span class="keyword">var</span> ClientReceipt = web3.eth.contract(abi);</span><br><span class="line"><span class="keyword">var</span> clientReceipt = ClientReceipt.at(<span class="number">0x123</span> <span class="comment">/* address */</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> event = clientReceipt.Deposit();</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch for changes</span></span><br><span class="line">event.watch(<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// result will contain various information</span></span><br><span class="line">    <span class="comment">// including the argumets given to the Deposit</span></span><br><span class="line">    <span class="comment">// call.</span></span><br><span class="line">    <span class="keyword">if</span> (!error)</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or pass a callback to start watching immediately</span></span><br><span class="line"><span class="keyword">var</span> event = clientReceipt.Deposit(<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!error)</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>使用 <code>is</code> 來繼承其他contract.</p><p>提供多重繼承同時也包含多型<br>當一個合約R繼承其他A,B,C的合約時，只有R的合約被打包進去blockchain，其他ABC不會。（因為是將A,B,C的內容複製到R的合約內)</p><p>像是Python的繼承特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract owned &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">owned</span>(<span class="params"></span>) </span>&#123; owner = msg.sender; &#125;</span><br><span class="line">    address owner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 "is" 來繼承，可以存取繼承合約的 non-private members (包含 internal function and state variables)，無法透過 this 來做externally access.</span></span><br><span class="line"></span><br><span class="line">contract mortal is owned &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.sender == owner) selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當成是 interface，等待被繼承實作</span></span><br><span class="line">contract Config &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lookup</span>(<span class="params">uint id</span>) <span class="title">returns</span> (<span class="params">address adr</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">NameReg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">bytes32 name</span>);</span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">unregister</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">// 可以實現多重繼承</span></span><br><span class="line"><span class="function">// 注意的是"<span class="title">owned</span>" 一樣也被<span class="title">mortal</span>繼承，故只有一個"<span class="title">owned</span>"的<span class="title">instance</span> (<span class="params">和C++的vritual inheritance一樣</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">contract</span> <span class="title">named</span> <span class="title">is</span> <span class="title">owned</span>, <span class="title">mortal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params">bytes32 name</span>) </span>&#123;</span><br><span class="line">        Config config = Config(<span class="number">0xd5f9d8d94886e70b06e474c3fb14fd43e2f23970</span>);</span><br><span class="line">        NameReg(config.lookup(<span class="number">1</span>)).register(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以override 繼承的function.注意要與原本的型態要一致</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.sender == owner) &#123;</span><br><span class="line">            Config config = Config(<span class="number">0xd5f9d8d94886e70b06e474c3fb14fd43e2f23970</span>);</span><br><span class="line">            NameReg(config.lookup(<span class="number">1</span>)).unregister();</span><br><span class="line">            <span class="comment">// 依然可以呼叫繼承合約內的函式</span></span><br><span class="line">            mortal.kill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果繼承的contract中有的人的contractor需要parameter,</span></span><br><span class="line"><span class="comment">// 那就得在 is 後面的地方輸入參數，</span></span><br><span class="line"><span class="comment">// 如下 "named("GoldFeed");</span></span><br><span class="line">contract PriceFeed is owned, mortal, named(<span class="string">"GoldFeed"</span>) &#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">updateInfo</span>(<span class="params">uint newInfo</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (msg.sender == owner) info = newInfo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span>(<span class="params">uint r</span>) </span>&#123; <span class="keyword">return</span> info; &#125;</span><br><span class="line"></span><br><span class="line">   uint info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多重繼承要注意的點：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract owned &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">owned</span>(<span class="params"></span>) </span>&#123; owner = msg.sender; &#125;</span><br><span class="line">    address owner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract mortal is owned &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.sender == owner) selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Base1 is mortal &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* do cleanup 1 */</span> mortal.kill(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract Base2 is mortal &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* do cleanup 2 */</span> mortal.kill(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract Final is Base1, Base2 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>呼叫 Final.kill 僅會呼叫到 Base2的 kill function.<br>而忽略掉 Base1 的.</p><h3 id="Abstract-Contracts"><a href="#Abstract-Contracts" class="headerlink" title="Abstract Contracts"></a>Abstract Contracts</h3><p><span style="color:red">不實作</span>合約內的function內容，被繼承時在實作。<br>但可以定義變數，建構子等等。</p><p>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Feline &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">utterance</span>(<span class="params"></span>) <span class="title">returns</span> (<span class="params">bytes32</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p>和Abstract很像，不過不能有任何的function被實作<br>以下為限制條件</p><ul><li>Cannot inherit other contracts or interfaces.</li><li>Cannot define constructor.</li><li>Cannot define variables.</li><li>Cannot define structs.</li><li>Cannot define enums.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">interface Token &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address recipient, uint amount</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h3><p>和contract(class)很像，不過僅會在特地的address部署一次而已。</p><p>因為佈一個contract需要gas，<br>不過如果要重複使用Set的話，又不想重複宣告contract，那就可以用<br>Libraries來實作出一個Set，並且佈出去就會產生一個地址 (linker)，<br>其他合約就可以透過linker來使用Set.</p><p>直接看例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line">library <span class="built_in">Set</span> &#123;</span><br><span class="line">  <span class="comment">// We define a new struct datatype that will be used to</span></span><br><span class="line">  <span class="comment">// hold its data in the calling contract.</span></span><br><span class="line">  struct Data &#123; mapping(<span class="function"><span class="params">uint</span> =&gt;</span> bool) flags; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Note that the first parameter is of type "storage</span></span><br><span class="line">  <span class="comment">// reference" and thus only its storage address and not</span></span><br><span class="line">  <span class="comment">// its contents is passed as part of the call.  This is a</span></span><br><span class="line">  <span class="comment">// special feature of library functions.  It is idiomatic</span></span><br><span class="line">  <span class="comment">// to call the first parameter 'self', if the function can</span></span><br><span class="line">  <span class="comment">// be seen as a method of that object.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">Data storage self, uint value</span>)</span></span><br><span class="line"><span class="function">      <span class="title">returns</span> (<span class="params">bool</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (self.flags[value])</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// already there</span></span><br><span class="line">      self.flags[value] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">Data storage self, uint value</span>)</span></span><br><span class="line"><span class="function">      <span class="title">returns</span> (<span class="params">bool</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!self.flags[value])</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// not there</span></span><br><span class="line">      self.flags[value] = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">contains</span>(<span class="params">Data storage self, uint value</span>)</span></span><br><span class="line"><span class="function">      <span class="title">returns</span> (<span class="params">bool</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> self.flags[value];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    <span class="built_in">Set</span>.Data knownValues;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">uint value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// The library functions can be called without a</span></span><br><span class="line">        <span class="comment">// specific instance of the library, since the</span></span><br><span class="line">        <span class="comment">// "instance" will be the current contract.</span></span><br><span class="line">        <span class="built_in">require</span>(<span class="built_in">Set</span>.insert(knownValues, value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// In this contract, we can also directly access knownValues.flags, if we want.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Style-Guide-（套用eslint-for-solidity"><a href="#Style-Guide-（套用eslint-for-solidity" class="headerlink" title="Style Guide （套用eslint for solidity)"></a>Style Guide （套用eslint for solidity)</h2><ul><li>Indentation: 4 spaces  (avoid using tabs.)</li><li>Order of Functions: (function的寫法的優先順序)</li></ul><ol><li>constructor</li><li>fallback function (if exists)</li><li>external</li><li>public</li><li>internal</li><li>private</li></ol><hr><h2 id="Web3-js-學習目標"><a href="#Web3-js-學習目標" class="headerlink" title="Web3.js 學習目標"></a>Web3.js 學習目標</h2><p>瞭解：<br>1.如何把key pair抓出來<br>2.如何簽驗章<br>3.如何進行加解密<br>4.如何發events</p><ul><li>環簽章</li><li>同態加密<br>Confidential transaction（<br><a href="https://www.elementsproject.org/elements/confidential-transactions/" target="_blank" rel="noopener">https://www.elementsproject.org/elements/confidential-transactions/</a></li><li>ZKsnark(包含零知識證明)<br>參考：（應用例子：不公開UTXO，也能讓礦工驗證，不過礦工不能解密，不然會失去confidential的特性，不讓receiver知道UTXO）<br><a href="https://z.cash/technology/zksnarks.html" target="_blank" rel="noopener">https://z.cash/technology/zksnarks.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用truffle來練習撰寫認養寵物的智能合約</title>
      <link href="/2017/09/07/truffle-petshop/"/>
      <url>/2017/09/07/truffle-petshop/</url>
      
        <content type="html"><![CDATA[<p>本篇是翻譯自Truffle官方所釋出的Dapp教學文檔Pet-Shop<br><a href="http://truffleframework.com/tutorials/pet-shop" target="_blank" rel="noopener">http://truffleframework.com/tutorials/pet-shop</a></p><h2 id="執行環境"><a href="#執行環境" class="headerlink" title="執行環境"></a>執行環境</h2><h3 id="開發前準備"><a href="#開發前準備" class="headerlink" title="開發前準備"></a>開發前準備</h3><p>首先要安裝testrpc、truffle :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ethereumjs-testrpc</span><br><span class="line">// 安裝測試用ethereum私有鍊</span><br><span class="line"></span><br><span class="line">npm install -g truffle</span><br><span class="line">// 開發智能合約的一套框架</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>安裝truffle上已經預先包好的練習專案(Truffle box: ETHEREUM PET SHOP)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir pet-shop-tutorial </span><br><span class="line">// 創建一個目錄</span><br><span class="line"></span><br><span class="line">cd pet-shop-tutorial </span><br><span class="line">// 切換到該目錄</span><br><span class="line"></span><br><span class="line">truffle unbox pet-shop</span><br><span class="line">// 安裝truffle打包好的pet-shop練習專案檔</span><br></pre></td></tr></table></figure></p><h3 id="目錄架構"><a href="#目錄架構" class="headerlink" title="目錄架構"></a>目錄架構</h3><ul><li><p>/contracts: 存放合約的地方，檔名為.sol，而Migrate.sol是負責紀錄其他合約如何deploy到區塊鏈，不能刪除！</p></li><li><p>/migrations: 負責將合約掛到區塊鏈上，並且追蹤合約的更動狀況。 </p></li><li><p>/test: 包含Javascript and solidity檔案，負責測試合約內容。</p></li><li><p><code>truffle.js</code> : truffle的設定檔</p></li></ul><h2 id="合約內容"><a href="#合約內容" class="headerlink" title="合約內容"></a>合約內容</h2><h3 id="在-contract-建立-Adoption-sol"><a href="#在-contract-建立-Adoption-sol" class="headerlink" title="在/contract 建立 Adoption.sol"></a>在/contract 建立 Adoption.sol</h3><p>宣告一個contract:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.4</span>;</span><br><span class="line"><span class="comment">// 告訴compiler 現在要用哪個版本編譯</span></span><br><span class="line"></span><br><span class="line">contract Adoption &#123; <span class="comment">//宣告一個 contract的class 叫 Adoption</span></span><br><span class="line">  <span class="comment">// 存放領養飼主的地址（預設是有16隻狗等待被認養）</span></span><br><span class="line">  address[<span class="number">16</span>] public adopters; </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有人要認養某隻寵物(petId)，判斷是否可以認養，</span></span><br><span class="line">  <span class="comment">// 回傳該認養的寵物ID以證明該寵物成功被某用戶認養</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">adopt</span>(<span class="params">uint petId</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">      <span class="built_in">require</span>(petId &gt;= <span class="number">0</span> &amp;&amp; petId &lt;= <span class="number">15</span>);</span><br><span class="line">      <span class="comment">// 判斷petId，若不符合結束該函式，不再往下執行</span></span><br><span class="line">       </span><br><span class="line">      adopters[petId] = msg.sender;</span><br><span class="line">      <span class="comment">// 透過msg.sender取得呼叫該函式的使用者</span></span><br><span class="line">      <span class="comment">// 也就是認養該寵物的用戶ID</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> petId;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 回傳所有的認養者，回傳值的型態為address[16]</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getAdopters</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">address[<span class="number">16</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> adopters;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="編譯-Compiling-和部署-Migrating-合約"><a href="#編譯-Compiling-和部署-Migrating-合約" class="headerlink" title="編譯(Compiling)和部署(Migrating)合約"></a>編譯(Compiling)和部署(Migrating)合約</h2><p>寫好合約後，需要將.sol檔進行編譯成.bytecode，才能在EVM (ethereum virtual machine上執行).</p><p>然後在terminal上執行 <code>testrpc</code> 啟動</p><p>啟動後會出現：</p><ul><li>數組帳戶的address以及私鑰</li><li>HD wallet的資訊（稍後會提到metatask，會使用到Mnemonic section的資訊)</li></ul><blockquote><p>Mnemonic為數個變數的資訊，如下<br>Mnemonic:  spider level team helmet shaft clarify abuse recipe stem ankle angry fee</p></blockquote><p>執行 <code>truffle compile</code> 會看到 .sol檔被編譯</p><h3 id="Migration"><a href="#Migration" class="headerlink" title="Migration"></a>Migration</h3><p>migrate.sol描述如何將合約的內容部署到鏈上，並且處理合約上state的更動。</p><p>在 <code>/migration</code> 檔案內：</p><ul><li>1_initial_migration.js：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入編譯合約的內容</span></span><br><span class="line"><span class="keyword">var</span> Migrations = artifacts.require(<span class="string">"./Migrations.sol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Migrations);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>透過該檔案可以追蹤後續contract的變化，已部署過的合約且沒有被修改就不用再被部署（不然又會消耗gas).</p><ul><li>2_deploy_contracts.js<br><span style="color:red">注意，這邊的命名開頭要編號，因為truffle進行migrate時會依據該編號而進行。</span></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Adoption = artifacts.require(<span class="string">"./Adoption.sol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Adoption);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在terminal執行 <code>truffle migrate</code> </p><p>會看到如下結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Using network &apos;development&apos;.</span><br><span class="line"></span><br><span class="line">Running migration: 1_initial_migration.js</span><br><span class="line">  Deploying Migrations...</span><br><span class="line">  Migrations: 0x75175eb116b36ff5fef15ebd15cbab01b50b50d1</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">Saving artifacts...</span><br><span class="line">Running migration: 2_deploy_contracts.js</span><br><span class="line">  Deploying Adoption...</span><br><span class="line">  Adoption: 0xb9f485451a945e65e48d9dd7fc5d759af0a89e21</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">Saving artifacts...</span><br></pre></td></tr></table></figure></p><p>若看到上述表面表示我們寫的第一隻 Adoption.sol的合約已經成功被部署到鏈上！</p><h2 id="為Smart-Contract寫測試"><a href="#為Smart-Contract寫測試" class="headerlink" title="為Smart Contract寫測試"></a>為Smart Contract寫測試</h2><p>我們可以用javascript或solidity寫測試，<br>不過本範例用solidity來寫。</p><hr><p>在 /test 目錄下創建 <code>TestAdoption.sol</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用truffle內建的檔案 </span></span><br><span class="line"><span class="comment">// Assert.sol用來做Unit test (判斷function input ?= output)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"truffle/Assert.sol"</span>;</span><br><span class="line"><span class="comment">// 當測試執行，truffle會在testrpc中測試該合約，</span></span><br><span class="line"><span class="comment">// 該DeployedAddresses用來取得被部署合約的address</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"truffle/DeployedAddresses.sol"</span>;</span><br><span class="line"><span class="comment">// 要被測試的合約</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"../contracts/Adoption.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract TestAdoption &#123;</span><br><span class="line">    Adoption adoption = Adoption(DeployedAddresses.Adoption());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Testing The adopt() Function</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testUserCanAdoptPet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 呼叫Adoption中的adopt方法</span></span><br><span class="line">      uint returnedId = adoption.adopt(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">      uint expected = <span class="number">8</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 判斷returnID 是否等於 expected的值</span></span><br><span class="line">      Assert.equal(returnedId, expected, <span class="string">"Adoption of pet ID 8 should be recorded."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Testing Retrieval of a Single Pet's Owner</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testGetAdopterAddressByPetId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 透過this取得目前合約的地址</span></span><br><span class="line">      address expected = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      address adopter = adoption.adopters(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">      Assert.equal(adopter, expected, <span class="string">"Owner of pet ID 8 should be recorded."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Testing Retrieval of All Pet Owners</span></span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">testGetAdopterAddressByPetIdInArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      address expected = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      address[<span class="number">16</span>] memory adopters = adoption.getAdopters();</span><br><span class="line"></span><br><span class="line">      Assert.equal(adopters[<span class="number">8</span>], expected, <span class="string">"Owner of pet ID 8 should be recorded."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行 <code>truffle test</code>  若看到以下畫面表示test通過<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Using network &apos;development&apos;.</span><br><span class="line"></span><br><span class="line">Compiling ./contracts/Adoption.sol...</span><br><span class="line">Compiling ./test/TestAdoption.sol...</span><br><span class="line">Compiling truffle/Assert.sol...</span><br><span class="line">Compiling truffle/DeployedAddresses.sol...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  TestAdoption</span><br><span class="line">    ✓ testUserCanAdoptPet (91ms)</span><br><span class="line">    ✓ testGetAdopterAddressByPetId (70ms)</span><br><span class="line">    ✓ testGetAdopterAddressByPetIdInArray (89ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  3 passing (670ms)</span><br></pre></td></tr></table></figure></p><h2 id="使用UI和Smart-Contract互動"><a href="#使用UI和Smart-Contract互動" class="headerlink" title="使用UI和Smart Contract互動"></a>使用UI和Smart Contract互動</h2><p>當解開truffle box的pet-shop，可以看到在 <code>/src</code>目錄底下<br>會有已經預設好的UI檔供練習用。</p><h3 id="使用Web3-js初始化前端環境"><a href="#使用Web3-js初始化前端環境" class="headerlink" title="使用Web3.js初始化前端環境"></a>使用Web3.js初始化前端環境</h3><p>Web3.js為用來和ethereum溝通的javascript library.<br>（而練習專案前端是使用jQuery)</p><p>在 <code>/src/js/app.js</code>檔案的內容改為以下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">App = &#123;</span><br><span class="line">  web3Provider: <span class="literal">null</span>,</span><br><span class="line">  contracts: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 載入寵物的資料</span></span><br><span class="line">    $.getJSON(<span class="string">'../pets.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> petsRow = $(<span class="string">'#petsRow'</span>);</span><br><span class="line">      <span class="keyword">var</span> petTemplate = $(<span class="string">'#petTemplate'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; data.length; i ++) &#123;</span><br><span class="line">        petTemplate.find(<span class="string">'.panel-title'</span>).text(data[i].name);</span><br><span class="line">        petTemplate.find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>, data[i].picture);</span><br><span class="line">        petTemplate.find(<span class="string">'.pet-breed'</span>).text(data[i].breed);</span><br><span class="line">        petTemplate.find(<span class="string">'.pet-age'</span>).text(data[i].age);</span><br><span class="line">        petTemplate.find(<span class="string">'.pet-location'</span>).text(data[i].location);</span><br><span class="line">        petTemplate.find(<span class="string">'.btn-adopt'</span>).attr(<span class="string">'data-id'</span>, data[i].id);</span><br><span class="line"></span><br><span class="line">        petsRow.append(petTemplate.html());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> App.initWeb3();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  initWeb3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化web3.js並且設置provider連接testrpc</span></span><br><span class="line">   </span><br><span class="line">     <span class="comment">// 如果偵測到有metamask注入在瀏覽器的web3 instance</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      App.web3Provider = web3.currentProvider;</span><br><span class="line">       <span class="comment">// 將currentProvider = metamask</span></span><br><span class="line">       <span class="comment">// </span></span><br><span class="line">      web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 若沒有metamask or mist等等之類的，</span></span><br><span class="line">      <span class="comment">// 那就用自己開啟testrpc當成是provider</span></span><br><span class="line">      App.web3Provider = <span class="keyword">new</span> web3.providers.HttpProvider(<span class="string">'http://localhost:8545'</span>);</span><br><span class="line">      web3 = <span class="keyword">new</span> Web3(App.web3Provider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> App.initContract();</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  initContract: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">   $.getJSON(<span class="string">'Adoption.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">   </span><br><span class="line">      <span class="comment">// 取得contract的artifact(Adoption.json) </span></span><br><span class="line">      <span class="comment">// 例如contract address, ABI (Application Binary Interface)：</span></span><br><span class="line">      <span class="comment">// 即如何使用contract的變數、函式等等</span></span><br><span class="line">      <span class="keyword">var</span> AdoptionArtifact = data;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// truffle提供`truffle-contract`來幫助我們監聽已經被migrate的contract</span></span><br><span class="line">      <span class="comment">// 並把contract的artifact傳給truffle-contract'，好讓我們可以跟合約溝通</span></span><br><span class="line">      App.contracts.Adoption = TruffleContract(AdoptionArtifact);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 為contract設置Provider(我們是用metamask)</span></span><br><span class="line">      App.contracts.Adoption.setProvider(App.web3Provider);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 從Adpotion.json的合約資料中，判斷寵物的是否已被認養並做標示</span></span><br><span class="line">      <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> App.bindEvents();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bindEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.btn-adopt'</span>, App.handleAdopt);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  handleAdopt: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> petId = <span class="built_in">parseInt</span>($(event.target).data(<span class="string">'id'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用web3來取得user's accounts</span></span><br><span class="line">    <span class="comment">// 這時metamask會跳出交易訊息出來</span></span><br><span class="line">    web3.eth.getAccounts(<span class="function"><span class="keyword">function</span>(<span class="params">error, accounts</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 選擇第一個accounts作為我們的用戶</span></span><br><span class="line">      <span class="keyword">var</span> account = accounts[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">      App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">        adoptionInstance = instance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在這裡要執行會花費gas的transaction</span></span><br><span class="line">        <span class="comment">// 取得認養用戶的account，以及點選欲認養的petId</span></span><br><span class="line">        <span class="keyword">return</span> adoptionInstance.adopt(petId, &#123;<span class="attr">from</span>: account&#125;);</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 若回傳結果正常執行markAdopted刷新UI上寵物認養中的狀態</span></span><br><span class="line">        <span class="keyword">return</span> App.markAdopted();</span><br><span class="line">      &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err.message);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  markAdopted: <span class="function"><span class="keyword">function</span>(<span class="params">adopters, account</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> adoptionInstance;</span><br><span class="line"></span><br><span class="line">    App.contracts.Adoption.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 取得Adpotion合約的內容</span></span><br><span class="line">      adoptionInstance = instance;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 呼叫合約中的getAdopters方法</span></span><br><span class="line">      <span class="comment">// 利用`call`可以直接讀取Blockchain上的資料，不用花費ether(gas)</span></span><br><span class="line">      <span class="keyword">return</span> adoptionInstance.getAdopters.call();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">adopters</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; adopters.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (adopters[i] !== <span class="string">'0x0000000000000000000000000000000000000000'</span>) &#123;</span><br><span class="line">          $(<span class="string">'.panel-pet'</span>).eq(i).find(<span class="string">'button'</span>).text(<span class="string">'Pending...'</span>).attr(<span class="string">'disabled'</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">window</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    App.init();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="在Chrome上和Dapp互動"><a href="#在Chrome上和Dapp互動" class="headerlink" title="在Chrome上和Dapp互動"></a>在Chrome上和Dapp互動</h2><p>安裝 <code>metamask</code>的擴充套件</p><p>長這樣：<br><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/37198612385/in/dateposted-public/" title="petshop_1" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4356/37198612385_95741b233a_o.png" width="300" style=" display: block;    margin: 0 auto;" alt="petshop_1"></a></p><p>由於我們要測試自己的Dapp，點選該圖左上角切換到自己開啟testrpc:8545的私有鏈</p><p>因為是初次登入，點選<code>I forgot my password</code></p><p>將一開始開啟testrpc 產生的 Mnemonic（數組變數名稱）貼到wallet seed.<br>Mnemonic:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spider level team helmet shaft clarify abuse recipe stem ankle angry fee</span><br></pre></td></tr></table></figure></p><p>(Warning：你的testrpc產生的Mnemonic變數組會跟上面的不一樣)</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/37026566092/in/dateposted-public/" title="petshop_2" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4440/37026566092_e498643295_o.png" width="300" alt="petshop_2" style="display:block; margin: 0px auto"></a></p><p>設置自己的新密碼，確認後點選<code>OK</code></p><p>進入後就會看到自己的第一筆account資訊了</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/37198612325/in/dateposted-public/" title="petshop_3" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4334/37198612325_b204dcfecd_o.png" width="300" alt="petshop_3" style="display:block; margin: 0px auto"></a></p><p>若有顯示帳戶表示成功與testrpc連接<br>(原本testrpc是預設100 ether，顯示出來不是100 ether的原因是因為<br>部署合約到自己的private blockchain也需要費用)</p><h2 id="安裝和設置lite-server啟動Dapp"><a href="#安裝和設置lite-server啟動Dapp" class="headerlink" title="安裝和設置lite-server啟動Dapp"></a>安裝和設置<code>lite-server</code>啟動Dapp</h2><p><code>lite-server</code>已經包含在pet-shop的box內</p><p>在 <code>bs-config.json</code>檔案中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &#123;</span><br><span class="line">    &quot;baseDir&quot;: [&quot;./src&quot;, &quot;./build/contracts&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>該設置告訴server要執行的基底目錄在哪。</p><p><code>./src</code>：前端的內容<br><code>./build/contracts</code>：放置合約的內容</p><p>在script檔中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;lite-server&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>設置 <code>&quot;dev&quot; : lite-server&quot;</code><br>方便我們可以直接在terminal下執行 <code>npm run dev</code> 來運行Dapp</p><p>運行成功後的樣子</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/37026566282/in/dateposted-public/" title="petshop_4" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4442/37026566282_eee8a73f05_o.png" width="2468" alt="petshop_4"></a></p><hr><p>若要進行認養：點選 <code>Adopt</code>按鈕</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/36800845780/in/dateposted-public/" title="petshop_5" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4348/36800845780_f0c66f0cdc_o.png" width="2020" alt="petshop_5"></a></p><p>點選<code>Sumit</code>後即完成認養的動作，並且把該認養的資訊透過合約掛到testrpc的鏈上，並在該寵物上狀態改成 <code>Pending...</code> （已認養）</p><p><a data-flickr-embed="true" href="https://www.flickr.com/photos/151390350@N07/37198612255/in/dateposted-public/" title="petshop_6" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4404/37198612255_5f2e75a536_o.png" width="200" alt="petshop_6" style="display:block; margin: 0px auto"></a></p><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><ul><li>將前端改成用Vue.js<br>可以考慮用以下package： Vue-Truffle-Webpack<br><a href="https://github.com/wilfreddenton/vue-truffle-webpack" target="_blank" rel="noopener">https://github.com/wilfreddenton/vue-truffle-webpack</a></li><li>顯示該隻狗被哪位用戶認養走</li><li>改成要付足夠的錢才能認養該隻狗</li></ul>]]></content>
      
      
      <categories>
          
          <category> Solidity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethereum </tag>
            
            <tag> Solidity </tag>
            
            <tag> Truffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo來記錄自己的學習並使用Material-flow主題</title>
      <link href="/2017/09/05/How_To_Use_Hexo/"/>
      <url>/2017/09/05/How_To_Use_Hexo/</url>
      
        <content type="html"><![CDATA[<p>如果要打造自己風格的Blog，那就不能錯過Hexo<br>Hexo是一套開源的架個人部落格的框架，</p><a id="more"></a><p>其優點如下：</p><ul><li>文章以markdown格式為主。</li><li>並且能一鍵部署在Github，公開給大家看。</li><li>有很多第三方的template theme來裝飾自己的Blog</li></ul><p>我目前這個Blog的主題是使用NextT囉</p><p>以下會詳細介紹怎麼用Hexo快速架站</p><h2 id="Hexo架設流程"><a href="#Hexo架設流程" class="headerlink" title="Hexo架設流程"></a>Hexo架設流程</h2><h3 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="初始化一個Hexo專案，並且運行之"><a href="#初始化一個Hexo專案，並且運行之" class="headerlink" title="初始化一個Hexo專案，並且運行之"></a>初始化一個Hexo專案，並且運行之</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用 hexo s -p 8080 </span></span><br><span class="line"><span class="comment">// 指定欲開啟的port number為多少</span></span><br></pre></td></tr></table></figure><p>可以看到新建立好的Blog長這樣</p><p>(X)</p><h3 id="新增一篇文章"><a href="#新增一篇文章" class="headerlink" title="新增一篇文章"></a>新增一篇文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>[layout]有以下幾種(default為 <code>post</code>)：</p><ul><li>post：就po一篇文章，文章都放置在 <code>source/_posts</code>中</li><li>page：建立獨立的頁面，例如建立<code>about</code>頁面</li><li>draft：發佈一篇草稿，如果要公開則下 <code>hexo publish [layout] &lt;title&gt;</code>，將草稿移動到 <code>source/_posts</code></li></ul><h3 id="佈署到自己的github"><a href="#佈署到自己的github" class="headerlink" title="佈署到自己的github"></a>佈署到自己的github</h3><p>安裝 hexo-deployer-git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>修改 <code>_config.yml</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git   </span><br><span class="line">  repo: &lt;repository url&gt; // 儲存庫（Repository）網址</span><br><span class="line">  branch: [branch] // 分支名稱</span><br><span class="line">  message: [message] // 自定提交訊息</span><br></pre></td></tr></table></figure></p><p>新增好文章後需要產生部署用靜態檔案<br>執行：<code>hexo generate</code></p><p>會產生<code>public</code>目錄</p><p>執行 <code>hexo deploy</code> 即可一鍵部署<code>public</code>目錄內容到github.io網站上</p><p><span style="color:red">注意：github上的repo命名要與你的帳號一樣，否則還得處理路徑問題</span></p><p>若要直接新增好文章後部署：<code>hexo generate --deploy</code></p><p>之後若要重新執行<code>hexo deploy</code>，請先用 <code>hexo clean</code>清除靜態頁面，然後在執行deploy.</p><hr><h2 id="使用Material-flow-來改造自己的Blog"><a href="#使用Material-flow-來改造自己的Blog" class="headerlink" title="使用Material-flow 來改造自己的Blog"></a>使用Material-flow 來改造自己的Blog</h2><p>詳情請看Material-flow 的Github上文件</p><p><a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="noopener">https://github.com/stkevintan/hexo-theme-material-flow</a></p><h3 id="修改自己的Description"><a href="#修改自己的Description" class="headerlink" title="修改自己的Description"></a>修改自己的Description</h3><p>在大頭貼下方的描述，<br>若要修改的話得到： <code>./theme/material-flow/layout/_widget/about.ejs</code>中修改！</p><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>若要對自己Blog做擴充都可以再參考Hexo以及NextT的官方文檔</p><p>Hexo官方連結：<a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">https://hexo.io/zh-tw/</a></p><p>如果對其他theme有興趣也可以參考這網站</p><p>Hexo官方主題：<a href="https://hexo.io/zh-tw/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/zh-tw/docs/writing.html</a><br>Hexo主題排名：<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">https://www.zhihu.com/question/24422335</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
