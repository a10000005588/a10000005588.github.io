<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>William&#39;s 隨手札記</title>
  
  <subtitle>Blog of William</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://a10000005588.github.io/"/>
  <updated>2020-11-08T05:01:19.326Z</updated>
  <id>http://a10000005588.github.io/</id>
  
  <author>
    <name>William L.K.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go new與make的介紹與差異 [Golang]</title>
    <link href="http://a10000005588.github.io/2020/11/08/Go-new%E8%88%87make%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E5%B7%AE%E7%95%B0/"/>
    <id>http://a10000005588.github.io/2020/11/08/Go-new與make的介紹與差異/</id>
    <published>2020-11-08T03:19:59.000Z</published>
    <updated>2020-11-08T05:01:19.326Z</updated>
    
    <content type="html"><![CDATA[<p>Golang中，<code>make</code>與<code>new</code>都是建構變數來使用</p><a id="more"></a><h2 id="new的介紹"><a href="#new的介紹" class="headerlink" title="new的介紹"></a>new的介紹</h2><p>new(T)會建構一個T型別的 “沒有名字” 的變數，以T的zeroed value來初始化T，且new(T) 回傳 “指向T的指標”</p><ul><li>若T是 string，那zeroed值為 <code>&quot;&quot;</code></li><li>若T是 int，那zeroed值為 <code>0</code></li><li>若T是 channel, func, map, slice，那zeroed值為 <code>nil</code></li></ul><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(<span class="keyword">int</span>) <span class="comment">// 宣告一個指向int不具名變數的`指標p`，`指標p`指向一個初始化的zeroed value為0</span></span><br><span class="line"></span><br><span class="line">fmt.Print(*p) <span class="comment">// 印出 0</span></span><br><span class="line"></span><br><span class="line">*p = <span class="number">2</span> <span class="comment">// 將不具名變數的值設置為2</span></span><br><span class="line"></span><br><span class="line">fmt.Print(*p) <span class="comment">// 印出 2</span></span><br></pre></td></tr></table></figure><p>其中new算是golang語法的簡寫，其中<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newInt</span><span class="params">()</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就等於下列寫法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newInt</span><span class="params">()</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> dummy <span class="keyword">int</span></span><br><span class="line">  <span class="keyword">return</span> &amp;dummy   <span class="comment">// 回傳dummy的指標</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="注意-謹慎操作new出來的map"><a href="#注意-謹慎操作new出來的map" class="headerlink" title="注意: 謹慎操作new出來的map"></a>注意: 謹慎操作new出來的map</h3><p>因為用<code>new</code>初始化的map會是 nil map，故以下操作會出現panic</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  book := <span class="built_in">new</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>) </span><br><span class="line">  <span class="comment">// 宣告一個指標叫做book, 指向一個map為index是string</span></span><br><span class="line">  <span class="comment">// 映射到string型態的book名稱</span></span><br><span class="line"></span><br><span class="line">  b := *book  <span class="comment">// 取得book指標所指向的map</span></span><br><span class="line">  b[<span class="string">"ISBN-001"</span>] = <span class="string">"go programming language"</span> <span class="comment">// panic: assignment to entry in nil map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述範例會出錯的原因是因為， b是一個nil map，沒有指向任何的記憶體位置，所以對一個nil值操作當然會冒出error</p><p>解法就得透過 <code>make</code> 方法為nil map分配確定的內存地址了</p><h3 id="new-不是-Keyword"><a href="#new-不是-Keyword" class="headerlink" title="new 不是 Keyword"></a><code>new</code> 不是 Keyword</h3><p>要注意一點是 <code>new</code> 並非是golang的關鍵字，故可以在func內重新宣告<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delta</span><span class="params">(old, <span class="built_in">new</span> <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">new</span> - old</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="make的介紹"><a href="#make的介紹" class="headerlink" title="make的介紹"></a>make的介紹</h2><ul><li><code>make(T, args)</code>用來為 <code>slices</code>, <code>maps</code>, 以及 <code>channel</code>分配其記憶體位址的空間與初始化值，並回傳一個型態<code>T</code>的參考！</li><li>make不會回傳指標！</li></ul><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  books := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">100</span>) <span class="comment">// 初始化長度為100的book字串陣列，每個array內的值都是 ""</span></span><br><span class="line">  </span><br><span class="line">  receiver := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// 初始化channel，但不會回傳指標</span></span><br><span class="line">  booksMapper := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於<code>make</code>回傳的是參考，所以若將make宣告的<code>s2</code> 傳給func <code>modifySlice</code>對<code>s2</code>做修改時，也會影響<code>s2</code>的內容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%#v"</span>, s2) <span class="comment">// s2為 []int&#123;0, 0, 0&#125;</span></span><br><span class="line">modifySlice(s2)</span><br><span class="line">fmt.Printf(<span class="string">"%#v"</span>, s2) <span class="comment">// s2被modifySlice()方法給變成 []int&#123;1, 0, 0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="new與make的差異"><a href="#new與make的差異" class="headerlink" title="new與make的差異"></a>new與make的差異</h2><ul><li>new會回傳指標，但是初始化的值為zeroed value，特別是在對map做初始化時，其zeroed valued為 <code>nil</code>，意思就是不會分配其記憶體位置</li><li>make只能用來對特別型態(如map, slice, func, channle)分配其記憶體內存地址，以及為這些特殊型態設定該初始值 (string就是””, int為0)</li></ul><p>所以若要傳指標時，就需要考慮用<code>new</code>，而非是<code>make</code>了</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>golang 筆記：make 與 new 的差別 by 愷開<ul><li><a href="https://medium.com/d-d-mag/golang-%E7%AD%86%E8%A8%98-make-%E8%88%87-new-%E7%9A%84%E5%B7%AE%E5%88%A5-68b05c7ce016" target="_blank" rel="noopener">https://medium.com/d-d-mag/golang-%E7%AD%86%E8%A8%98-make-%E8%88%87-new-%E7%9A%84%E5%B7%AE%E5%88%A5-68b05c7ce016</a></li></ul></li><li>Allocation with make<ul><li><a href="https://golang.org/doc/effective_go.html#allocation_make" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#allocation_make</a></li></ul></li><li>Allocation with new<ul><li><a href="https://golang.org/doc/effective_go.html#allocation_new" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#allocation_new</a></li></ul></li><li>The Go Programming Language, Author: Alan A. A. Donovan, Brian W. Kernighan</li><li>不要向nil map写入(panic: assignment to entry in nil map) #7<ul><li><a href="https://github.com/kevinyan815/gocookbook/issues/7" target="_blank" rel="noopener">https://github.com/kevinyan815/gocookbook/issues/7</a></li></ul></li><li>理解 Go make 和 new 的区别 by 三月沙<ul><li><a href="https://sanyuesha.com/2017/07/26/go-make-and-new/" target="_blank" rel="noopener">https://sanyuesha.com/2017/07/26/go-make-and-new/</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Golang中，&lt;code&gt;make&lt;/code&gt;與&lt;code&gt;new&lt;/code&gt;都是建構變數來使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="http://a10000005588.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go Module 入門與使用介紹</title>
    <link href="http://a10000005588.github.io/2020/11/07/Go-Module-%E5%85%A5%E9%96%80%E8%88%87%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%B4%B9%E4%BB%8B%E7%B4%B9/"/>
    <id>http://a10000005588.github.io/2020/11/07/Go-Module-入門與使用介紹介紹/</id>
    <published>2020-11-07T14:46:02.000Z</published>
    <updated>2020-11-08T05:28:19.625Z</updated>
    
    <content type="html"><![CDATA[<p>Go Module 為目前最主流的依賴解決的方案</p><p>發佈於 Go 11.1版，於Go 1.14推薦在Production環境上使用</p><a id="more"></a><p>Go Modules的出現解決了以下幾點爭議：</p><ul><li>依賴問題</li><li>淘汰GOPATH的機制</li><li>統一社群中其他依賴管理工具</li></ul><h2 id="為何-GOPATH-不在被推薦使用"><a href="#為何-GOPATH-不在被推薦使用" class="headerlink" title="為何 GOPATH 不在被推薦使用"></a>為何 GOPATH 不在被推薦使用</h2><h3 id="簡單介紹"><a href="#簡單介紹" class="headerlink" title="簡單介紹"></a>簡單介紹</h3><p>GOPATH原先是透過定義好的目錄結構如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line">|--bin</span><br><span class="line">|--pkg</span><br><span class="line">|--src</span><br><span class="line">    |--github.com</span><br><span class="line">    |--golang.org</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>各目錄分別為：</p><ul><li>bin: 儲存所編譯產生的二進位檔案</li><li>pkg: 儲存預先編譯的目的檔案，以加快程式的後續編譯速度</li><li>src: 儲存所有 .go 檔案或原始程式碼<ul><li>一般會以 <code>$GOPATH/src/github.com/</code> 儲存 Go的應用程式和函式庫</li></ul></li></ul><h3 id="棄用原因-無法明確定義與參照依賴-Dependency-的版本"><a href="#棄用原因-無法明確定義與參照依賴-Dependency-的版本" class="headerlink" title="棄用原因: 無法明確定義與參照依賴(Dependency)的版本"></a>棄用原因: 無法明確定義與參照依賴(Dependency)的版本</h3><p>因為<code>.go</code> 專案都必須要儲存在 <code>$GOPATH/src</code> 底下，但該依賴管理方式並沒有提供版本控制的概念，會造成以下問題：</p><ol><li>執行<code>go get</code> 取得遠端的依賴包時，會無法得知目前所載的版本</li><li>無法處理 v1,v2,v3等不同版本的參考問題，假設有的Library叫做 <code>/foo/bar</code> 但不管幾版，都會在GOPATH底下，其路徑都會是一樣的 (都在github.com/foo/bar)</li></ol><h2 id="Go-modules的基本使用方式"><a href="#Go-modules的基本使用方式" class="headerlink" title="Go modules的基本使用方式"></a>Go modules的基本使用方式</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><code>go mod init</code>: 產生 go.mod 檔案</li><li><code>go mod download</code>: 下載go.mod檔案中指明的所有依賴</li><li><code>go mod tidy</code>: 整理所有依賴</li><li><code>go mod graph</code>: 檢視現有的依賴結構</li><li><code>go mod edit</code>: 編輯 go.mod 檔案</li><li><code>go mod vendor</code>: 會出專案所有的依賴到vendor目錄</li><li><code>go mod verify</code>: 驗證一個模組是否被竄改過</li><li><code>go mod why</code>: 檢視為何需要依賴該模組</li></ul><h3 id="環境變數"><a href="#環境變數" class="headerlink" title="環境變數"></a>環境變數</h3><p>可透過 <code>go env</code> 來檢視常用的環境變數，以下為與Go Module相關的環境變數</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> GOMODULES新增的環境變數</span><br><span class="line">GO111MODULE="on"</span><br><span class="line">GOPROXY="https://proxy.golang.org,direct"</span><br><span class="line">GONOPROXY=""</span><br><span class="line">GOSUMDB="sum.golang.org"</span><br><span class="line">GONOSUMDB=""</span><br><span class="line">GOPRIVATE=""</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 以下為原本GOPATH就有的環境變數</span><br><span class="line">GOARCH="amd64"</span><br><span class="line">GOBIN="/Users/user/go/bin"</span><br><span class="line">GOCACHE="/Users/user/Library/Caches/go-build"</span><br><span class="line">GOENV="/Users/user/Library/Application Support/go/env"</span><br><span class="line">GOEXE=""</span><br><span class="line">GOFLAGS=""</span><br><span class="line">GOHOSTARCH="amd64"</span><br><span class="line">GOHOSTOS="darwin"</span><br><span class="line">GOINSECURE=""</span><br><span class="line">GOMODCACHE="/Users/user/go/pkg/mod"</span><br><span class="line">GOOS="darwin"</span><br><span class="line">GOPATH="/Users/user/go"</span><br><span class="line">GOROOT="/usr/local/Cellar/go/1.15/libexec"</span><br><span class="line">GOTMPDIR=""</span><br><span class="line">GOTOOLDIR="/usr/local/Cellar/go/1.15/libexec/pkg/tool/darwin_amd64"</span><br><span class="line">GCCGO="gccgo"</span><br><span class="line">AR="ar"</span><br><span class="line">CC="clang"</span><br><span class="line">CXX="clang++"</span><br><span class="line">CGO_ENABLED="1"</span><br><span class="line">GOMOD="/dev/null"</span><br><span class="line">CGO_CFLAGS="-g -O2"</span><br><span class="line">CGO_CPPFLAGS=""</span><br><span class="line">CGO_CXXFLAGS="-g -O2"</span><br><span class="line">CGO_FFLAGS="-g -O2"</span><br><span class="line">CGO_LDFLAGS="-g -O2"</span><br><span class="line">PKG_CONFIG="pkg-config"</span><br><span class="line">GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/3t/8jsg2cz52yn2glq8rk_9y7x40000gn/T/go-build233814295=/tmp/go-build -gno-record-gcc-switches -fno-common"</span><br></pre></td></tr></table></figure><h4 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h4><p>透過GO111MODULE作為該專案是否使用 Go modules的開關，可設定以下內容</p><ul><li>auto: 只要專案包含 <code>go.mod</code> 檔案，就使用Go modules (在Go 1.11~1.14，為預設)</li><li>on: 啟用Go modules (推薦使用)</li><li>off: 禁用Go modules</li></ul><div style="border-radius: 10px;padding: 20px;background-color: #C8FAFF;color: black;margin-bottom: 15px;"><br>為何叫做 GO111MODULE?<br><br>因為go modules是在 go1.11版本所提出的<br></div><h4 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h4><p>設定GO模組的proxy, 使Go在後續拉取模組的版本時，直接透過映像檔網站快速拉取，而非到Github這種Version control service平台</p><p>GOPROXY預設值為 <code>https://proxy.golang.org,direct</code>，透過逗號將代理的地方給隔開</p><p>若不想使用GOPROXY, 可設置為 GOPROXY=”off”</p><p>其中最後有 <code>direct</code> 一詞的用意是，若前面的proxy值都沒辦法載到<br>模組，例如在 <code>https://proxy.golang.org</code>抓不到，那麼就會回到原位置(例如Github)去下載</p><h4 id="GOSUMDB"><a href="#GOSUMDB" class="headerlink" title="GOSUMDB"></a>GOSUMDB</h4><p>GOSUMDB為Go checksum database，驗證拉取的模組版本資料未經過竄改</p><p>預設值為 <code>sum.golang.org</code>，也可設置成 <code>off</code>，禁止Go在後續操作中做驗證版本的動作</p><h4 id="GONOPROXY-GONOSUMDB-GOPRIVATE"><a href="#GONOPROXY-GONOSUMDB-GOPRIVATE" class="headerlink" title="GONOPROXY/GONOSUMDB/GOPRIVATE"></a>GONOPROXY/GONOSUMDB/GOPRIVATE</h4><p>設定私有模組的環境變數，一般來說建議直接設定 GONOPROXY，會作為 GONOPROXY與GONOSUMDB的預設值</p><p>值可設定多組，例如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go env -w GOPRIVATE="git.xxx.com,github.com/eddycjy/mquote"</span><br></pre></td></tr></table></figure></p><p>設定之後字首為 <code>git.xxx.com</code> 以及 <code>github.com/eddycjy/mquote</code> 的模組會被認為是私有模組</p><p>也可以直接用設定 <code>*</code>，以下表示來自<code>.example.com</code> 的子域名的都表示來自私有倉庫</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go env -w GOPRIVATE="*.example.com"</span><br></pre></td></tr></table></figure><h3 id="啟用方式"><a href="#啟用方式" class="headerlink" title="啟用方式"></a>啟用方式</h3><p>Go modules預設不是開啟的，透過<code>GO111MODULE</code>來做設定，可用<code>auto</code>, <code>on</code>, <code>off</code>做設定</p><p>透過env進行設定 <code>go env -w</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></p><h3 id="初始化一個專案"><a href="#初始化一個專案" class="headerlink" title="初始化一個專案"></a>初始化一個專案</h3><p>在一個資料夾內，透過 <code>go mod init</code> 初始化一個專案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go mod init github.com/jellyhola/module-repo</span><br><span class="line">go: creating new go.mod: module github.com/jellyhola/module-repo</span><br></pre></td></tr></table></figure><p>這時會產生一個 <code>go.mod</code> 檔案，會紀錄目前專案模組為 <code>github.com/jellyhola/module-repo</code>，go版本為<code>1.15</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/jellyhola/module-repo</span><br><span class="line"></span><br><span class="line">go 1.15</span><br></pre></td></tr></table></figure></p><p>這時定義一份 <code>main.go</code> 檔案，import <code>github.com/example/hello</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"rsc.io/quote"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">Hello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hello :print quote.Hello()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> quote.Hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這時專案目錄會自動產生 <code>go.sum</code>檔案, 以及<code>go.mod</code>會多紀錄使用了 <code>rsc.io/quote</code>模組以及使用的版本為 <code>1.5.2</code></p><p>go.sum<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:qgOY6WgZOaTkIIMiVjBQcw93ERBE4m30iBm00nkL0i8=</span><br><span class="line">golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=</span><br><span class="line">rsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y=</span><br><span class="line">rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=</span><br><span class="line">rsc.io/sampler v1.3.0 h1:7uVkIFmeBqHfdjD+gZwtXXI+RODJ2Wc4O7MPEh/QiW4=</span><br><span class="line">rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=</span><br></pre></td></tr></table></figure></p><p>go.mod<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module github.com/jellyhola/module-repo</span><br><span class="line"></span><br><span class="line">go 1.15</span><br><span class="line"></span><br><span class="line">require rsc.io/quote v1.5.2</span><br></pre></td></tr></table></figure></p><div style="border-radius: 10px;padding: 20px;background-color: #C8FAFF;color: black;margin-bottom: 15px;"><br><br>建議將 go.sum與go.mod這兩個檔案提交到版本控制<br><br></div><p>由於本身<code>rsc.io/quote</code>這個模組，下載go時就已經安裝完畢，故不用透過 <code>go get</code>來額外下載</p><p>接著可用<code>go list -m all</code> 檢視目前專案所使用的依賴</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go list -m all</span><br><span class="line">github.com/jellyhola/module-repo</span><br><span class="line">golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c</span><br><span class="line">rsc.io/quote v1.5.2</span><br><span class="line">rsc.io/sampler v1.3.0</span><br></pre></td></tr></table></figure><p>可看到目前 <code>golang.org/x/text</code>這項模組，為untagged的狀況，接著可以透過 <code>go get</code>來更新此模組到最新的tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go get golang.org/x/text</span><br><span class="line">go: golang.org/x/text upgrade =&gt; v0.3.4</span><br><span class="line">go: downloading golang.org/x/text v0.3.4</span><br></pre></td></tr></table></figure><p>可看到 go.mod內容改變了<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module github.com/jellyhola/module-repo</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.15</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">golang.org/x/text v0<span class="number">.3</span><span class="number">.4</span> <span class="comment">// indirect</span></span><br><span class="line">rsc.io/quote v1<span class="number">.5</span><span class="number">.2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>其中 <code>// indirect</code> 表示該模組為間接依賴，表示目前應用程式的import敘述中，並沒有發現這模組的明確參考，有可能是</p><ul><li>事先手動go get拉取下來的模組</li><li>該專案所依賴模組之所依賴的</li></ul><p>試著跑一下專案，驗證模組是否能正常運作</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go run main.go</span><br><span class="line">你好，世界。%</span><br></pre></td></tr></table></figure><h3 id="拉取的模組會存在哪？"><a href="#拉取的模組會存在哪？" class="headerlink" title="拉取的模組會存在哪？"></a>拉取的模組會存在哪？</h3><p>go mod會將拉取的模組放置在 <code>$GOPATH/pkg/mod</code> 與 <code>$GOPATH/pkg/sumdb</code> 目錄下！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ls $GOPATH/pkg</span><br><span class="line">cache      github.com golang.org  rsc.io</span><br></pre></td></tr></table></figure><p>若想要清除已經快取的模組版本，使用 <code>go clean -modcache</code> 指令</p><h2 id="Go-module-進階探討"><a href="#Go-module-進階探討" class="headerlink" title="Go module 進階探討"></a>Go module 進階探討</h2><h3 id="Go-modules的go-get探討"><a href="#Go-modules的go-get探討" class="headerlink" title="Go modules的go get探討"></a>Go modules的go get探討</h3><p>使用go get取得模組時，會分別進行3個步驟</p><ol><li>finding: 查找模組是否存在</li><li>downloading: 進行下載</li><li>extracting: 分析下載的模組的雜湊值是否正確</li></ol><p>像上一節所拉取的模組 <code>golang.org/x/text</code> 其拉取的資訊如下</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">版本資訊-commit的時間-雜湊值</span><br><span class="line">v0.0.0-20170915032832-14c0d48ead0c</span><br></pre></td></tr></table></figure><ul><li>commit的時間會是以UTC時區為準</li><li>go get拉取的指令若沒有指定版本，會直接拉取到 v0.0.0版</li></ul><h3 id="go-get行為"><a href="#go-get行為" class="headerlink" title="go get行為"></a>go get行為</h3><ul><li>go get: 直接拉取dependency，只會更新指定的他自己</li><li>go get -u: 更新現有的dependency，會強制更新該denpendency所依賴的其他模組</li><li>go get -u -t: 更新所有denpendency，以及包含單元測試使用到的</li></ul><h3 id="go-get版本指定"><a href="#go-get版本指定" class="headerlink" title="go get版本指定"></a>go get版本指定</h3><ul><li>go get golang.org/x/text@latest : 拉取最新的版本，若存在tag，優先使用之</li><li>go get golang.org/x/text@master : 拉取master分支的最新commit</li><li>go get <a href="mailto:golang.org/x/text@v0.3.2" target="_blank" rel="noopener">golang.org/x/text@v0.3.2</a> : 拉取tag為v0.3.2的commit</li><li>go get golang.org/x/text@342b2e : 拉取hash為342b2e的commit，最後轉為 v0.3.2</li></ul><h2 id="Go-modules的go-run與go-build"><a href="#Go-modules的go-run與go-build" class="headerlink" title="Go modules的go run與go build"></a>Go modules的go run與go build</h2><p>執行go build時，會根據go.mod自動下載該專案所需的模組，才進行編譯</p><div style="border-radius: 10px;padding: 20px;background-color: #FFF6C8;color: black;margin-bottom: 15px;"><br><br>若是要使用 vendor目錄作為denpendency, 在執行 go mod vendor產生vendor目錄後，需要執行 go build -mod=vendor<br>才可使用 go build -mod=vendor 使用vendor目錄作為denpendency來編譯<br><br></div><h2 id="Go-modules匯入路徑說明"><a href="#Go-modules匯入路徑說明" class="headerlink" title="Go modules匯入路徑說明"></a>Go modules匯入路徑說明</h2><p>Go modules在主版本編號為 v0與v1的情況會省略其編號，在v2以上則需要明確指定！</p><p>假如要匯入 v2以上的<a href="mailto:golang.org/example@v2.0.0" target="_blank" rel="noopener">golang.org/example@v2.0.0</a>，則必須要在import底下明確指定v2</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/example/v2"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="為何省略v0與v1"><a href="#為何省略v0與v1" class="headerlink" title="為何省略v0與v1??"></a>為何省略v0與v1??</h3><p>因為官方鼓勵開發人員將模組建立到v1版本就不在變動。</p><p>所以若開發人員在發佈v2版本時，會被擁有明確的v1版本尾綴，近一步導致v1版本變成雜訊且沒有什麼意義</p><p>在匯入路徑忽略v0版本，因為根據語意化版本標準，v0的這些版本大多沒有相容性保證</p><h2 id="Go-modules-語意化版本控制"><a href="#Go-modules-語意化版本控制" class="headerlink" title="Go modules 語意化版本控制"></a>Go modules 語意化版本控制</h2><p>一個go modules的版本資訊如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//主版本號.次版本號.修訂號</span><br><span class="line">v1.2.3</span><br></pre></td></tr></table></figure></p><ul><li>主版本編號：做了不相容的API修改之類的</li><li>次版本編號: 做了向下相容的功能性新增</li><li>修訂好: 向下相容的功能除錯</li></ul><p>若是先行版本的話，那加上 <code>pre</code> 後綴<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.2.3-pre</span><br></pre></td></tr></table></figure></p><div style="border-radius: 10px;padding: 20px;background-color: #FFF6C8;color: black;margin-bottom: 15px;"><br><br>發佈新版本時應遵循語意化版本規則，否則無法被go get所拉取<br><br></div><h2 id="go-list的功能"><a href="#go-list的功能" class="headerlink" title="go list的功能"></a>go list的功能</h2><p>提供該專案所有denpendency的資訊</p><p>透過 <code>go list -m -u all</code> 可以檢視所有的dependency資訊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go list -m -u all</span><br><span class="line">github.com/jellyhola/module-repo</span><br><span class="line">golang.org/x/text v0.3.4</span><br><span class="line">golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e</span><br><span class="line">rsc.io/quote v1.5.2</span><br><span class="line">rsc.io/sampler v1.3.0</span><br></pre></td></tr></table></figure><ul><li>-m: 顯示所有依賴的模組</li><li>-u: 顯示能夠升級的版本</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go Module 為目前最主流的依賴解決的方案&lt;/p&gt;
&lt;p&gt;發佈於 Go 11.1版，於Go 1.14推薦在Production環境上使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="http://a10000005588.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook的使用紀錄</title>
    <link href="http://a10000005588.github.io/2020/10/04/gitbook-tutorial/"/>
    <id>http://a10000005588.github.io/2020/10/04/gitbook-tutorial/</id>
    <published>2020-10-03T22:47:21.000Z</published>
    <updated>2020-10-03T23:52:06.630Z</updated>
    
    <content type="html"><![CDATA[<p>Gitbook提供了能夠將markdown格式轉寫成一本電子書的樣子</p><a id="more"></a><h2 id="本地端執行"><a href="#本地端執行" class="headerlink" title="本地端執行"></a>本地端執行</h2><p>安裝方式，用 <a href="https://www.npmjs.com/package/gitbook" target="_blank" rel="noopener">npm</a> 安裝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>找一個資料夾，執行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure></p><p>會產生 </p><ul><li>reamdme.md<ul><li>介紹本書內容</li></ul></li><li>summary.md<ul><li>用來定義gitbook目錄</li></ul></li></ul><h4 id="summary-md-結構"><a href="#summary-md-結構" class="headerlink" title="summary.md 結構"></a>summary.md 結構</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* ch1</span><br><span class="line">  * ch1-1</span><br><span class="line">  * ch1-2</span><br></pre></td></tr></table></figure><p>檔案結構的話就長這樣<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- ch1</span><br><span class="line">|- ch1-1</span><br><span class="line">|- ch1-2</span><br><span class="line">-readme.md</span><br><span class="line">-summary.md</span><br></pre></td></tr></table></figure></p><h2 id="運行gitbook"><a href="#運行gitbook" class="headerlink" title="運行gitbook"></a>運行gitbook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p>預設會運行在 <a href="http://localhost:4000" target="_blank" rel="noopener">localhost:4000</a></p><h3 id="安裝Plugin"><a href="#安裝Plugin" class="headerlink" title="安裝Plugin"></a>安裝Plugin</h3><p>事先安裝gitbook-plugin套件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-plugin</span><br></pre></td></tr></table></figure></p><p>若要安裝留言板等套件，需要先定義 book.json ，可以定義使用的plugin</p><p>book.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;disqus&quot;],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;disqus&quot;: &#123;</span><br><span class="line">      &quot;shortName&quot;: &quot;你的留言板名稱&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如可使用 Google Analytics ( Google 分析 )、Disqus ( 社群&amp;留言板 ) 和 youtube …等外掛，也可以在Gitbook npm網站中找到自己要的plugin</p><p>定義玩使用的plungin外掛，請執行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install</span><br></pre></td></tr></table></figure></p><h3 id="Disqus留言板"><a href="#Disqus留言板" class="headerlink" title="Disqus留言板"></a>Disqus留言板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gitbook-plugin-disqus</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;disqus&quot;],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;disqus&quot;: &#123;</span><br><span class="line">      &quot;shortName&quot;: &quot;你的留言板名稱&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="內容綱要-InTopic-TOC"><a href="#內容綱要-InTopic-TOC" class="headerlink" title="內容綱要 InTopic TOC"></a>內容綱要 InTopic TOC</h3><p>如果要實現右邊側邊欄本頁md檔案的階層式，可安裝 InTopic TOC</p><p><a href="https://github.com/fzankl/gitbook-plugin-intopic-toc" target="_blank" rel="noopener">GitBook plugin: InTopic TOC</a></p><p>於book.json中定義<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;intopic-toc&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;pluginsConfig&quot;: &#123;</span><br><span class="line">    &quot;intopic-toc&quot;: &#123;</span><br><span class="line">      &quot;label&quot;: &quot;In this article&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接著執行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install</span><br></pre></td></tr></table></figure></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="noopener">Gitbook Github Docs</a></p><p><a href="https://docs.gitbook.com/getting-started/quick-start" target="_blank" rel="noopener">Gitbook Online Platform Docs</a></p><p><a href="https://www.oxxostudio.tw/articles/201502/gitbook.html" target="_blank" rel="noopener">用 GitBook 來寫本書吧</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gitbook提供了能夠將markdown格式轉寫成一本電子書的樣子&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tool" scheme="http://a10000005588.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Static 與 Shared Libraries的介紹與差異</title>
    <link href="http://a10000005588.github.io/2020/08/17/Static_vs_Shared_Lib/"/>
    <id>http://a10000005588.github.io/2020/08/17/Static_vs_Shared_Lib/</id>
    <published>2020-08-17T13:38:37.000Z</published>
    <updated>2020-08-17T13:59:07.281Z</updated>
    
    <content type="html"><![CDATA[<p>剛好在複習Golang的時候看到Go有支援載入C Language的Static Library與Shared Libraries，於是來複習一下他們之間的差異</p><a id="more"></a><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>首先要先了解，Library的意義，就單純為一個檔案<br>將會共用的程式碼打包再一起的檔案就稱為Library</p><p>假設現在若要使用print這個方法來印出東西在螢幕，<br>故可以將print編譯成Library，供各個開發者直接使用，不用讓開發者自己定義print方法，要煩惱如何與OS溝通並印出畫面的邏輯程式碼</p><h3 id="Static-Library"><a href="#Static-Library" class="headerlink" title="Static Library"></a>Static Library</h3><p>Static Libarary通常為我們自己寫好的程式碼，經過Compile之後，所得到的就是 Static Library</p><p>Shared則是我們也是將程式碼經過Compile，也是得到 Shared Library</p><p>聽起來過程都很像，那到底差異在哪？</p><p>其實從字面上曉得，從使用其意義來解釋</p><p>在專案程式使用其Static Library時，該專案進行Compile，Compiler會在Compile Time時將Static Library的程式碼給”複製”到專案程式碼中。</p><p>假如我們Static Lib中有個<code>print()</code>方法，那專案Compile時就會把<code>print()</code>方法copy到APP中，APP啟動時就會有<code>print()</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE (import static lib) -&gt; Compiled STATIC Lib</span><br><span class="line">APP 啟動 -&gt; PRINT()</span><br></pre></td></tr></table></figure><h3 id="Shared-Library"><a href="#Shared-Library" class="headerlink" title="Shared Library"></a>Shared Library</h3><p>顧名思義就是直接共享Library內的程式碼</p><p>當專案使用的是Shared Library，那專案進行Compile時，Compiler會去<code>Link</code> Shared Libaray的方法，而不是用複製的。</p><p>假如Shared Library Lib中同樣有個<code>print()</code>方法，那專案Compile就會連結該Shared Lib中的<code>print()</code>方法，於是APP啟動也同樣會有<code>print()</code>方法可使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE (import shared lib) -&gt; Compiled</span><br><span class="line">APP 啟動 -&gt; 連結使用 Shared Lib內的 print()</span><br></pre></td></tr></table></figure><blockquote><p>Shared Library支援動態連結載入</p></blockquote><h2 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h2><p>若要給客戶提供一個有100個功能的APP</p><p>交付給客戶的若是 Static Library建築出的APP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客戶聽著，你只要有這一個檔案，就包含了你需要的100個功能</span><br></pre></td></tr></table></figure><p>若交付給客戶的功能，每一隻功能都用Shared Library實作，那麼。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客戶聽著，我這個檔案很小，但同時要連結100的檔案 (Shared Library)，一個都不能少，才能啟動</span><br></pre></td></tr></table></figure><h2 id="優缺點"><a href="#優缺點" class="headerlink" title="優缺點"></a>優缺點</h2><table><thead><tr><th></th><th>Static</th><th>Shared</th></tr></thead><tbody><tr><td>專案大小</td><td>專案size比較肥大</td><td>專案的size較小</td></tr><tr><td>啟動狀況</td><td>程式碼在Compile時都放在一起了，直接運行該專案就好</td><td>若某個Shared Lib不見，專案會無法啟動</td></tr><tr><td>是否支援動態連結</td><td>無，專案運作時較耗費記憶體</td><td>有支援，當執行到有使用Shared Library的class時，才會載入之到記憶體，避免記憶體空間浪費</td></tr></tbody></table><h2 id="Library編譯的檔案格式"><a href="#Library編譯的檔案格式" class="headerlink" title="Library編譯的檔案格式"></a>Library編譯的檔案格式</h2><ul><li><p>Shared Libraries</p><ul><li>.so (Linus)</li><li>.dll (Win)</li><li>.dylib (Mac)</li></ul></li><li><p>Static Libraries</p><ul><li>.a</li><li>.lib</li></ul></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>Static vs. Shared Libraries<br><a href="https://www.youtube.com/watch?v=-vp9cFQCQCo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=-vp9cFQCQCo</a></p><p>Static 與 Shared 的函式庫撰寫<br><a href="https://fred-zone.blogspot.com/2006/03/static-shared.html" target="_blank" rel="noopener">https://fred-zone.blogspot.com/2006/03/static-shared.html</a></p><p>動態連結函式庫<br><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;剛好在複習Golang的時候看到Go有支援載入C Language的Static Library與Shared Libraries，於是來複習一下他們之間的差異&lt;/p&gt;
    
    </summary>
    
    
      <category term="Computer Science" scheme="http://a10000005588.github.io/tags/Computer-Science/"/>
    
  </entry>
  
  <entry>
    <title>State Pattern 狀態模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/08/08/Design-Pattern-Java-State-Pattern-%E7%8B%80%E6%85%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/08/08/Design-Pattern-Java-State-Pattern-狀態模式/</id>
    <published>2020-08-08T14:10:35.000Z</published>
    <updated>2020-08-30T13:30:11.170Z</updated>
    
    <content type="html"><![CDATA[<p>透過統一的”狀態類別”，來定義物件的內部狀態是如何</p><a id="more"></a><h2 id="以糖果機為例子，沒有使用State-Pattern的狀況"><a href="#以糖果機為例子，沒有使用State-Pattern的狀況" class="headerlink" title="以糖果機為例子，沒有使用State Pattern的狀況"></a>以糖果機為例子，沒有使用State Pattern的狀況</h2><p>我們現在有個糖果機，通常一台糖果機可以進行投幣，轉動手把，並吐出一顆糖果</p><p>所以該糖果機共有四種狀態 (NoCoinState目前沒有錢幣, HasCoinState目前有錢幣, SoldCandyState售出糖果中, NoCandyState沒有糖果中)，如附圖所示：</p><p><img src="https://i.imgur.com/ulduLlN.png" alt=""></p><p>我們會很直覺的定義糖果機類別與這四個狀態為全域變數，並且實作一下糖果機具備的動作方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CandyMachine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NoCandyState = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NoCoinState = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> HasCoinState = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> SoldCandyState = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> state = NoCandyState; <span class="comment">// 一開始糖果機是沒有糖果的</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 糖果數目</span></span><br><span class="line"></span><br><span class="line">    CandyMachine(<span class="keyword">int</span> count) &#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.state = NoCoinState; <span class="comment">// 有了糖果，等待被投錢</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"投入錢幣"</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = HasCoinState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"轉動把手中......"</span>);</span><br><span class="line">        <span class="comment">// 判斷目前是否有錢</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state == HasCoinState) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = SoldCandyState;</span><br><span class="line">           <span class="keyword">this</span>.dispense();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"目前沒有錢幣"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有錢的話就吐一顆糖果出來</span></span><br><span class="line">        System.out.println(<span class="string">"糖果機吐了一顆糖果"</span>);</span><br><span class="line">        <span class="keyword">this</span>.count--;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 沒有糖果了，回歸到沒糖果狀態</span></span><br><span class="line">            <span class="keyword">this</span>.state = NoCandyState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 還有糖果的話，顯示目前沒有錢幣</span></span><br><span class="line">            <span class="keyword">this</span>.state = NoCoinState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我們現在可以來跟糖果機互動一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CandyMachine candyMachine = <span class="keyword">new</span> CandyMachine(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先投錢，在轉動</span></span><br><span class="line">        System.out.println(<span class="string">"====先投錢，在轉動===="</span>);</span><br><span class="line">        candyMachine.insertCoin();</span><br><span class="line">        candyMachine.turnCrank();</span><br><span class="line">        <span class="comment">// 不投錢，直接轉動</span></span><br><span class="line">        System.out.println(<span class="string">"====不投錢，直接轉動===="</span>);</span><br><span class="line">        candyMachine.turnCrank();</span><br><span class="line">        <span class="comment">// 投錢，但糖果機目前沒糖果了</span></span><br><span class="line">        System.out.println(<span class="string">"=====投錢，但糖果機目前沒糖果了===="</span>);</span><br><span class="line">        candyMachine.insertCoin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">====先投錢，在轉動====</span><br><span class="line">投入錢幣</span><br><span class="line">轉動把手中......</span><br><span class="line">糖果機吐了一顆糖果</span><br><span class="line">====不投錢，直接轉動====</span><br><span class="line">轉動把手中......</span><br><span class="line">目前沒有錢幣</span><br><span class="line">=====投錢，但糖果機目前沒糖果了====</span><br><span class="line">投入錢幣</span><br><span class="line">目前沒有糖果，錢退還給您</span><br></pre></td></tr></table></figure><p>目前看起來運作的很正常</p><h3 id="假如有新需求：轉動時會有機率可以再多送一顆！"><a href="#假如有新需求：轉動時會有機率可以再多送一顆！" class="headerlink" title="假如有新需求：轉動時會有機率可以再多送一顆！"></a>假如有新需求：轉動時會有機率可以再多送一顆！</h3><p>那這時候…我們得對CandyMachine的<code>dispense()</code>做個調整：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定義機率，如果機率小於10%就吐出兩顆糖果</span></span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">if</span> (rand.nextInt(<span class="number">10</span>) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"恭喜中獎，糖果機吐了二顆糖果"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.count &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 吐出兩顆糖果</span></span><br><span class="line">                <span class="keyword">this</span>.count--;</span><br><span class="line">                <span class="keyword">this</span>.count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 沒中獎，只吐一顆</span></span><br><span class="line">            <span class="keyword">this</span>.count--;</span><br><span class="line">            <span class="comment">// 有錢的話就吐一顆糖果出來</span></span><br><span class="line">            System.out.println(<span class="string">"糖果機吐了一顆糖果"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 沒有糖果了，回歸到沒糖果狀態</span></span><br><span class="line">            <span class="keyword">this</span>.state = NoCandyState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 還有糖果的話，顯示目前沒有錢幣</span></span><br><span class="line">            <span class="keyword">this</span>.state = NoCoinState;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時可以看到，每次若有新需求，就需要一直對CandyMachine類別一直做修正，其未來若有更多狀態時，程式碼會變得不好維護</p><h2 id="使用狀態模式改善目前糖果機的設計"><a href="#使用狀態模式改善目前糖果機的設計" class="headerlink" title="使用狀態模式改善目前糖果機的設計"></a>使用狀態模式改善目前糖果機的設計</h2><p>先來看看該設計模式的圖表是長怎樣</p><h3 id="狀態模式的類別圖"><a href="#狀態模式的類別圖" class="headerlink" title="狀態模式的類別圖"></a>狀態模式的類別圖</h3><p><img src="https://i.imgur.com/umZlxP3.png" alt=""></p><p>這時我們可以看到，將原本糖果機內的static全域變數狀態，都統一變成一個state變數 (為StateComponent介面型態)。</p><p>這時我們就想把每個狀態 (NoCoinState目前沒有錢幣, HasCoinState目前有錢幣, SoldCandyState售出糖果中, NoCandyState沒有糖果中) 都統一變成 <code>ConcreteState</code>類別，來實作<code>State抽象介面</code>，以利<code>Client類別</code>可以抽換狀態</p><p>接著直接來改造糖果機，先定義每個狀態都會有對應的方法</p><p>因為當糖果機為某種狀態時，若呼叫其動作，就會印出對應的資訊</p><p>這裡我們先為每個動作都先拋出例外，因為有些方法有的狀態可能不需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定義糖果機的雛形"><a href="#定義糖果機的雛形" class="headerlink" title="定義糖果機的雛形"></a>定義糖果機的雛形</h3><p>糖果機擁有了各個狀態的類別，並且提供<code>getXXX()</code>方法，供其他狀態可以抽換自己的狀態</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CandyMachine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> State state;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    State noCoinState;</span><br><span class="line">    State hasCoinState;</span><br><span class="line">    State soldCandyState;</span><br><span class="line">    State noCandyState;</span><br><span class="line"></span><br><span class="line">    CandyMachine(<span class="keyword">int</span> count) &#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        noCoinState = <span class="keyword">new</span> NoCoinState(<span class="keyword">this</span>);</span><br><span class="line">        hasCoinState = <span class="keyword">new</span> HasCoinState(<span class="keyword">this</span>);</span><br><span class="line">        soldCandyState = <span class="keyword">new</span> SoldCandyState(<span class="keyword">this</span>);</span><br><span class="line">        noCandyState = <span class="keyword">new</span> NoCandyState(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getNoCoinState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.noCoinState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getHasCoinState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hasCoinState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getSoldCandyState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.soldCandyState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getNoCandyState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.noCandyState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作各個狀態"><a href="#實作各個狀態" class="headerlink" title="實作各個狀態"></a>實作各個狀態</h3><p>每個狀態都會引入<code>CandyMachin</code>類別，以便能夠幫助糖果機進行狀態變化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCoinState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    CandyMachine candyMachine;</span><br><span class="line">    NoCoinState(CandyMachine candyMachine) &#123;</span><br><span class="line">        <span class="keyword">this</span>.candyMachine = candyMachine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"投入錢幣"</span>);</span><br><span class="line">        <span class="keyword">this</span>.candyMachine.setState(<span class="keyword">this</span>.candyMachine.getHasCoinState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目前沒有錢幣"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasCoinState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    CandyMachine candyMachine;</span><br><span class="line">    HasCoinState(CandyMachine candyMachine) &#123;</span><br><span class="line">        <span class="keyword">this</span>.candyMachine = candyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目前已經有錢幣了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"轉動手把中"</span>);</span><br><span class="line">        <span class="comment">// 切換到下一個狀態</span></span><br><span class="line">        candyMachine.setState(<span class="keyword">this</span>.candyMachine.getSoldCandyState());</span><br><span class="line">        <span class="keyword">this</span>.candyMachine.state.dispense();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目前沒有錢幣"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoldCandyState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    CandyMachine candyMachine;</span><br><span class="line">    SoldCandyState(CandyMachine candyMachine) &#123;</span><br><span class="line">        <span class="keyword">this</span>.candyMachine = candyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目前正在吐糖果中，請勿投幣！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目前正在吐糖果中，請勿轉動！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"開始吐糖果"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定義機率，如果機率小於10%就吐出兩顆糖果</span></span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">if</span> (rand.nextInt(<span class="number">10</span>) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"恭喜中獎，糖果機吐了二顆糖果"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.candyMachine.count &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 吐出兩顆糖果</span></span><br><span class="line">                <span class="keyword">this</span>.candyMachine.count--;</span><br><span class="line">                <span class="keyword">this</span>.candyMachine.count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 沒中獎，只吐一顆</span></span><br><span class="line">            <span class="keyword">this</span>.candyMachine.count--;</span><br><span class="line">            <span class="comment">// 有錢的話就吐一顆糖果出來</span></span><br><span class="line">            System.out.println(<span class="string">"糖果機吐了一顆糖果"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.candyMachine.count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.candyMachine.setState(<span class="keyword">this</span>.candyMachine.getNoCandyState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.candyMachine.setState(<span class="keyword">this</span>.candyMachine.getNoCoinState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCandyState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    CandyMachine candyMachine;</span><br><span class="line">    NoCandyState(CandyMachine candyMachine) &#123;</span><br><span class="line">        <span class="keyword">this</span>.candyMachine = candyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目前沒有糖果，請勿投幣！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目前沒有糖果，請勿投幣"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作糖果機"><a href="#操作糖果機" class="headerlink" title="操作糖果機"></a>操作糖果機</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CandyMachine candyMachine = <span class="keyword">new</span> CandyMachine(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先投錢，在轉動</span></span><br><span class="line">        System.out.println(<span class="string">"====先投錢，在轉動===="</span>);</span><br><span class="line">        candyMachine.state.insertCoin();</span><br><span class="line">        candyMachine.state.turnCrank();</span><br><span class="line">        <span class="comment">// 不投錢，直接轉動</span></span><br><span class="line">        System.out.println(<span class="string">"====不投錢，直接轉動===="</span>);</span><br><span class="line">        candyMachine.state.turnCrank();</span><br><span class="line">        <span class="comment">// 投錢，但糖果機目前沒糖果了</span></span><br><span class="line">        System.out.println(<span class="string">"=====投錢，但糖果機可能目前沒糖果了===="</span>);</span><br><span class="line">        candyMachine.state.insertCoin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">====先投錢，在轉動====</span><br><span class="line">投入錢幣</span><br><span class="line">轉動手把中</span><br><span class="line">開始吐糖果</span><br><span class="line">恭喜中獎，糖果機吐了二顆糖果</span><br><span class="line">====不投錢，直接轉動====</span><br><span class="line">目前沒有糖果，請勿投幣</span><br><span class="line">=====投錢，但糖果機目前沒糖果了====</span><br><span class="line">目前沒有糖果，請勿投幣！</span><br></pre></td></tr></table></figure><p>用這張圖可以更了解糖果機是如何與狀態們做互動</p><p><img src="https://i.imgur.com/MjhyGVD.png" alt=""></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>我們可以看到套用狀態模式後，若未來要新增狀態時，直接實作<code>State</code>抽象類別，並且只會需要更動到跟新增狀態類別的相關連狀態，使得我們程式更好維護</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;透過統一的”狀態類別”，來定義物件的內部狀態是如何&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Composite Pattern 合成模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/08/06/Design-Pattern-Java-Composite-Pattern-%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/08/06/Design-Pattern-Java-Composite-Pattern-合成模式/</id>
    <published>2020-08-06T13:34:16.000Z</published>
    <updated>2020-08-06T13:37:49.732Z</updated>
    
    <content type="html"><![CDATA[<p>將有階層關係的類別狀態給扁平化，給使用者看到的是一致性的關係</p><a id="more"></a><h2 id="若沒有合成模式會怎樣？"><a href="#若沒有合成模式會怎樣？" class="headerlink" title="若沒有合成模式會怎樣？"></a>若沒有合成模式會怎樣？</h2><p>假如現在我們來到一間自助吧，有一個菜單類別，但這個菜單類別裡面還會有甜點這個子菜單</p><p>大概長下面這樣</p><p><img src="https://i.imgur.com/iLWjwr3.png" alt=""></p><p>於是我們大概會這樣實作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuffetMenu</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    ArrayList&lt;String&gt; items;</span><br><span class="line">    DessertMenu dessertMenu;</span><br><span class="line"></span><br><span class="line">    BuffetMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"自助餐菜單"</span>;</span><br><span class="line">        <span class="keyword">this</span>.items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.dessertMenu = <span class="keyword">new</span> DessertMenu();</span><br><span class="line">        <span class="comment">// 初始化項目</span></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"牛肉麵"</span>);</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"海鮮飯"</span>);</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"牛排"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String item: items) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">":"</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"開始介紹"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        showMenuItem();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DessertMenu</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    ArrayList&lt;String&gt; items;</span><br><span class="line">    ChocolateMenu chocolateMenu;</span><br><span class="line"></span><br><span class="line">    DessertMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"甜點菜單"</span>;</span><br><span class="line">        <span class="keyword">this</span>.items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"雞蛋餅乾"</span>);</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"巧克力"</span>);</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"棉花糖"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String item: items) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">":"</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"開始介紹"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        showMenuItem();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到DessertMenu類別包含在BuffetMenu類別了</p><p>我們現在有位服務生提供介紹菜單內容，定義如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line">    BuffetMenu buffetMenu;</span><br><span class="line"></span><br><span class="line">    Waitress(BuffetMenu buffetMenu) &#123;</span><br><span class="line">        <span class="keyword">this</span>.buffetMenu = buffetMenu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduceMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 介紹菜單</span></span><br><span class="line">        <span class="keyword">this</span>.buffetMenu.print();</span><br><span class="line">        <span class="keyword">this</span>.buffetMenu.showMenuItem();</span><br><span class="line">        <span class="keyword">this</span>.buffetMenu.dessertMenu.print();</span><br><span class="line">        <span class="keyword">this</span>.buffetMenu.dessertMenu.showMenuItem();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後我們請服務生開始介紹菜單</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuffetMenu buffetMenu = <span class="keyword">new</span> BuffetMenu();</span><br><span class="line">        Waitress waitress = <span class="keyword">new</span> Waitress(buffetMenu);</span><br><span class="line"></span><br><span class="line">        waitress.introduceMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">開始介紹自助餐菜單</span><br><span class="line">自助餐菜單:牛肉麵</span><br><span class="line">自助餐菜單:海鮮飯</span><br><span class="line">自助餐菜單:牛排</span><br><span class="line">開始介紹甜點菜單</span><br><span class="line">甜點菜單:雞蛋餅乾</span><br><span class="line">甜點菜單:棉花糖</span><br><span class="line">甜點菜單:巧克力</span><br></pre></td></tr></table></figure><p>但假如現在變成這樣呢：甜點內的巧克力又有不同類型的巧克力，那我們又要再修改上面的程式碼，將Chocolate類別加入到Dessert類別內</p><p><img src="https://i.imgur.com/otznRfN.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DessertMenu</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    ArrayList&lt;String&gt; items;</span><br><span class="line">    ChocolateMenu chocolateMenu; <span class="comment">// 多了巧克力菜單</span></span><br><span class="line"></span><br><span class="line">    DessertMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.chocolateMenu = <span class="keyword">new</span> ChocolateMenu();</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"甜點菜單"</span>;</span><br><span class="line">        <span class="keyword">this</span>.items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"雞蛋餅乾"</span>);</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"棉花糖"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String item: items) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">":"</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"開始介紹"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多了巧克力菜單</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChocolateMenu</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    ArrayList&lt;String&gt; items;</span><br><span class="line"></span><br><span class="line">    ChocolateMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"巧克力菜單"</span>;</span><br><span class="line">        items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"白巧克力"</span>);</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"黑巧克力"</span>);</span><br><span class="line">        <span class="keyword">this</span>.items.add(<span class="string">"酒釀巧克力"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String item: items) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">":"</span> + item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"開始介紹"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時要修改服務生的腦袋，使其知道巧克力菜單的內容。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line">    BuffetMenu buffetMenu;</span><br><span class="line"></span><br><span class="line">    Waitress(BuffetMenu buffetMenu) &#123;</span><br><span class="line">        <span class="keyword">this</span>.buffetMenu = buffetMenu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduceMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 介紹菜單</span></span><br><span class="line">        <span class="keyword">this</span>.buffetMenu.print();</span><br><span class="line">        <span class="keyword">this</span>.buffetMenu.dessertMenu.print();</span><br><span class="line">        <span class="keyword">this</span>.buffetMenu.dessertMenu.chocolateMenu.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但這時候就會發現，每次若新增一個子菜單時，呼叫者就需要直接對其操作，才能夠印出該子菜單的項目列表</p><p>一但子菜單內又有子菜單，那整個程式碼的維護的代價就會非常的高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以看到子菜單內若又有子菜單，要印出該名稱的話，那這行程式碼會越來越長。。。</span><br><span class="line"></span><br><span class="line">this.buffetMenu.dessertMenu.chocolateMenu.print();</span><br></pre></td></tr></table></figure><h3 id="維護修改的代價"><a href="#維護修改的代價" class="headerlink" title="維護修改的代價"></a>維護修改的代價</h3><p>舉個例子，我們想要叫服務生說明，哪些菜/甜點是素食的，這時會改code改到想哭</p><h2 id="解決服務生不用笨拙地存取菜單與其子菜單們：合成模式登場"><a href="#解決服務生不用笨拙地存取菜單與其子菜單們：合成模式登場" class="headerlink" title="解決服務生不用笨拙地存取菜單與其子菜單們：合成模式登場"></a>解決服務生不用笨拙地存取菜單與其子菜單們：合成模式登場</h2><p>合成模式主要幫我們建立一個類別關係，建立起父類別與子類別的階層關係，並讓客戶端以一致的方式存取樹狀結構內的各個類別</p><p>先講結論，以上的菜單們，套用合成模式後，服務生不用透過以下方式存取子菜單並介紹出來了，而是直接可以用一致的方式將所有菜單與子菜單都呼叫出來<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void introduceMenu() &#123;</span><br><span class="line">       // 介紹菜單 &lt;-- 可以不用一一在呼叫菜單與子菜單和子菜單的子菜單。。。</span><br><span class="line">       public void introduceMenu() &#123;</span><br><span class="line">       // 介紹菜單</span><br><span class="line">       this.buffetMenu.print();</span><br><span class="line">       this.buffetMenu.showMenuItem();</span><br><span class="line">       this.buffetMenu.dessertMenu.print();</span><br><span class="line">       this.buffetMenu.dessertMenu.showMenuItem();</span><br><span class="line">       this.buffetMenu.dessertMenu.chocolateMenu.print();</span><br><span class="line">       this.buffetMenu.dessertMenu.chocolateMenu.showMenuItem();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>這時我們先來看 合成模式 的類別關係圖</p><p><img src="https://i.imgur.com/a4ZZBAI.png" alt=""></p><ul><li>Component類別：定義了其所有底下葉節點與合成類別的結構<ul><li>所有的Leaf節點與Composite節點都會繼承(實作)該Component類別</li><li>Component是老大哥，老大哥會的下面的也會學到</li></ul></li><li>Leaf類別：會實作Component類別，但由於Leaf節點沒有子類別，所以只會有operation()的方法供呼叫</li><li>Composite類別：合成類別，將以下兩點做合成<ul><li>所要執行的功能<code>operation()</code></li><li>管理子類別的方法 <code>add()</code> <code>remove()</code> <code>getChild()</code></li></ul></li></ul><p>對應Composite類別關係圖到我們上述所畫的菜單關係圖，就會長得如下：</p><p><img src="https://i.imgur.com/g5tB4GT.png" alt=""></p><p>把上面所提到的這張圖作轉換</p><p><img src="https://i.imgur.com/otznRfN.png" alt=""></p><p>就會變成這樣子 (省略Chocolate類別的菜單項目)</p><p><img src="https://i.imgur.com/Rez9N4I.png" alt=""></p><h3 id="定義MenuComponent抽象類別"><a href="#定義MenuComponent抽象類別" class="headerlink" title="定義MenuComponent抽象類別"></a>定義MenuComponent抽象類別</h3><p>定義MenuComponent, 提供菜單基本的方法</p><p>這邊主要不是定義成Interface, 而是抽象類別的主要原因是因為，我們會給 子菜單去繼承菜單所具有的方法</p><p>但又因會給菜單項目(MenuItem)繼承(如 牛肉麵, 海鮮飯, 牛排)，<br>但菜單項目不需要像是 <code>add()</code>, <code>remove()</code>等方法，所以會在該方法內先拋出 <code>UnsupportedOperationException()</code></p><h4 id="Menu-java"><a href="#Menu-java" class="headerlink" title="Menu.java"></a>Menu.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我們定義了以下方法，並等待真正的菜單類別來實作其細節</p><ul><li>add(): 可新增 實作MenuComponent的物件</li><li>remove(): 移除 實作MenuComponent的物件</li><li>getChild(): 取得Menu內的菜單項目/子菜單</li><li>getName(): 取得菜單名稱</li><li>getPrice: 取得菜單項目價格</li><li>isVegetarian(): 確認是否為素食</li><li>print(): 印出自己的所有菜單項目/子菜單內容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">還記得最上面的若要請服務生確認菜色是否是素食，但要到處修改的慘痛的經驗嗎？</span><br><span class="line"></span><br><span class="line">這時候若在共通的介面，定義好一個isVegetarian(), 請菜色自行提供是否是素食，是的話回傳true, 不是就回傳false, 如此一來服務生就可以在呼叫print()時，可以直接判斷這道項目是否是素食囉</span><br><span class="line"></span><br><span class="line">關於print()的實現細節後面會介紹</span><br></pre></td></tr></table></figure><h3 id="開始實作菜單元件：定義自助式菜單"><a href="#開始實作菜單元件：定義自助式菜單" class="headerlink" title="開始實作菜單元件：定義自助式菜單"></a>開始實作菜單元件：定義自助式菜單</h3><p>接著開始實作自助餐的完整菜單吧！</p><p>BuffetMenu.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuffetMenu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 宣告要放置菜單項目與子菜單的ArrayList</span></span><br><span class="line">    ArrayList&lt;MenuComponent&gt; menuItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 菜單名稱</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    BuffetMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"自助式菜單"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.menuItems.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"自助式菜單提供了主菜們(牛肉麵, 海鮮飯, 牛排), 以及甜點菜單, 請盡情享用！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不用實作getPrice 因為菜單沒有價格</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不用實作isVegetarian 因為菜單沒有價格</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是菜單的話, print使用iterator, 將ArrayList型態的menus中的menuComponent一一取出來, 並呼叫</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getDescription());</span><br><span class="line"></span><br><span class="line">        Iterator iterator = menuItems.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// 取出來的可能是菜單項目, 也可能是子菜單</span></span><br><span class="line">            MenuComponent menuComponent = (MenuComponent)iterator.next();</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在BuffetMenu中，已經除了 <code>getPrice()</code>和<code>isVegetarian()</code>這兩項菜單不用去實作，其他都有定義邏輯</p><p>這邊要注意的是 <code>print()</code> 我們使用 iterator, 將菜單內的<code>MenuComponent</code>一一取出來，並且在呼叫其<code>print()</code>, 依序對自助式菜單內的菜單項目做介紹這樣</p><h3 id="定義菜單項目"><a href="#定義菜單項目" class="headerlink" title="定義菜單項目"></a>定義菜單項目</h3><p>接著我們定義一個牛肉麵類別 <code>BeefNoodles</code>, 實作 <code>MenuComponent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeefNoodles</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 菜單名稱</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"好吃的牛肉麵, 道地的四川口味～～"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">120</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isVegetarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 牛肉麵不是素食</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不是菜單, 所以只要呼叫名稱與描述就好</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getDescription());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於牛肉麵是菜單的項目，所以只要實作跟他自己有關的方法就好，在<code>print()</code>也只要就印出自己名稱是什麼，以及描述, 價格。</p><h3 id="實作子菜單-甜點菜單"><a href="#實作子菜單-甜點菜單" class="headerlink" title="實作子菜單: 甜點菜單"></a>實作子菜單: 甜點菜單</h3><p>跟剛剛實作自助餐的細節非常類似</p><p>DessertMenu.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DessertMenu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 宣告要放置菜單項目與子菜單的ArrayList</span></span><br><span class="line">    ArrayList&lt;MenuComponent&gt; menuItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 菜單名稱</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    DessertMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"甜點菜單"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menuItems.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">MenuComponent <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.menuItems.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"甜點菜單提供了一星米其林主廚所製作的甜點們！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不用實作getPrice 因為菜單沒有價格</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不用實作isVegetarian 因為菜單沒有價格</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是菜單的話, print使用iterator, 將ArrayList型態的menus中的menuComponent一一取出來, 並呼叫</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getDescription());</span><br><span class="line"></span><br><span class="line">        Iterator iterator = menuItems.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// 取出來的可能是菜單項目, 也可能是子菜單</span></span><br><span class="line">            MenuComponent menuComponent = (MenuComponent)iterator.next();</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最後也是一樣，將甜點項目都實作一輪，不過這邊都很類似就不敘述了</p><h3 id="重新定義服務生"><a href="#重新定義服務生" class="headerlink" title="重新定義服務生"></a>重新定義服務生</h3><p>可以看到服務生很快樂, 只要呼叫MenuComponent的<code>print()</code>, 就把所有菜單都介紹出來囉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line">    MenuComponent menuComponent;</span><br><span class="line"></span><br><span class="line">    Waitress(MenuComponent menuComponent) &#123;</span><br><span class="line">        <span class="keyword">this</span>.menuComponent = menuComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduceMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 這時只要呼叫print(), 就可以把全部菜單的項目與名稱都介紹出來了！</span></span><br><span class="line">        <span class="keyword">this</span>.menuComponent.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客戶開始進來，請服務生介紹"><a href="#客戶開始進來，請服務生介紹" class="headerlink" title="客戶開始進來，請服務生介紹"></a>客戶開始進來，請服務生介紹</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MenuComponent buffetMenu = <span class="keyword">new</span> BuffetMenu();</span><br><span class="line">        MenuComponent beefNoodles = <span class="keyword">new</span> BeefNoodles();</span><br><span class="line">        MenuComponent seaRice = <span class="keyword">new</span> SeaRice();</span><br><span class="line">        MenuComponent steak = <span class="keyword">new</span> Steak();</span><br><span class="line">        buffetMenu.add(beefNoodles);</span><br><span class="line">        buffetMenu.add(seaRice);</span><br><span class="line">        buffetMenu.add(steak);</span><br><span class="line">        <span class="comment">// 定義子菜單</span></span><br><span class="line">        MenuComponent dessertMenu = <span class="keyword">new</span> DessertMenu();</span><br><span class="line">        MenuComponent eggCookie = <span class="keyword">new</span> EggCookie();</span><br><span class="line">        MenuComponent cottonCandy = <span class="keyword">new</span> CottonCandy();</span><br><span class="line">        dessertMenu.add(eggCookie);</span><br><span class="line">        dessertMenu.add(cottonCandy);</span><br><span class="line">        <span class="comment">// 將子菜單加入自助式菜單</span></span><br><span class="line">        buffetMenu.add(dessertMenu);</span><br><span class="line"></span><br><span class="line">        Waitress waitress = <span class="keyword">new</span> Waitress(buffetMenu);</span><br><span class="line">        <span class="comment">// 請服務生開始介紹！</span></span><br><span class="line">        waitress.introduceMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">自助式菜單</span><br><span class="line">自助式菜單提供了主菜們(牛肉麵, 海鮮飯, 牛排), 以及甜點菜單, 請盡情享用！</span><br><span class="line">牛肉麵</span><br><span class="line">好吃的牛肉麵, 道地的四川口味～～</span><br><span class="line">120.0</span><br><span class="line">海鮮飯</span><br><span class="line">好吃的海鮮飯～～</span><br><span class="line">200.0</span><br><span class="line">牛排</span><br><span class="line">好吃的牛排～～</span><br><span class="line">400.0</span><br><span class="line">甜點菜單</span><br><span class="line">甜點菜單提供了一星米其林主廚所製作的甜點們！</span><br><span class="line">雞蛋餅乾</span><br><span class="line">雞蛋口味的餅單, 大人小孩都愛～～</span><br><span class="line">60.0</span><br><span class="line">棉花糖</span><br><span class="line">棉花糖好滋味～～</span><br><span class="line">30.0</span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>透過合成模式, 將取得菜單與子菜單的動作給一致化了</p><p>服務生只要呼叫實作MenuComponent的菜單與子菜單們, 就可以一口氣將所有菜單與子菜單的項目們全都介紹出來！</p><p>未來若要擴充子菜單的項目，也不用擔心需要再修改服務生的類別，只要新的菜單有實作MenuComponent就好</p><p>達到 “對修改關閉, 對擴充開放”的原則！</p><h2 id="將每個菜單的Iterator給合併起來-IteratorComposite"><a href="#將每個菜單的Iterator給合併起來-IteratorComposite" class="headerlink" title="將每個菜單的Iterator給合併起來: IteratorComposite"></a>將每個菜單的Iterator給合併起來: IteratorComposite</h2><p>還記得剛剛有提到如何判斷該菜單是否是素食的情況呢？？</p><p>(待續)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;將有階層關係的類別狀態給扁平化，給使用者看到的是一致性的關係&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Iterator Pattern 反覆器模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/08/03/Design-Pattern-Java-Iterator-Pattern-%E5%8F%8D%E8%A6%86%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/08/03/Design-Pattern-Java-Iterator-Pattern-反覆器模式/</id>
    <published>2020-08-03T15:50:41.000Z</published>
    <updated>2020-08-04T00:03:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>將處理陣列或是取值方式的邏輯給封裝起來，不需讓使用者直接處理操作取值的邏輯</p><a id="more"></a><h2 id="沒有Iterator-Pattern的情況"><a href="#沒有Iterator-Pattern的情況" class="headerlink" title="沒有Iterator Pattern的情況"></a>沒有Iterator Pattern的情況</h2><p>假設現在有2種菜單, 分別叫做中式料理菜單 與 西式料理菜單</p><p>中式料理菜單是用ArrayList的方式儲存菜單項目</p><p>美式料理菜單是用Array[]儲存</p><p>中式料理菜單<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseMenu</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; menu;</span><br><span class="line"></span><br><span class="line">    ChineseMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setMenuItem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menu = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.menu.add(<span class="string">"麻婆豆腐"</span>);</span><br><span class="line">        <span class="keyword">this</span>.menu.add(<span class="string">"豬血糕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>美式料理菜單<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmericanMenu</span> </span>&#123;</span><br><span class="line">    String[] menu;</span><br><span class="line"></span><br><span class="line">    AmericanMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.menu = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">this</span>.setMenuItem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menu[<span class="number">0</span>] = <span class="string">"漢堡"</span>;</span><br><span class="line">        <span class="keyword">this</span>.menu[<span class="number">1</span>] = <span class="string">"薯條"</span>;</span><br><span class="line">        <span class="keyword">this</span>.menu[<span class="number">2</span>] = <span class="string">"炸雞"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getMenu() &#123;</span><br><span class="line">        <span class="keyword">return</span> menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接著定義一個類別：服務生，但服務生需要知道要怎麼撈內容, ArrayList與Array的撈法就會不一樣，要寫兩個for loop…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line">    ChineseMenu chineseMenu;</span><br><span class="line">    AmericanMenu americaMenu;</span><br><span class="line"></span><br><span class="line">    Waitress(</span><br><span class="line">        ChineseMenu chMenu,</span><br><span class="line">        AmericanMenu amerMenu</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.chineseMenu = chMenu;</span><br><span class="line">        <span class="keyword">this</span>.americaMenu = amerMenu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這時候服務生需要針對各個menu做菜色介紹</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduceMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=======介紹中式料理========"</span>);</span><br><span class="line">        <span class="keyword">for</span>(String dish: chineseMenu.getMenu()) &#123;</span><br><span class="line">            System.out.println(dish);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=======介紹美式式料理========"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;americaMenu.getMenu().length; i++) &#123;</span><br><span class="line">            System.out.println(americaMenu.menu[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著呼叫服務生，介紹菜單</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChineseMenu chineseMenu = <span class="keyword">new</span> ChineseMenu();</span><br><span class="line">        AmericanMenu americanMenu = <span class="keyword">new</span> AmericanMenu();</span><br><span class="line">        Waitress waitress = <span class="keyword">new</span> Waitress(chineseMenu, americanMenu);</span><br><span class="line">        waitress.introduceMenu();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">=======介紹中式料理========</span><br><span class="line">麻婆豆腐</span><br><span class="line">豬血糕</span><br><span class="line">=======介紹美式式料理========</span><br><span class="line">漢堡</span><br><span class="line">薯條</span><br><span class="line">炸雞</span><br></pre></td></tr></table></figure><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>可以看到服務生必須要了解如何從菜單取出來，變成每一次若又有新的菜單，那每次服務生又得曉得新菜單的取得方式是怎樣，如此一來就得一直增加for loop, 有N個菜單就有N個for loop, 不大好維護。</p><h2 id="Iterator模式登場"><a href="#Iterator模式登場" class="headerlink" title="Iterator模式登場"></a>Iterator模式登場</h2><p>該模式主要目的：『讓服務生不需知道其取出細節是如何，只要透過一個標準的介面(Iterator)，就可以直接呼叫菜單內容』</p><h3 id="定義-Iterator-介面"><a href="#定義-Iterator-介面" class="headerlink" title="定義 Iterator 介面"></a>定義 Iterator 介面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Boolean <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改良一下Menu-將各個Menu實作同一個介面"><a href="#改良一下Menu-將各個Menu實作同一個介面" class="headerlink" title="改良一下Menu 將各個Menu實作同一個介面"></a>改良一下Menu 將各個Menu實作同一個介面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Menu</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">getMenu</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseMenu</span> <span class="keyword">implements</span> <span class="title">Menu</span>&lt;<span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;&gt; </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; menu;</span><br><span class="line"></span><br><span class="line">    ChineseMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setMenuItem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menu = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.menu.add(<span class="string">"麻婆豆腐"</span>);</span><br><span class="line">        <span class="keyword">this</span>.menu.add(<span class="string">"豬血糕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AmericanMenu implements Menu&lt;String[]&gt; &#123;</span><br><span class="line">    String[] menu;</span><br><span class="line"></span><br><span class="line">    AmericanMenu() &#123;</span><br><span class="line">        <span class="keyword">this</span>.menu = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">this</span>.setMenuItem();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenuItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menu[<span class="number">0</span>] = <span class="string">"漢堡"</span>;</span><br><span class="line">        <span class="keyword">this</span>.menu[<span class="number">1</span>] = <span class="string">"薯條"</span>;</span><br><span class="line">        <span class="keyword">this</span>.menu[<span class="number">2</span>] = <span class="string">"炸雞"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getMenu() &#123;</span><br><span class="line">        <span class="keyword">return</span> menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時改用實作兩個Iterator類別 <code>ChineseMenuIterator</code>與<code>AmericanMenuIterator</code>，負責定義如何取出菜單內容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; menu;</span><br><span class="line">    <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChineseMenuIterator</span><span class="params">(Menu&lt;ArrayList&lt;String&gt;&gt; menu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menu = menu.getMenu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ChineseMenu是使用ArrayList定義菜單列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count + <span class="number">1</span> &gt;= menu.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.menu.get(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmericanMenuIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    String[] menu;</span><br><span class="line">    <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AmericanMenuIterator</span><span class="params">(Menu&lt;String[]&gt; menu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.menu = menu.getMenu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count + <span class="number">1</span> &gt;= menu.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.menu[count];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時回到服務生，若要介紹菜單內容的話，只要使用上面定義的 <code>ChineseMenuIterator</code>與<code>AmericanMenuIterator</code>, 就可以直接取出菜單項目內容了，服務生不需要在曉得要怎麼處理撈取的細節，看到一堆for loop了</p><p>Waitress class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line">    ChineseMenu chineseMenu;</span><br><span class="line">    AmericanMenu americaMenu;</span><br><span class="line"></span><br><span class="line">    ChineseMenuIterator chineseMenuIterator;</span><br><span class="line">    AmericanMenuIterator americanMenuIterator;</span><br><span class="line">    Waitress(</span><br><span class="line">        ChineseMenu chMenu,</span><br><span class="line">        AmericanMenu amerMenu,</span><br><span class="line">        ChineseMenuIterator chineseMenuIterator,</span><br><span class="line">        AmericanMenuIterator americanMenuIterator</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.chineseMenu = chMenu;</span><br><span class="line">        <span class="keyword">this</span>.americaMenu = amerMenu;</span><br><span class="line">        <span class="keyword">this</span>.chineseMenuIterator = chineseMenuIterator;</span><br><span class="line">        <span class="keyword">this</span>.americanMenuIterator = americanMenuIterator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這時候服務生只要透過iterator, 就可以直接用一個for loop全部取出來</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduceMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=======介紹中式料理========"</span>);</span><br><span class="line">        <span class="keyword">while</span>(chineseMenuIterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(chineseMenuIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=======介紹美式料理========"</span>);</span><br><span class="line">        <span class="keyword">while</span>(americanMenuIterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(americanMenuIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再度呼叫服務生介紹菜單</p><p>Main class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChineseMenu chineseMenu = <span class="keyword">new</span> ChineseMenu();</span><br><span class="line">        ChineseMenuIterator chineseMenuIterator = <span class="keyword">new</span> ChineseMenuIterator(chineseMenu);</span><br><span class="line">        AmericanMenu americanMenu = <span class="keyword">new</span> AmericanMenu();</span><br><span class="line">        AmericanMenuIterator americanMenuIterator = <span class="keyword">new</span> AmericanMenuIterator(americanMenu);</span><br><span class="line">        Waitress waitress = <span class="keyword">new</span> Waitress(</span><br><span class="line">                chineseMenu,</span><br><span class="line">                americanMenu,</span><br><span class="line">                chineseMenuIterator,</span><br><span class="line">                americanMenuIterator);</span><br><span class="line">        waitress.introduceMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>透過Iterator介面定義如何實作抽取資料結構的內容，讓使用者可以不用費心去了解要怎麼取得，直接呼叫已經有實作Iterator介面的class</p><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><p>Collection 類別中其實就已經定義了Iterator介面，不過為了介紹反覆器模式，故在ArrayList中簡單實作了Iterator介面內容</p><p><img src="https://i.imgur.com/KGnuRr5.png" alt=""></p><p>Reference: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;將處理陣列或是取值方式的邏輯給封裝起來，不需讓使用者直接處理操作取值的邏輯&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Template Pattern 樣板模式  [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/29/Design-Pattern-Java-Template-Pattern-%E6%A8%A3%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/29/Design-Pattern-Java-Template-Pattern-樣板模式/</id>
    <published>2020-07-29T15:33:47.000Z</published>
    <updated>2020-08-01T02:49:13.355Z</updated>
    
    <content type="html"><![CDATA[<p>樣板, 顧名思義就是把同樣的邏輯定義成一個樣板, 可讓其他類別共同使用</p><p>樣板也會開放可客製化的方法 (抽象方法), 供其他類別實作</p><a id="more"></a><p>樣板主要核心</p><ol><li>將共同演算法邏輯包裝好</li><li>定義非共同的方法為抽像方法, 請使用樣板方法的類別自行實作</li></ol><h2 id="透過泡茶與泡咖啡來瞭解樣板模式吧"><a href="#透過泡茶與泡咖啡來瞭解樣板模式吧" class="headerlink" title="透過泡茶與泡咖啡來瞭解樣板模式吧"></a>透過泡茶與泡咖啡來瞭解樣板模式吧</h2><p>這時候若直接寫code, 會分別定義出 <code>Tea</code> 與 <code>Coffee</code> class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line">    Tea() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=======開始準備茶的動作======="</span>);</span><br><span class="line">        boilWater();</span><br><span class="line">        steepTeaBag();</span><br><span class="line">        addLenmon();</span><br><span class="line">        pourIntoCup();</span><br><span class="line">        System.out.println(<span class="string">"=======結束======="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"燒開水"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">steepTeaBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"泡開茶包"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLenmon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加入檸檬"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pourIntoCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"倒入杯中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    Coffee() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=======開始準備咖啡的動作======="</span>);</span><br><span class="line">        boilWater();</span><br><span class="line">        greedCoffeeGrinds();</span><br><span class="line">        addCreamer();</span><br><span class="line">        pourIntoCup();</span><br><span class="line">        System.out.println(<span class="string">"=======結束======="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"燒開水"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">greedCoffeeGrinds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"磨咖啡豆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addCreamer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加奶精"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pourIntoCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"倒入杯中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用以上定義的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Tea tea = <span class="keyword">new</span> Tea();</span><br><span class="line">        tea.prepare();</span><br><span class="line"></span><br><span class="line">        Coffee coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">        coffee.prepare();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/1PXbn6b.png" alt=""></p><h2 id="套用Template-Pattern吧"><a href="#套用Template-Pattern吧" class="headerlink" title="套用Template Pattern吧"></a>套用Template Pattern吧</h2><p>仔細比較泡茶和泡咖啡, 都會有著以下類似的動作</p><ol><li>煮沸開水</li><li>將(茶的茶包/咖啡藥磨成粉)泡開  &lt;– 這個動作一樣, 但茶是用茶包, 咖啡是需要先磨成粉</li><li>添加有的沒的 (咖啡會用奶精/茶會放檸檬) &lt;– 這邊的也是一樣</li><li>倒進杯中</li></ol><p>剛好茶與咖啡都是含有咖啡因的飲料，這時就可以定義一個樣板叫做 <code>CaffeineBeverage</code>, 並把上述 2,3步驟,定義成抽象方法, 讓茶與咖啡類別自己去實作自己的邏輯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">"咖啡因飲料"</span>;</span><br><span class="line">    CaffeineBeverage(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=======開始準備 "</span> + <span class="keyword">this</span>.name + <span class="string">" 的動作======="</span>);</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        addCondiments();</span><br><span class="line">        pourIntoCup();</span><br><span class="line">        System.out.println(<span class="string">"=======結束======="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"燒開水"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定義如何泡的抽象方法, 讓茶與咖啡自行定義</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 定義要添加其他配料, 讓茶與咖啡自行定義</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pourIntoCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"倒進杯中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著<code>Tea</code>與<code>Coffee</code>實現該樣板類別 <code>CaffeineBeverage</code><br>並根據自己的邏輯實作abstract方法 <code>brew()</code>與<code>addCondiments()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    Tea(String name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=======開始準備茶的動作======="</span>);</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        addCondiments();</span><br><span class="line">        pourIntoCup();</span><br><span class="line">        System.out.println(<span class="string">"=======結束======="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"泡開茶包"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加入檸檬"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span></span>&#123;</span><br><span class="line">    Coffee(String name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=======開始準備咖啡的動作======="</span>);</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        addCondiments();</span><br><span class="line">        pourIntoCup();</span><br><span class="line">        System.out.println(<span class="string">"=======結束======="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"磨咖啡豆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加奶精"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著一樣使用之</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CaffeineBeverage tea = <span class="keyword">new</span> Tea(<span class="string">"茶"</span>);</span><br><span class="line">        tea.prepare();</span><br><span class="line"></span><br><span class="line">        CaffeineBeverage coffee = <span class="keyword">new</span> Coffee(<span class="string">"咖啡"</span>);</span><br><span class="line">        coffee.prepare();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lT9g7lA.png" alt=""></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>透過以上方法可以看到 樣板模式 將重複的地方給統整起來成為演算法邏輯, 並定義一個抽象類別, 將需要客製化的部分定義成抽象方法, 統一的部分就直接定義實體方法</p><p>如此一來各個類別在實作時，就不用在自己去做重複一樣的動作(例如燒開水, 倒入杯中) 只要直接繼承樣板抽象類別就有囉, 然後在自己實作自己需要的部分 (如茶有自己的茶包泡法, 咖啡則有自己的咖啡豆要磨 才能泡)</p><p>以實現樣板模式的精神</p><h2 id="透過hook方法將封裝的演算法邏輯部分做控制使用"><a href="#透過hook方法將封裝的演算法邏輯部分做控制使用" class="headerlink" title="透過hook方法將封裝的演算法邏輯部分做控制使用"></a>透過hook方法將封裝的演算法邏輯部分做控制使用</h2><p>待補充</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;樣板, 顧名思義就是把同樣的邏輯定義成一個樣板, 可讓其他類別共同使用&lt;/p&gt;
&lt;p&gt;樣板也會開放可客製化的方法 (抽象方法), 供其他類別實作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Facade Pattern 表象模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/29/Design-Pattern-Java-Facade-Pattern-%E8%A1%A8%E8%B1%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/29/Design-Pattern-Java-Facade-Pattern-表象模式/</id>
    <published>2020-07-29T12:20:24.000Z</published>
    <updated>2020-07-29T15:41:02.366Z</updated>
    
    <content type="html"><![CDATA[<p>將複雜的類別關係, 用一個類別包裝起來, 供呼叫</p><p>不會讓使用者直接看到背後複雜的邏輯, 只會看到 “表面的現象”, 故叫做表象模式</p><a id="more"></a><h2 id="以一個家庭劇院來解說"><a href="#以一個家庭劇院來解說" class="headerlink" title="以一個家庭劇院來解說"></a>以一個家庭劇院來解說</h2><p>如果坐在客廳, 想要營造一個家庭劇院</p><p>我們得做以下事情：</p><ol><li>打開燈, 調整亮度</li><li>打開電視, 切換到DVD模式</li><li>打開音響, 調整大小聲</li><li>打開DVD, 讀取要看的片</li></ol><p>等等之類的, 以下定義這些服務的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightService</span> </span>&#123;</span><br><span class="line">    LightService() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lightOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TVService</span> </span>&#123;</span><br><span class="line">    TVService() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the TV"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundService</span> </span>&#123;</span><br><span class="line">    SoundService() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the Sound"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DVDPlayerService</span> </span>&#123;</span><br><span class="line">    DVDPlayerService() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openDVD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the DVD"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後直覺上會呼叫之</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LightService lightService = <span class="keyword">new</span> LightService();</span><br><span class="line">        TVService tvService = <span class="keyword">new</span> TVService();</span><br><span class="line">        SoundService soundService = <span class="keyword">new</span> SoundService();</span><br><span class="line">        DVDPlayerService dvdPlayerService = <span class="keyword">new</span> DVDPlayerService();</span><br><span class="line"></span><br><span class="line">        lightService.lightOn();</span><br><span class="line">        tvService.openTV();</span><br><span class="line">        soundService.openSound();</span><br><span class="line">        dvdPlayerService.openDVD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其結果為：</p><p><img src="https://i.imgur.com/4zTs3XQ.png" alt=""></p><h2 id="表象模式登場"><a href="#表象模式登場" class="headerlink" title="表象模式登場"></a>表象模式登場</h2><p>不過對於使用者來說, 其實就只想要享受家庭劇院的娛樂, 所以其實我們可以用包裝的方式, 將上面main裡面相關服務的class都包在一個class內, 叫做<code>MovieTheaterFacadeService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieTheaterFacadeService</span> </span>&#123;</span><br><span class="line">    MovieTheaterFacadeService() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startMovieTheaterService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LightService lightService = <span class="keyword">new</span> LightService();</span><br><span class="line">        TVService tvService = <span class="keyword">new</span> TVService();</span><br><span class="line">        SoundService soundService = <span class="keyword">new</span> SoundService();</span><br><span class="line">        DVDPlayerService dvdPlayerService = <span class="keyword">new</span> DVDPlayerService();</span><br><span class="line"></span><br><span class="line">        lightService.lightOn();</span><br><span class="line">        tvService.openTV();</span><br><span class="line">        soundService.openSound();</span><br><span class="line">        dvdPlayerService.openDVD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一來, 我們的使用者(main()), 只要呼叫 <code>MovieTheaterFacadeService</code> 就可以直接享受家庭劇院, 不用親自去處理過程中的事</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       MovieTheaterFacadeService movieTheaterFacadeService = <span class="keyword">new</span> MovieTheaterFacadeService();</span><br><span class="line"></span><br><span class="line">       movieTheaterFacadeService.startMovieTheaterService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>透過以上的例子, 可以看到表象模式最大的用處就是將複雜的服務類別們給包裝在一起, 並開放單一個類別供使用者使用, 讓使用者僅需要看到表面即可, 不用理解細節是什麼。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;將複雜的類別關係, 用一個類別包裝起來, 供呼叫&lt;/p&gt;
&lt;p&gt;不會讓使用者直接看到背後複雜的邏輯, 只會看到 “表面的現象”, 故叫做表象模式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Adaptor Pattern 轉接器模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/29/Design-Pattern-Java-Adaptor-Pattern-%E8%BD%89%E6%8E%A5%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/29/Design-Pattern-Java-Adaptor-Pattern-轉接器模式/</id>
    <published>2020-07-29T00:15:30.000Z</published>
    <updated>2020-07-29T11:52:08.666Z</updated>
    
    <content type="html"><![CDATA[<p>假如要使用A, 但無法直接使用, 只能使用B介面</p><p>所以我們用轉接器類別包裝A的方法，並且實作B，達到轉接的效果</p><a id="more"></a><h2 id="用螢幕轉接器的例子直接解釋"><a href="#用螢幕轉接器的例子直接解釋" class="headerlink" title="用螢幕轉接器的例子直接解釋"></a>用螢幕轉接器的例子直接解釋</h2><p>例如我們有個 HDMI的線, 叫做 HDMI interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HDMI</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定義連接裝置的方法格式</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但現在有個螢幕只有支援VGA的插孔</p><p>所以我們需要個 HDMI轉VGA的Adaptor類別, 把VGA的類別引入進來, 並使用之</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HdmiToVgaAdpator</span> <span class="keyword">implements</span> <span class="title">HDMI</span> </span>&#123;</span><br><span class="line">    VGA vgaCable = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    HdmiToVgaAdpator(VGA vgaCable) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vgaCable = vgaCable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必須要實作HDMI的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 介接Vga線的connect功能</span></span><br><span class="line">        System.out.println(<span class="string">"使用轉接器的connect功能!"</span>);</span><br><span class="line">        vgaCable.connect(device);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為有使用到VGA類別, 所以來定義一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">VGA</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定義連接裝置的方法格式</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGACable</span> <span class="keyword">implements</span> <span class="title">VGA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(String device)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"VGA線連接: "</span> + device);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>來定義有台筆電, 是只有具備hdmi孔, 但具備著可以連接到某裝置進行投影</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Labtop</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 該台筆電只有hdmi孔, 並指定要連接的螢幕(device)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectToDevice</span><span class="params">(HDMI hdmi, String device)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"筆電只有hdmi孔, 使用實作hdmi介面的 'hdmi轉vga的轉接器' 類別！"</span>);</span><br><span class="line">        hdmi.connect(device);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著來使用吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Labtop laptop = <span class="keyword">new</span> Labtop();</span><br><span class="line">        <span class="comment">// 如果某筆電只有hdmi插孔, 但要接的投影螢幕只有vga</span></span><br><span class="line">        laptop.connectToDevice(</span><br><span class="line">                <span class="keyword">new</span> HdmiToVgaAdpator( <span class="comment">// 這時可以使用Hdmi轉Vga的轉接器！ 轉接器需要帶入實際具有VGA功能的VGA線物件</span></span><br><span class="line">                        <span class="keyword">new</span> VGACable()),</span><br><span class="line">                <span class="string">"老舊投影機"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們可以看到結果為:</p><p><img src="https://i.imgur.com/pwtgvua.png" alt=""></p><ol><li>筆電使用了 實作hdmi介面的轉接器 (轉接器因為實作了hdmi interface, 所以可以插入筆電的hdmi孔)</li><li>接著轉接器引入了VGA cable類別, 故轉接器就可以使用VGA的connect()功能</li><li>最後就觸發VGA功能, 與投影裝置連動</li></ol><h2 id="實際應用場景"><a href="#實際應用場景" class="headerlink" title="實際應用場景"></a>實際應用場景</h2><p>通常轉接器模式可用在轉接那些已經過時的模組&amp;方法</p><p>例如有模組是用Java較舊迭代Collection的版本去寫的, 為Enumeration Interface</p><p>但現在新的專案中，是使用Iterator方式去迭代Collection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewLoopService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用Java 5版本之後支援的Iterator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopCollection</span><span class="params">(Collection col, Iterator itr)</span> </span>&#123;</span><br><span class="line">        itr = col.iterator();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">            System.out.println(itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用NewLoopService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span>() </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"apple"</span>);</span><br><span class="line">        list.add(<span class="string">"banana"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 宣告Iterator的變數</span></span><br><span class="line">        Iterator itr;</span><br><span class="line">        </span><br><span class="line">        NewLoopService loopService = <span class="keyword">new</span> NewLoopService();</span><br><span class="line">        loopService.loopCollection(list, itr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但現在若只能用舊版的 <code>Enumeration</code> 方式去迭代</p><p>這時就可以寫一個 <code>EnumeratorAdaptor</code> 來實作可兼容<code>Iterator</code>的類別, 並可呼叫 <code>Enumeration</code>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 實作Iterator的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnumeratorAdaptor</span>&lt;<span class="title">E</span>&gt; <span class="title">implement</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    Enumeration&lt;E&gt; enumeration;</span><br><span class="line">    </span><br><span class="line">    EnumeratorAdaptor(Enumeration&lt;E&gt; enumeration) &#123;</span><br><span class="line">        <span class="keyword">this</span>.enumeration = enumeration;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 實作Iterator 介面所需的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 但實際上是使用Enumeration的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.enumeration.hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.enumeration.nextElement();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 但這時候會遇到Enumeration沒有的方法, 但又必須要實作 滿足Iterator的介面規範, 這時可以throw Exception來處理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時我們可以在<code>main()</code>中改用轉接器, 來間接使用Enumeration了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span>() </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"apple"</span>);</span><br><span class="line">        list.add(<span class="string">"banana"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 `實作Iterator介面` 的轉接器</span></span><br><span class="line">        EnumeratorAdaptor itr;</span><br><span class="line">        </span><br><span class="line">        NewLoopService loopService = <span class="keyword">new</span> NewLoopService();</span><br><span class="line">        loopService.loopCollection(list, itr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewLoopService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用Java 5版本之後支援的Iterator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopCollection</span><span class="params">(Collection col, Iterator itr)</span> </span>&#123;</span><br><span class="line">        itr = col.iterator();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 這時會是使用EnumeratorAdaptor內的hasNext()與next() 達到轉接的效果</span></span><br><span class="line">        <span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">            System.out.println(itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過以上方法, 可以把要使用Enumeration方式的service, 但該Service又是只能吃Iterator的輸入, 那就可以實作一個 <code>EnumeratorAdaptor</code>, 帶入Service, 並透過轉接器使用 Enumeration的方式去撈出Collection內容.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假如要使用A, 但無法直接使用, 只能使用B介面&lt;/p&gt;
&lt;p&gt;所以我們用轉接器類別包裝A的方法，並且實作B，達到轉接的效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Observer Pattern 觀察者模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Observer-Pattern-%E8%A7%80%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Observer-Pattern-觀察者模式/</id>
    <published>2020-07-26T08:59:48.000Z</published>
    <updated>2020-08-06T11:47:34.391Z</updated>
    
    <content type="html"><![CDATA[<p>觀察者模式可以讓物件了解資料變化的情況。<br>物件甚至可以在執行期間決定是否要繼續被通知，又或者是可以主動去詢問資料的狀態。<br>在此模式中也會了解一對多，以及物件鬆綁的意義是如何。</p><a id="more"></a><h3 id="以氣象監測系統的概況來當做例子"><a href="#以氣象監測系統的概況來當做例子" class="headerlink" title="以氣象監測系統的概況來當做例子"></a>以氣象監測系統的概況來當做例子</h3><p>假設系統中有三個組成要件：<br>(1) 氣象站: 獲取實際氣象的物理裝置，假設有三個:溫度,濕度,壓力感應<br>(2) Weather Data物件: 追蹤來自氣象站的資料，並且顯示在佈告版上<br>(3) 佈告版: 將Weather Data物件給予的資料呈現出來</p><p>整個例子會有，一個氣象站(產出假的氣象資料)，Weather Data物件(獲取氣象資料並通知佈告版)，佈告版將拿到的資料給呈現出來</p><h3 id="沒使用觀察者模式-Observer-Pattern的情況"><a href="#沒使用觀察者模式-Observer-Pattern的情況" class="headerlink" title="沒使用觀察者模式 Observer Pattern的情況"></a>沒使用觀察者模式 Observer Pattern的情況</h3><p>初學者會很直覺的寫出這樣的程式架構：</p><h4 id="佈告欄"><a href="#佈告欄" class="headerlink" title="佈告欄"></a>佈告欄</h4><p>CurrentConditionsDisplay.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.temp = temp;</span><br><span class="line">       <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">       <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 顯示資料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        System.out.println(humidity);</span><br><span class="line">        System.out.println(pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="WeatherData-class"><a href="#WeatherData-class" class="headerlink" title="WeatherData.class"></a>WeatherData.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line">    <span class="comment">// instance variable declarations</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宣告佈告欄</span></span><br><span class="line">    CurrentConditionsDisplay currentConditionsDisplay;</span><br><span class="line">    StatisticsDisplay statisticsDisplay;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 建構子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        CurrentConditionsDisplay currentConditionsDisplay,</span></span></span><br><span class="line"><span class="function"><span class="params">        StatisticsDisplay statisticsDisplay</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentConditionsDisplay = currentConditionsDisplay;</span><br><span class="line">        <span class="keyword">this</span>.statisticsDisplay = statisticsDisplay;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> temp = getTemperature();</span><br><span class="line">        <span class="keyword">float</span> humidity = getHumidity();</span><br><span class="line">        <span class="keyword">float</span> pressure = getPressure();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 對佈告欄類別進行更新他們的顯示內容</span></span><br><span class="line">        currentConditionsDisplay.update(temp, humidity, pressure);</span><br><span class="line">        statisticsDisplay.update(temp, humidity, pressure);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 其他WeatherData function...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是以上程式結構會有耦合性的狀況：</p><p><img src="https://i.imgur.com/gpIs58H.png" alt=""></p><p>所以接下來來了解觀察者模式的內涵</p><h4 id="觀察者模式解析"><a href="#觀察者模式解析" class="headerlink" title="觀察者模式解析"></a>觀察者模式解析</h4><p>定義了物件之間一對多關係，如此一來，當一個物件改變狀態時，其他相依者都會收到通知並自動做改變</p><p>其示意圖如下：</p><p><img src="https://i.imgur.com/d1zWR3x.png" alt=""></p><p>主題與觀察者們定義了一對多的關係</p><p>若要實踐出可以隔離主題和觀察者們的方式，以 <code>Subject</code>介面和<code>Observer</code>介面最為常見</p><p><img src="https://i.imgur.com/C155cCF.png" alt=""></p><p>在這張圖要注意一個重點是，由於現在已經針對介面實作，現在的Subject中的註冊Observer都是以註冊”<span style="color:red">介面</span>“為主！而非是像上面一開始的新手例子是直接針對實踐而寫</p><p>如此一來如果要在新增一個佈告欄叫做ForecastDisplay，直接實踐Observer就好，這樣就不用動到實踐Subject介面的WeatherData之程式碼</p><p><img src="https://i.imgur.com/GJTGp80.png" alt=""></p><h4 id="以觀察者模式來重寫氣象監測系統"><a href="#以觀察者模式來重寫氣象監測系統" class="headerlink" title="以觀察者模式來重寫氣象監測系統"></a>以觀察者模式來重寫氣象監測系統</h4><p>Subject.interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObserverInterface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WeatherData.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向觀察者們送以改動的資料</span></span><br><span class="line">    <span class="comment">// 可以看到現在我們是直接註冊Observer介面，如此一來觀察者類別的實作就不用去在意</span></span><br><span class="line">    <span class="comment">// 只要知道要註冊的對象必須要有實作Observer介面就好</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;observers.size(); i++) &#123;</span><br><span class="line">            Observer observer = (Observer)observers.get(i);</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 執行向觀察者們通知資料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 讀取假資料，可以改動這地方，改為向氣象局網站爬資料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> temperature,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> humidity,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡我們只實踐一個佈告欄 CurrentConditionDisplay</p><p>CurrentConditionDisplay.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current condition: "</span>+temperature + <span class="string">"F degrees and "</span> + humidity + <span class="string">"% humidity and "</span>+ pressure + <span class="string">" pressure"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行程式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        CurrentConditionDisplay currentDisplay = <span class="keyword">new</span> CurrentConditionDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">64</span>, <span class="number">30.4f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到以下結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Current condition: 80.0F degrees and 64.0% humidity and 30.4 pressure</span><br></pre></td></tr></table></figure><p>之後只要透過主題呼叫觀察者的update()的方法，就可以通知新的資料給觀察者</p><p>並且透過註冊的方式+只加入針對實踐Observer介面的觀察者，如此一來可以達到分離主題物件與觀察者物件的邏輯，之後新增新的佈告欄就不用動到主題的程式邏輯。</p><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><h4 id="java-sdk也有自行提供Observer方法"><a href="#java-sdk也有自行提供Observer方法" class="headerlink" title="java sdk也有自行提供Observer方法"></a>java sdk也有自行提供Observer方法</h4><p>其中會有<code>setChange()</code>的方法，主要讓呼叫者定義什麼時候才要通知新的資料給觀察者，避免每次資料一改變就一直通知觀察者。Ex: 如果沒有setChanged的方法，WeahterData物件就會持續不斷的通知觀察者，所以若我們希望溫度差距半度才更新，溫度差距插到半度以上，主題才會呼叫觀察者的update()的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">setChanged() &#123;</span><br><span class="line">    changed = ture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyObservers(Object arg) &#123;</span><br><span class="line">    if(changed) &#123;</span><br><span class="line">        for every observer on the list &#123;</span><br><span class="line">            call update(this. org)</span><br><span class="line">        &#125;</span><br><span class="line">        changed = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyObsergers() &#123;</span><br><span class="line">    notifyObservers(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;觀察者模式可以讓物件了解資料變化的情況。&lt;br&gt;物件甚至可以在執行期間決定是否要繼續被通知，又或者是可以主動去詢問資料的狀態。&lt;br&gt;在此模式中也會了解一對多，以及物件鬆綁的意義是如何。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Strategy Pattern 策略模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Strategy-Pattern-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Strategy-Pattern-策略模式/</id>
    <published>2020-07-26T08:58:12.000Z</published>
    <updated>2020-08-06T11:47:03.917Z</updated>
    
    <content type="html"><![CDATA[<p>可以在執行期動態更換物件的行為</p><p>『策略模式』定義了演算法家族，將他們個別封裝起來，可以讓他們之間互相替換，此模式不會影響到使用此演算法的程式。</p><a id="more"></a><h2 id="沒有思考使用設計模式的時候-模擬鴨子版本"><a href="#沒有思考使用設計模式的時候-模擬鴨子版本" class="headerlink" title="沒有思考使用設計模式的時候:模擬鴨子版本"></a>沒有思考使用設計模式的時候:模擬鴨子版本</h2><p>假設我們要開發模擬鴨子遊戲，會有各種不同的鴨子，這時候會們通常都會先設計出一個class叫做 Duck，然後Duck會包含鴨子的共同行為：發出叫聲 quack(), 游泳 swin(), 以及展現外觀 display()，然後有綠頭鴨 MallardDuck class和 紅頭鴨 RedheadDuck class分別繼承 Duck類別</p><p>(做UML)</p><p>若現在需要讓每隻鴨子都會飛，我們會很直覺的在 Duck class中加入 fly()</p><p>但若現在有個橡皮鴨子，會不小心繼承到Duck class的fly(), 但橡皮鴨不會飛！</p><h3 id="用繼承的可以改善作法"><a href="#用繼承的可以改善作法" class="headerlink" title="用繼承的可以改善作法"></a>用繼承的可以改善作法</h3><p>直接在橡皮鴨 class中的fly() 不定義任何事情</p><p>(做UML)</p><h4 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h4><p>若又遇到誘餌鴨，就會面臨fly()沒定義任何事情，quack()也沒定義任何事情<br>因為若有很多新型態的鴨子，會導致每一個不同的鴨子都得檢視該鴨子是否可飛或可叫</p><p>(做UML)</p><h3 id="改用介面做改善"><a href="#改用介面做改善" class="headerlink" title="改用介面做改善"></a>改用介面做改善</h3><p>將fly與quack從Duck抽離出來變成 Flyable與Quackable介面，讓有需要飛或叫的鴨子實作之</p><h4 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h4><p>重複的程式碼會變超多，因為同樣會飛或叫的鴨子都各自實作了Flyable與Quackable介面的程式碼，該程式碼邏輯都是相同的。</p><h3 id="設計守則-一"><a href="#設計守則-一" class="headerlink" title="設計守則(一)"></a>設計守則(一)</h3><ul><li><p>找出程式中需要更動之處，並將之獨立出來，不要和那些不需要更動的程式碼混在一起</p></li><li><p>把會變動的部分取出來並將之封裝起來，以便以後可以輕易地擴充此部分，而不影響不需要更動的部分。</p></li></ul><blockquote><p>將鴨子的行為從Duck類別取出來！</p></blockquote><h3 id="抽離會變動的部分成為獨立類別"><a href="#抽離會變動的部分成為獨立類別" class="headerlink" title="抽離會變動的部分成為獨立類別"></a>抽離會變動的部分成為獨立類別</h3><p>將飛行行為 fly,與呱呱叫行為 quack獨立成class</p><p>並且在Duck類別設置 “可以設定行為的方法”，可以在“執行期”動態地改變鴨子的飛行或呱呱叫行為</p><h3 id="設計守則-二"><a href="#設計守則-二" class="headerlink" title="設計守則(二)"></a>設計守則(二)</h3><p>寫程式是針對介面而寫，而不是針對實踐</p><h3 id="用介面代表每個行為-FlyBehavior-QuackBehavior"><a href="#用介面代表每個行為-FlyBehavior-QuackBehavior" class="headerlink" title="用介面代表每個行為: FlyBehavior, QuackBehavior"></a>用介面代表每個行為: FlyBehavior, QuackBehavior</h3><p>用各個鴨子的行為類別去實踐FlyBehavior和QuackBehavior介面<br>而不是由Duck類別實踐該介面</p><p>:::info<br>寫程式是針對介面去寫：其真正意思是『寫程式是針對超型態(supertype)而寫』</p><p>使用超型態的話可以不用理會以後執行時的真正物件型態：為“多型”的實踐</p><p>ex:</p><p>Animal interface { makeSound() }<br>Dog implment Animal { makeSound() { bark() }}<br>Cat implement Animal { makeSound() { meow() }}</p><p>Animal animal = new Dog();<br>animal.makeSound();</p><p>有個好處是，可以不用直接在一開始僵化某個變數的宣告型態 ex: Dog x = new dog(); // 僵化了x變數為dog型態</p><p>而是可以在執行期，也就是使用的時候指定該物件型態</p><p>ex:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 定義getAnimal為回傳Dog();</span><br><span class="line">x = getAnimal(); // 得到 Dog型態</span><br><span class="line">x.makeSound(); // 發出狗叫聲</span><br><span class="line"></span><br><span class="line">// 將getAnimal() 中改成傳回Cat();</span><br><span class="line">x = getAnimal(); // 得到 Cat型態</span><br><span class="line">x.makeSound(); // 發出貓叫聲</span><br></pre></td></tr></table></figure><p>:::</p><h2 id="實踐鴨子的行為"><a href="#實踐鴨子的行為" class="headerlink" title="實踐鴨子的行為"></a>實踐鴨子的行為</h2><ul><li><p>FlyBehavior介面，用FlyWithWings(實踐所有有翅膀的鴨子會飛的行為)與FlyNoWay(實踐所有不會飛的鴨子的動作)這兩個類別來實作</p></li><li><p>QuackBehavior介面，用Quack(真的呱呱叫)、Squeak(橡皮吱吱叫)與MuteQuack(叫不出聲音)這三個類別來實作</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上設計將飛行與呱呱叫的行為可以被其他物件再三利用，將鴨子的行為抽離出來</span><br></pre></td></tr></table></figure><h3 id="問題與思考"><a href="#問題與思考" class="headerlink" title="問題與思考"></a>問題與思考</h3><ol><li>是否該先把系統做出來，在看看哪些地方需要更動，再回頭將需更動的邏輯獨立出來？<ul><li>答：不儘然，設計系統中可以預先考慮到未來哪些地方可能需要變動</li></ul></li><li>鴨子是不是也可以設計成一個介面？<ul><li>答: 不恰當，因為已經將會變動的邏輯(fly與quack)抽離出dock class, 那dock class就可以直接為每隻鴨子都會有同樣邏輯的類別，讓不同類型的鴨子直接繼承使用</li></ul></li></ol><h2 id="整合鴨子的行為"><a href="#整合鴨子的行為" class="headerlink" title="整合鴨子的行為"></a>整合鴨子的行為</h2><p>將飛行與呱呱叫的動作，委託其他人處理 (在Dock類別中宣告 FlyBehavior與QuackBehavior，透過Behavior介面取得 有實作該Behavior介面的行為們 ex: FlyBehavior介面會有FlyWithNoWings類別實作)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Duck &#123;</span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    </span><br><span class="line">    public void performQuack() &#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void performFly() &#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>現在由綠頭鴨(MallarDuck)來使用Duck的quackBehavior所擁有的有實踐自己的子類別 Quack()<br>用flyBehavior的FlyWithNoWings</p><p>且MallarDuck繼承了Duck類別，所以可以使用quackBehavior和flyBehavior取用自己對應的動作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class MallardDuck extends Duck &#123;</span><br><span class="line">    // constructor</span><br><span class="line">    pubilc MallardDuck() &#123;</span><br><span class="line">        quackBehavior = new Quack();</span><br><span class="line">        flyBehavior = new FlyWithNoWings();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    quackBehavior.performQuack(); </span><br><span class="line">    flyBehavior.performFly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="完整測試的code：實作一個MiniDuck"><a href="#完整測試的code：實作一個MiniDuck" class="headerlink" title="完整測試的code：實作一個MiniDuck"></a>完整測試的code：實作一個MiniDuck</h2><h3 id="Duck-class"><a href="#Duck-class" class="headerlink" title="Duck class"></a>Duck class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line">    QuackBehavior quackBehavior;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"All ducks float, even decoys!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FlyBehavior-and-QuackBehavior介面與實踐之的動作"><a href="#FlyBehavior-and-QuackBehavior介面與實踐之的動作" class="headerlink" title="FlyBehavior and QuackBehavior介面與實踐之的動作"></a>FlyBehavior and QuackBehavior介面與實踐之的動作</h3><p>FlyBehavior.inrface<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>各種實踐Fly的類別</p><p>FlyWithWings.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am flying"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>FlyNoWay.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I cannot fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>QuackBehavior.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>各種實踐Quack的類別</p><p>Quack.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Quack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MuteQuack.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt;Silence&gt;&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Squeak.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Squeak"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="實踐綠頭鴨的類別：MallardDuck-java"><a href="#實踐綠頭鴨的類別：MallardDuck-java" class="headerlink" title="實踐綠頭鴨的類別：MallardDuck.java"></a>實踐綠頭鴨的類別：MallardDuck.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="comment">// constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am a real Mallard duck"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="測試用類別：MiniDuckSimulator-java"><a href="#測試用類別：MiniDuckSimulator-java" class="headerlink" title="測試用類別：MiniDuckSimulator.java"></a>測試用類別：MiniDuckSimulator.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Duck mallard = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 會呼叫 MallardDuck繼承來的performQuack()</span></span><br><span class="line">       <span class="comment">// 進而委託 quackBehavior處理quack行為，而非在自己class內處理</span></span><br><span class="line">       mallard.performQuack();</span><br><span class="line">       mallard.performFly();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="動態設定行為"><a href="#動態設定行為" class="headerlink" title="動態設定行為"></a>動態設定行為</h2><p>在鴨子類別中可以加入設置flyBehavior和quackBehavior的方法</p><p>可以隨時呼叫以下方法改變鴨子的行為<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior fb)</span> </span>&#123;</span><br><span class="line">       flyBehavior = fb;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior qb)</span> </span>&#123;</span><br><span class="line">       quackBehavior = qb;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如有個 “模型鴨“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> FlyNoWay();</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Model duck"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立一個新的FlyBehavior型態，具有火箭噴射的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am flying a rocket"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改變測試類別，加上模型鴨子，使模型鴨具有火箭動力！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Duck mallard = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 具有噴射動力的模型鴨子</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Duck modelDuck = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">        modelDuck.performFly(); <span class="comment">// 不會飛</span></span><br><span class="line">        <span class="comment">// 動態地更換飛行的行為</span></span><br><span class="line">        modelDuck.setFlyBehavior(<span class="keyword">new</span> FlyRocketPowered());</span><br><span class="line">        modelDuck.performFly(); <span class="comment">// 噴射！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的行為為將兩個類別(FlyBehavior與QuackBehavior)組合起來使用，為”Composition 合成”的精神，與繼承不一樣的是，鴨子Duck的行為不是繼承而來，而是透過適當的行為物件『合成』而來！</p><h3 id="設計守則"><a href="#設計守則" class="headerlink" title="設計守則"></a>設計守則</h3><p>多用合成，少用繼承</p><p>合成可以將演算法封裝成類別，更可以『在執行動態地改變行為』，只要合成的行為物件，符合特定的介面標準即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以在執行期動態更換物件的行為&lt;/p&gt;
&lt;p&gt;『策略模式』定義了演算法家族，將他們個別封裝起來，可以讓他們之間互相替換，此模式不會影響到使用此演算法的程式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Factory Pattern 工廠模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Factory-Pattern-%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Factory-Pattern-工廠模式/</id>
    <published>2020-07-26T08:57:20.000Z</published>
    <updated>2020-07-29T11:50:13.089Z</updated>
    
    <content type="html"><![CDATA[<p>工廠模式提供了可創建(new)各種不同類別(class)的實例(instance)</p><p>工廠模式主要又涵蓋了 (1) 簡單工廠模式 Simple Factory Pattern (2) 工廠方法模式 (3) 抽象方法模式</p><p>簡單工廠方法是最初階的用法，會違反OOP的Open-close principle(OCP)<br>然而工廠方法和抽象方法則比較能讓模組間耦合度降低。</p><p>以下會依序做介紹</p><a id="more"></a><h2 id="簡單工廠模式-Simple-Factory-Method"><a href="#簡單工廠模式-Simple-Factory-Method" class="headerlink" title="簡單工廠模式 Simple Factory Method"></a>簡單工廠模式 Simple Factory Method</h2><p>簡單工廠模式僅提供一個工廠類別，接收參數(決定生產哪種產品)，來產生出對應的產品物件(Object)</p><p>以生產Pizza為例，假設我們有個披薩簡單工廠(SimplePizzaFactory)可以生產兩種不同口味的Pizza(Cheese和Potato):</p><p>SimplePizzaFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工廠會回傳抽象的Pizza類別</p><p>Pizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  String ingridient;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing"</span> + name);</span><br><span class="line">    System.out.println(<span class="string">"Ingredient"</span> + ingridient);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Bake for 20 mins"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及實作了兩個口味的披薩 CheesePizza和PotatoPizza</p><p>CheesePizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name = <span class="string">"CheesePizza"</span>;</span><br><span class="line">  String ingridient = <span class="string">"Cheese"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PotatoPizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PotatoPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name = <span class="string">"PotatoPizza"</span>;</span><br><span class="line">  String ingridient = <span class="string">"Potato"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Pizza都定義完畢後，定義SimplePizzaFactory.java</p><p>SimplePizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Main.java透過SimplePizzaFactory製作兩個Pizza:</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SimplePizzaFactory simplePizzaFactory = <span class="keyword">new</span> SimplePizzaFactory();</span><br><span class="line">    </span><br><span class="line">    simplePizzaFactory.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">    simplePizzaFactory.orderPizza(<span class="string">"potato"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行Main.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Preparing: CheesePizza</span><br><span class="line">Ingredient: Cheese</span><br><span class="line">Bake for 20 mins</span><br><span class="line">Preparing: PotatoPizza</span><br><span class="line">Ingredient: Potato</span><br><span class="line">Bake for 20 mins</span><br></pre></td></tr></table></figure><p>但此若之後要擴充Pizza的種類，例如要多一個叫做OnionPizza，勢必得修改SimplePizzaFacotory.java</p><p>SimplePizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"onion"</span>)) &#123; <span class="comment">// 新增洋蔥口味pizza  </span></span><br><span class="line">      pizza = <span class="keyword">new</span> OnionPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>:::danger<br>上述做法破壞了OOD的OCP(Open-Close Principle)的原則，亦即進行擴充時不修改到SimplePizzaFactory的程式碼。<br>:::</p><h2 id="工廠方法模式"><a href="#工廠方法模式" class="headerlink" title="工廠方法模式"></a>工廠方法模式</h2><p>為了改善簡單工廠模式，工廠方法模式透過”抽象方法”的模式，讓之後擴充的工廠實作該”抽象方法”，以進行其他類別的擴充</p><p>舉例：有個PizzaFactory負責定義了Pizza工廠該做的一件事(抽象方法)<br>叫做 createPizza();</p><p>PizzaFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本我們已經有兩種口味(Cheese和Potato) Pizza，叫做原味披薩(OriginalPizzaFactory), 使OringinalPizzaFactory去實作PizzaFactory的createPizza()方法</p><p>OringinalPizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OriginalPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"potato"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> PotatoPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>若要新增洋蔥口味的Pizza的話，那就直接在定義一個額外的工廠叫做，特別披薩工廠 (SpecialPizzaFactory)進行擴充，如此一來就不用更動到到原本原味披薩工廠(OriginalPizzaFactory)的程式碼</p><p>SpecialPizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecialPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"onion"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> OnionPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>記得多新增一個洋蔥披薩的類別 </p><p>OnionPizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnionPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OnionPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"OnionPizza"</span>;</span><br><span class="line">    ingridient = <span class="string">"Onion"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Main.java中呼叫原味和特別口味的披薩</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    PizzaFactory originalPizzaFactory = <span class="keyword">new</span> OriginalPizzaFactory();</span><br><span class="line">    </span><br><span class="line">    originalPizzaFactory.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">    originalPizzaFactory.orderPizza(<span class="string">"potato"</span>);</span><br><span class="line"></span><br><span class="line">    PizzaFactory specialPizzaFactory = <span class="keyword">new</span> SpecialPizzaFactory();</span><br><span class="line">    specialPizzaFactory.orderPizza(<span class="string">"onion"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>透過下面的圖可以看到，透過定義一個抽象方法的工廠，若要擴充產品(在這裡我們用的是Pizza)類別的話，透過實作該抽象方法工廠，來進行擴充。</p><p><img src="https://i.imgur.com/cmWuZ3v.png" alt=""></p><p>由於我們亦把Pizza類別給獨立出來成為一個抽象類別，若要新增其他口味的Pizza也可以達到不違反OCP精神的擴充，如下圖所示：</p><p><img src="https://i.imgur.com/Wp4QRfE.png" alt=""></p><h2 id="抽象工廠"><a href="#抽象工廠" class="headerlink" title="抽象工廠"></a>抽象工廠</h2><p>抽象工廠顧名思義就是定義一個抽象介面工廠，欲擴充的話就實作該抽象介面工廠</p><p>以披薩原料工廠(PizzaIngredientFactory)為例，有醬料和蔬菜兩種原料：<br>方面給之後我們要製作的中式和美式披薩的原料實作，做擴展：</p><p>PizzaIngredientFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="抽象工廠-原料工廠-在透過工廠方法來製作原料產品"><a href="#抽象工廠-原料工廠-在透過工廠方法來製作原料產品" class="headerlink" title="抽象工廠(原料工廠)在透過工廠方法來製作原料產品"></a>抽象工廠(原料工廠)在透過工廠方法來製作原料產品</h3><p>我們再分別產生美式版本(AmericaIngredientFactory)和中式版本(ChinesePizzaFactory)的披薩原料工廠，可以看到使用了createSauce和createVegetable，透過工廠方法來產生原料產品</p><p>AmericaIngredientFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomatoSauce();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Potato();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ChineseIngredientFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SoySauce();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Vegetable <span class="title">createVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Onion();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接著定義剛剛原料工廠有使用到的原料類別們(Sauce: SoySauce與PotatoSauce; Vegetable: Onion和Potato，該原料亦在實作Pizza類別的具體類別亦會用到</p><p>:::info<br>Pizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在Pizza類別中已經有宣告會用到的原料有哪些，是以介面來實作，方便做擴展</span></span><br><span class="line">  Sauce sauce;</span><br><span class="line">  Vegetable vegetable;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>:::</p><p>定義醬料Sauce原料們：</p><p>Sauce.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Sauce</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getSauce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SoySauce.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoySauce</span> <span class="keyword">extends</span> <span class="title">Sauce</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoySauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"soy sauce"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The sauce is :"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TomatoSauce.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomatoSauce</span> <span class="keyword">extends</span> <span class="title">Sauce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TomatoSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"tomato sauce"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The sauce is :"</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下來換定義Vegetable原料們</p><p>Vegetable.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getVegetable</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Onion.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Onion</span> <span class="keyword">extends</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Onion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"onion"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The vegetable is :"</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Potato.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Potato</span> <span class="keyword">extends</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Potato</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    name = <span class="string">"potato"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"The vegetable is :"</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>將披薩修改成包含上述原料 (Sauce和Vegetable)</p><p>Pizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  </span><br><span class="line">  Sauce sauce;</span><br><span class="line">  Vegetable vegetable;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 將prepare修改成抽象，該方法需要收集Pizza所需的原料，原料來自於原料工廠！</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Bake for 30 mins"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定義兩個style的Pizza: 中式披薩(Chinese Pizza)和美式披薩(America Pizza)，在這兩隻類別可以看到我們傳入了原料工廠，以決定哪種風格的披薩就用對應風格的原料工廠</p><p>ChinesePizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ChinesePizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing: "</span> + name);</span><br><span class="line"></span><br><span class="line">    sauce = ingredientFactory.createSauce();</span><br><span class="line">    sauce.getSauce();</span><br><span class="line"></span><br><span class="line">    vegetable = ingredientFactory.createVegetable();</span><br><span class="line">    vegetable.getVegetable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AmericaPizza.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericaPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">  PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AmericaPizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Preparing: "</span> + name);</span><br><span class="line"></span><br><span class="line">    sauce = ingredientFactory.createSauce();</span><br><span class="line">    sauce.getSauce();</span><br><span class="line"></span><br><span class="line">    vegetable = ingredientFactory.createVegetable();</span><br><span class="line">    vegetable.getVegetable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>接著再利用工廠方法，定義中式和美式的披薩工廠，製作出中式和美式的披薩</p><p>PizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    pizza = createPizza(type);</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AmericaPizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericaPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String style)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用了美式原料工廠</span></span><br><span class="line">    PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> AmericaIngredientFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(style.equals(<span class="string">"America"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> AmericaPizza(ingredientFactory);</span><br><span class="line">      pizza.setName(<span class="string">"America style pizza"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>:::info<br>可以在對美式工廠新增其他種不同口味的Pizza，用不同的原料工廠來達成<br>:::</p><p>ChinesePizzaFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinesePizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String style)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用了中式原料工廠</span></span><br><span class="line">    PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> ChineseIngredientFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(style.equals(<span class="string">"Chinese"</span>)) &#123;</span><br><span class="line">      pizza = <span class="keyword">new</span> ChinesePizza(ingredientFactory);</span><br><span class="line">      pizza.setName(<span class="string">"Chinese style pizza"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>最後在Main.java中來製作披薩：</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    PizzaFactory AmericaPizzaFactory = <span class="keyword">new</span> AmericaPizzaFactory();</span><br><span class="line">    </span><br><span class="line">    AmericaPizzaFactory.orderPizza(<span class="string">"America"</span>);</span><br><span class="line"></span><br><span class="line">    PizzaFactory ChinesePizzaFactory = <span class="keyword">new</span> ChinesePizzaFactory();</span><br><span class="line"></span><br><span class="line">    ChinesePizzaFactory.orderPizza(<span class="string">"Chinese"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到抽象工廠方法可以幫我們把相關產品集結起來(上述例子為原料們)，可以產生出不同組的原料類別們，另外抽象工廠通常還會再搭配工廠方法，來建立其產品(披薩們，各個披薩會用到各個不同的抽象工廠所建立的原料工廠)，如同該連結所做的-&gt;<a href="#抽象工廠(原料工廠">連結</a>在透過工廠方法來製作原料產品)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工廠模式提供了可創建(new)各種不同類別(class)的實例(instance)&lt;/p&gt;
&lt;p&gt;工廠模式主要又涵蓋了 (1) 簡單工廠模式 Simple Factory Pattern (2) 工廠方法模式 (3) 抽象方法模式&lt;/p&gt;
&lt;p&gt;簡單工廠方法是最初階的用法，會違反OOP的Open-close principle(OCP)&lt;br&gt;然而工廠方法和抽象方法則比較能讓模組間耦合度降低。&lt;/p&gt;
&lt;p&gt;以下會依序做介紹&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Singleton Pattern 獨體模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Singleton-Pattern-%E7%8D%A8%E9%AB%94%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/26/Design-Pattern-Java-Singleton-Pattern-獨體模式/</id>
    <published>2020-07-26T08:56:27.000Z</published>
    <updated>2020-07-29T11:50:30.495Z</updated>
    
    <content type="html"><![CDATA[<p>每次引用類別都只會產出相同的物件</p><p>適合用在: 執行緒池(thread pool)，快取區(cache)，對話盒、處理對話設定和登錄的物件，和驅動程式溝通的物件。</p><a id="more"></a><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><p>假如有一個類別叫做MyClass，現在要讓MyClass變成獨體模式，讓外面的類別只能透過 MyClass.getInstance() 取得MyClass物件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 設定成private與static，不能給外面類別存取</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 將建構式設定成 private，這樣就可以避免直接被類別 new出來</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 設置成static，使外面類別可以直接存取MyClass.getInstance方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若第一次取得MyClass， new 出MyClass();</span></span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> MyClass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他類別要取用MyClass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">    // 1. 第一次取用getInstance</span><br><span class="line">    Myclass instance = MyClass.getInstance();</span><br><span class="line">    // 2. 第二次取用getInstance時，MyClass的uniqueInstance已經有值了，得到與上面instance一樣的object</span><br><span class="line">    Myclass instance1 = MyClass.getInstance();</span><br><span class="line">    </span><br><span class="line">    if(instance == instance1) &#123;</span><br><span class="line">        System.out.println(&quot;instance and instance1 are the same&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多執行緒下獨體模式會遇到的狀況"><a href="#多執行緒下獨體模式會遇到的狀況" class="headerlink" title="多執行緒下獨體模式會遇到的狀況"></a>多執行緒下獨體模式會遇到的狀況</h2><p>假如有兩個thread(thread 1和thread 2)，同時要跟MyClass取得物件，但會面臨thread1和thread2會取得不同的MyClass物件，情況如下：</p><p><img src="https://i.imgur.com/OjAKXpb.png" alt=""></p><h3 id="解法一：只要把getInstance-給同步化-會有效能不佳的狀況，可能造成效率下降100倍"><a href="#解法一：只要把getInstance-給同步化-會有效能不佳的狀況，可能造成效率下降100倍" class="headerlink" title="解法一：只要把getInstance()給同步化 (會有效能不佳的狀況，可能造成效率下降100倍)"></a>解法一：只要把getInstance()給同步化 (會有效能不佳的狀況，可能造成效率下降100倍)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 設定成synchronized，就可以讓執行緒依序進入getInstance內</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> MyClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> MyClass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我們只需要第一次進入getInstance才進行同步化就好，不然其他次要取得uniqueInstnace都得變成同步的方式，造成取用Instance的緩慢</p><h3 id="解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體"><a href="#解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體" class="headerlink" title="解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體"></a>解法二：率先建立實體，不要等到有人呼叫getInstance才new出MyClass實體</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 直接初始話MyClass()，並設成private</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass uniqueInstnace = <span class="keyword">new</span> MyClass();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此作法依賴JVM載入此類別時，馬上建立此唯一的獨體物件，JVM保證在任何執行緒存取uniqueInstnace靜態變數之前，一定先建立此實體</p><h3 id="解法三：利用-“雙重檢查上鎖”-在getInstance-中減少使用同步化"><a href="#解法三：利用-“雙重檢查上鎖”-在getInstance-中減少使用同步化" class="headerlink" title="解法三：利用 “雙重檢查上鎖” 在getInstance()中減少使用同步化"></a>解法三：利用 “雙重檢查上鎖” 在getInstance()中減少使用同步化</h3><p>利用雙重檢查上鎖，首先檢查是否實體已經建立了，<br>若沒有，“才”進行同步化，如此一來只有第一次進入getInstance才同步化，才是我們所想要的。</p><p><code>`</code>java=<br>public class MyClass {<br>    // volatile為Java 6之後才有的關鍵字，能夠使執行緒們取得相同的uniqueInstance<br>    private volatile static MyClass uniqueInstance;</p><pre><code>private MyClass() {}public static MyClass getInstance() {    // 只有第一次才徹底執行以下程式碼     // 當執行緒遇到被宣告成volatile的uniqueInstnace，會變得謹慎    if(uniqueInstance == null) {        synchronized(MyClass.class) {            // 再檢查一次，若為null則new MyClass();            if(uniqueInstance == null) {                uniqueInstance = new MyClass();            }        }    }    return uniqueInstance;}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次引用類別都只會產出相同的物件&lt;/p&gt;
&lt;p&gt;適合用在: 執行緒池(thread pool)，快取區(cache)，對話盒、處理對話設定和登錄的物件，和驅動程式溝通的物件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Command Pattern 命令模式 [Design Pattern in Java]</title>
    <link href="http://a10000005588.github.io/2020/07/26/Design-Pattern-Command-Pattern-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://a10000005588.github.io/2020/07/26/Design-Pattern-Command-Pattern-命令模式/</id>
    <published>2020-07-26T08:52:42.000Z</published>
    <updated>2020-07-29T11:50:00.570Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式主要將執行的命令, 與執行者做鬆綁的動作</p><a id="more"></a><h2 id="沒有命令模式會是怎樣的寫法？？"><a href="#沒有命令模式會是怎樣的寫法？？" class="headerlink" title="沒有命令模式會是怎樣的寫法？？"></a>沒有命令模式會是怎樣的寫法？？</h2><p>假如我們現在要寫一個 遙控器 RemoteControl (執行者), 上面會有很多按鈕功能 (命令)</p><p>每個按鈕可能都對應各個功能, 例如 打開, 關閉某些房間的燈</p><p>於是我們定義了 <code>Light</code> 抽象類別, 有著 <code>on()</code>與<code>off()</code>開關燈的方法, 並且實作了 <code>LivingRoomLight</code>, <code>KitchenLight</code>這兩個房間並繼承 <code>Light</code>抽象類別的方法, 使他們都有開關的功能！</p><p>接著在遙控器 <code>RemoteControl</code>類別內定義了 <code>Light[]</code> 陣列, 儲存欲執行的功能 (實作Light的類別們)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定義出一個遙控器instance</span></span><br><span class="line">        RemoteControl remoteControl =</span><br><span class="line">                <span class="keyword">new</span> RemoteControl(</span><br><span class="line">                <span class="keyword">new</span> Light[]&#123;</span><br><span class="line">                        <span class="keyword">new</span> LivingRoomLight(),</span><br><span class="line">                        <span class="keyword">new</span> KitchenLight()</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// 0: 打開LivingRoom Light</span></span><br><span class="line">        <span class="comment">// 1: 打開Kitchen Light</span></span><br><span class="line">        remoteControl.turnOnLight(<span class="number">0</span>);</span><br><span class="line">        remoteControl.turnOnLight(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 0: 關閉LivingRoom Light</span></span><br><span class="line">        <span class="comment">// 1: 關閉Kitchen Light</span></span><br><span class="line">        remoteControl.turnOffLight(<span class="number">0</span>);</span><br><span class="line">        remoteControl.turnOffLight(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Light[] lights = <span class="keyword">new</span> Light[<span class="number">10</span>];</span><br><span class="line">    RemoteControl(Light[] lights) &#123;</span><br><span class="line">        <span class="comment">// 將傳進來的lights放入到lights內</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lights[i] = lights[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOnLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOffLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    Light() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingRoomLight</span> <span class="keyword">extends</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    LivingRoomLight() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the living room light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn off the living room light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KitchenLight</span> <span class="keyword">extends</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    KitchenLight() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the kitchen light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn off the kitchem light"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行結果如下</p><p><img src="https://i.imgur.com/AvxerGU.png" alt=""></p><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>假如現在又想要添加電視與冷氣開關的功能 <code>TV</code>, <code>AirConditioner</code>, 那不就又要在<code>RemoteControl</code>類別內進行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 又新增了HomeDevice陣列...定義家具集合的類別</span></span><br><span class="line">    HomeDevice[] homeDevices = <span class="keyword">new</span> HomeDevice[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    Light[] lights = <span class="keyword">new</span> Light[<span class="number">10</span>];</span><br><span class="line">    RemoteControl(Light[] lights) &#123;</span><br><span class="line">        <span class="comment">// 將傳進來的lights放入到lights內</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lights[i] = lights[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOnLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOffLight</span><span class="params">(<span class="keyword">int</span> buttonNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lights[buttonNumber].off();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 又在定義HomeDevice的開關功能...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可看到每次若要為遙控器類別新增功能, 都要對<code>RemoteControl</code>進行修改的動作, 如此一來可能會造成其他已經內嵌好的功能可能被改壞的狀況發生, 這時我們可以使用 <code>Command 模式</code> 來避免這種狀況發生</p><h2 id="Command-命令模式的優勢"><a href="#Command-命令模式的優勢" class="headerlink" title="Command 命令模式的優勢"></a>Command 命令模式的優勢</h2><p>命令模式可以幫我們把要賦予<code>RemoteControl</code>的這些功能給封裝起來, 成為一個獨立的個體, 不會跟<code>RemoteControl</code>給耦合再一起 (像上面turnOnLight, turnOffLight等功能)</p><p>我們可以把 <code>Light</code> 的開關功能都視作為 <code>Command (命令)</code>抽象介面, 該介面包含了一個 <code>execute()</code>功能, </p><p>接著由Command (命令)衍伸出 <code>LightOnCommand</code>與<code>LightOffCommand</code>這兩個實作類別, 負責定義<code>Light</code>的開與關的動作</p><p><img src="https://i.imgur.com/t1zF1vQ.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定義一個命令, 包含的執行execute的動作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 實作燈的開關命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn on the light"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Turn off the light"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    LightOnCommand() &#123;</span><br><span class="line">        <span class="keyword">this</span>.light = <span class="keyword">new</span> Light();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    LightOffCommand() &#123;</span><br><span class="line">        <span class="keyword">this</span>.light = <span class="keyword">new</span> Light();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    NoCommand() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Not yet defined"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著我們需要在遙控器類別 <code>RemoteControl</code> 定義可放置Command的動作 <code>setXXXCommand()</code>, 以及呼叫Command的 <code>pressOnButton()</code>與<code>pressOffButton()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定義遙控器類別</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    Command[] onCommands = <span class="keyword">new</span> Command[<span class="number">7</span>];</span><br><span class="line">    Command[] offCommands = <span class="keyword">new</span> Command[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一開始的插槽, 若沒功能就定義一個沒作用的command供呼叫 (可避免用 if (command != null) 這種判斷方式</span></span><br><span class="line">    RemoteControl() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCommand</span><span class="params">(<span class="keyword">int</span> slot, Command onCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands[slot] = onCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffCommand</span><span class="params">(<span class="keyword">int</span> slot, Command offCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offCommands[slot] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pressOnButton</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pressOffButton</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顯示我們塞了哪些功能到slot內</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuffer stringBuff = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        stringBuff.append(<span class="string">"\n ------- Remote Control-------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; onCommands.length; i++) &#123;</span><br><span class="line">            stringBuff.append(<span class="string">"[slot "</span> + i + <span class="string">"] "</span> + onCommands[i].getClass().getName() + <span class="string">"    "</span> + offCommands[i].getClass().getName() + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuff.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過這樣的做法, 我們可以看到原本<code>RemoteControl</code>內的與Light操作有關的動作, 都被我們透過 <code>Command</code> 抽象介面以及其 <code>LightOnCommand</code>與<code>LightOffCommand</code>實作類別給抽離出來了</p><p>於是我們可以來執行看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定義出兩種房間的燈</span></span><br><span class="line">        Light LivingRoomLight = <span class="keyword">new</span> Light(<span class="string">"Living Room"</span>);</span><br><span class="line">        Light KitchenLight = <span class="keyword">new</span> Light(<span class="string">"Kitchen"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 設置Command按鈕</span></span><br><span class="line">        remoteControl.setOnCommand(<span class="number">0</span>, <span class="keyword">new</span> LightOnCommand(LivingRoomLight));</span><br><span class="line">        remoteControl.setOffCommand(<span class="number">0</span>, <span class="keyword">new</span> LightOffCommand(LivingRoomLight));</span><br><span class="line"></span><br><span class="line">        remoteControl.setOnCommand(<span class="number">1</span>, <span class="keyword">new</span> LightOnCommand(KitchenLight));</span><br><span class="line">        remoteControl.setOffCommand(<span class="number">1</span>, <span class="keyword">new</span> LightOffCommand(KitchenLight));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顯示有哪些功能</span></span><br><span class="line">        System.out.println(remoteControl.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 執行命令</span></span><br><span class="line">        <span class="comment">//// 客廳的</span></span><br><span class="line">        remoteControl.pressOnButton(<span class="number">0</span>);</span><br><span class="line">        remoteControl.pressOffButton(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//// 廚房的</span></span><br><span class="line">        remoteControl.pressOnButton(<span class="number">1</span>);</span><br><span class="line">        remoteControl.pressOffButton(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/q9PTG18.png" alt=""></p><p>若接下來需要新增如浴室開關, 電視開關, 只要透過<code>RemoteConrol</code>的<code>setCommand()</code>方法, 即可以動態做設置, 不需更動到遙控器類別原本的程式碼！ (除非要改變遙控器的slot大小了)</p><h2 id="進階的Command-Pattern技巧"><a href="#進階的Command-Pattern技巧" class="headerlink" title="進階的Command Pattern技巧"></a>進階的Command Pattern技巧</h2><p>等待補充 (為Command介面新增 undo()方法, 使動作復原)</p><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><p>運用在任務序列中, 多執行緒只要拿到Command物件, 並且執行<code>execute</code>方法負責執行完就好</p><p>或是用在日誌管理, 將執行過的動作給記錄起來, 並且若後續伺服器當機, 可將命令給復原</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令模式主要將執行的命令, 與執行者做鬆綁的動作&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design Pattern" scheme="http://a10000005588.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>下班自修的經驗分享</title>
    <link href="http://a10000005588.github.io/2020/05/16/%E4%B8%8B%E7%8F%AD%E8%87%AA%E4%BF%AE%E7%9A%84%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    <id>http://a10000005588.github.io/2020/05/16/下班自修的經驗分享/</id>
    <published>2020-05-16T12:47:39.000Z</published>
    <updated>2020-08-02T00:03:56.374Z</updated>
    
    <content type="html"><![CDATA[<p>最近剛好在Backend版上看到有人Po文問說: “下班後要如何精進自修”, 意外看到許多大大們在下面留言, 正好最近我也在思考要如何精進自己, 所以趁這機會來統整一下大大們提出來的想法並且與自己目前的進修方式做結合, 主要會以Full-Stack engineer的精進方式來做個紀錄分享.</p><a id="more"></a><h2 id="如果對某程式語言-amp-框架掌握度還不夠-請先熟悉之！"><a href="#如果對某程式語言-amp-框架掌握度還不夠-請先熟悉之！" class="headerlink" title="如果對某程式語言&amp;框架掌握度還不夠, 請先熟悉之！"></a>如果對某程式語言&amp;框架掌握度還不夠, 請先熟悉之！</h2><p>如果上班接觸到某種自己不熟悉的語言或框架, 像我目前需要寫Java &amp; Spring, 與Angular &amp; Typescript.</p><p>所以我會偏好先到線上程式語言線上平台進修之, 因為這些學習平台能夠提供完整的學習輪廓, 能夠讓我快速掌握該程式語言&amp;框架所需具備的硬知識為何.</p><p>說到線上程式學習平台, 我蠻推薦 <a href="https://app.pluralsight.com/" target="_blank" rel="noopener">Pluralsight</a>, 因為該平台提供了該程式語言或框架推薦學習的影片, 並且透過測驗推估你對該技術的知識程度為何.</p><p><img src="https://i.imgur.com/2vtrkLm.png" alt=""></p><p>有興趣可以到該平台試試看, 不過每個月會收取29美元的花費, 不過這花費當作投資是蠻值得的.</p><h2 id="若已經對程式語言-amp-框架有經驗-可以嘗試看看Side-Project"><a href="#若已經對程式語言-amp-框架有經驗-可以嘗試看看Side-Project" class="headerlink" title="若已經對程式語言&amp;框架有經驗, 可以嘗試看看Side Project"></a>若已經對程式語言&amp;框架有經驗, 可以嘗試看看Side Project</h2><p>為什麼會特地提到Side Project?? 那是因為在公司其實很難自己能夠負責專案的所有全貌, 例如可能只是負責寫API, 也可能只負責前端頁面的刻畫.</p><p>所以透過Side Project, 便能夠有機會嘗試所有技術的機會, 並且從中去體會到自己最想要加強的領域是哪邊, 例如後端效能? 前端渲染速度? Container, CI/CD的運作? 諸如此類, 從而培養一個Full-Stack的經驗.</p><p>所以下班後自己跑一個Side Project是個不錯的精進方式.</p><h3 id="但要怎麼樣想出一個Side-Project"><a href="#但要怎麼樣想出一個Side-Project" class="headerlink" title="但要怎麼樣想出一個Side Project?"></a>但要怎麼樣想出一個Side Project?</h3><p>我覺得學習最快的方式就是模仿, 可以到Github上搜尋有興趣的專案, 並且試著用自己的程式語言與框架自己做出一套是最快的方式.</p><p>像我因為很喜歡用Markdown方式來做筆記, 目前打算自己做個小型的線上筆記編輯系統, 並看到Github上有提供<a href="https://github.com/codimd/server" target="_blank" rel="noopener">CodiMD</a> 的開源專案可參考,<br>來試著自己建造出一個看看. 之後有機會再分享到自己的部落格上怎麼一步一步進行的.</p><h2 id="嘗試撰寫線上筆記或部落格吧"><a href="#嘗試撰寫線上筆記或部落格吧" class="headerlink" title="嘗試撰寫線上筆記或部落格吧"></a>嘗試撰寫線上筆記或部落格吧</h2><p>我認為現在技術真的太多太多了, 如果沒有將自己看過的技術文章或學習影片給消化和記錄起來, 很快就又會忘記. 所以最好的方式是有個做筆記的習慣!</p><p>做筆記的話我都是用Hackmd先記錄起來, 之後等有空的時間會再消化審視自己寫過的內容, 並發佈到自己的Bloger上, 這樣有助於將學習過的知識給內化到自己的腦海中.</p><h2 id="其他更進階的進修方法"><a href="#其他更進階的進修方法" class="headerlink" title="其他更進階的進修方法"></a>其他更進階的進修方法</h2><h3 id="根據技能樹-RoadMap-來補充自己最常用-有興趣但所缺乏的觀念與技術"><a href="#根據技能樹-RoadMap-來補充自己最常用-有興趣但所缺乏的觀念與技術" class="headerlink" title="根據技能樹(RoadMap)來補充自己最常用,有興趣但所缺乏的觀念與技術"></a>根據技能樹(RoadMap)來補充自己最常用,有興趣但所缺乏的觀念與技術</h3><p>這網站<a href="https://roadmap.sh/roadmaps" target="_blank" rel="noopener">Roadmap</a>提供了各開發者(Frontend, Backend, DevOps)所需要具備的技能樹為何<br>, 若想要往後端精進, 可以看到下面這張圖會碰到哪些所需具備的能力.</p><p><img src="https://i.imgur.com/tGdhgGX.png" alt=""></p><p>看完之後會發覺有太多東西需要Cover了, 學海無涯 (茶).</p><h3 id="經營-Stackoverflow"><a href="#經營-Stackoverflow" class="headerlink" title="經營 Stackoverflow"></a>經營 Stackoverflow</h3><p>這點是我看到大大們提出來可以嘗試的方式, 不過我目前也只有在Stackoverflow上面問幾個小問題, 對這方面還沒有涉略, 可參考下面大大所寫的Stackoverflow的介紹, 未來我會想在這邊嘗試看看能不能也試著回答別人遇到的問題.</p><p><a href="https://lab.howie.tw/2019/04/learn-from-stackoverflow.html?fbclid=IwAR2VuMNEjP8gvE-IFa69zJZaHNROM8-pj8dgt0-641gcjGwmkCNuBzNal8k" target="_blank" rel="noopener">工程師鍛鍊接軌世界的能力從stackoverflow 開始 - 阿貝好威的實驗室</a></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>下班後要再自修真的需要有興趣使然以及強大的毅力, 否則很容易就會半途而廢.</p><p>所以最重要的還是要讓自己有個規劃, 並且從實踐規劃中內化成自己的日常習慣, 久而久之就會讓自己變得更強的！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近剛好在Backend版上看到有人Po文問說: “下班後要如何精進自修”, 意外看到許多大大們在下面留言, 正好最近我也在思考要如何精進自己, 所以趁這機會來統整一下大大們提出來的想法並且與自己目前的進修方式做結合, 主要會以Full-Stack engineer的精進方式來做個紀錄分享.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://a10000005588.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 功能介紹</title>
    <link href="http://a10000005588.github.io/2020/04/11/Spring-Security%E4%BB%8B%E7%B4%B9/"/>
    <id>http://a10000005588.github.io/2020/04/11/Spring-Security介紹/</id>
    <published>2020-04-11T13:34:23.000Z</published>
    <updated>2020-08-03T14:32:05.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-功能介紹"><a href="#Spring-Security-功能介紹" class="headerlink" title="Spring Security 功能介紹"></a>Spring Security 功能介紹</h1><p>先介紹以下常用認證功能</p><a id="more"></a><h2 id="User-name-password-基本認證"><a href="#User-name-password-基本認證" class="headerlink" title="User name / password 基本認證"></a>User name / password 基本認證</h2><p>使用使用者名稱/密碼做驗證</p><h2 id="SSO-Okta-LDAP"><a href="#SSO-Okta-LDAP" class="headerlink" title="SSO / Okta / LDAP"></a>SSO / Okta / LDAP</h2><h3 id="SSO-Single-Sign-On"><a href="#SSO-Single-Sign-On" class="headerlink" title="SSO (Single Sign On)"></a>SSO (Single Sign On)</h3><p>為OAuth的近一步實現，若已經透過Google取得token, 就可以在其他服務的小網站，都使用Google提供的身份驗證服務</p><h3 id="Okta"><a href="#Okta" class="headerlink" title="Okta"></a>Okta</h3><p>協助非營利組織的方式。從基本的單一登入（single sign-on，簡稱為 SSO）到進階的身份認證和存取權限的管理方案</p><h3 id="LDAP-Lightweight-Directory-Access-Protocol"><a href="#LDAP-Lightweight-Directory-Access-Protocol" class="headerlink" title="LDAP (Lightweight Directory Access Protocol)"></a>LDAP (Lightweight Directory Access Protocol)</h3><p>為一種輕量的目錄服務協定，像是通訊錄一樣紀錄人員資訊，可以拿來做帳號整合,驗證。</p><p>LDAP目錄服務通常有層級結構，像是公司組織階層</p><h2 id="OAuth-Intra-App-Authorization"><a href="#OAuth-Intra-App-Authorization" class="headerlink" title="OAuth (Intra App Authorization)"></a>OAuth (Intra App Authorization)</h2><p>OAuth讓用戶可以授權第三方網站存取他們在另外服務提供者(ex: Facebook, Line)的某些特定資訊，而非所有內容。</p><h3 id="為什麼有OAuth出現？"><a href="#為什麼有OAuth出現？" class="headerlink" title="為什麼有OAuth出現？"></a>為什麼有OAuth出現？</h3><p>因為各個網站都做會員機制很麻煩，且小網站可能有資安風險。</p><p>故大網站像是Facebook, Line早已經做好超級安全的會員管理機制，大網站幫你管理個資，提供登入的服務。</p><p>但提供這樣服務的大廠越來越多，若小網站同時要提供用戶連結到多個有提供身分服務的大網站會變得很複雜，於是就訂定的工業標準：OAuth.</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>進入小網站 -&gt;   </li><li>跳轉到大網站登入畫面 -&gt;  </li><li>登入成功大網站給予一個有時效的token 給小網站 -&gt; </li><li>小網站透過token跟大網站索取用戶的資訊 (這也是為什麼每次登入第三方都會詢問你是否要揭露以下資訊給小網站)</li></ul><p>不過一般小網站”無法”直接取得token, 而是取得一個code, 再用這個code向大網站換得一個token<br>(多這道手續的原因是因為，Internet可能會被路上經手的router或其他設備擷取,偽造,變更)</p><h3 id="實際情況"><a href="#實際情況" class="headerlink" title="實際情況"></a>實際情況</h3><p>在 Line Login時, Line Notify中，組出一個URL，取得Authorization Code, 這一段取得的Code為明碼, 走的是http get，透過瀏覽器網址列來傳遞 (若沒有用SSL傳遞的話，會被任何人擷取看到). </p><p>接下來小網站取得Authorization Code後，在透過http post，從後端跟大網站換得token (因為走後端 大網站就知道小網站的身份和所拿的code)</p><p>:::warning<br>OAuth主要功能是授權，不是認證，所以後來才延伸出OpenID Connect (OIDC)來提供認證用。<br>:::<br>:::info<br>Authentication 檢查發送檢查人的身份是誰、是否合格;<br>Authorization 則是規範使用者權限的規則，規定哪些能做、哪些不能</p><p>因此如果該 Request 未帶 token 或是 token 過期、不合法皆算是 Authentication Error ，跟 http status code 的 401 意思一樣 ; </p><p>如果 Request 的 token 認證成功但是該使用者的權限不足以執行該 Request 則是 Forbidden Error (即 因 Authorization 發生的錯誤) ，如 http status code 的 403 意思相同。</p><p>:::</p><p>:::success<br>單純用大網站的OAuth當自己的會員系統還是有很大的問題<br>最明顯的是當使用者同時有Google 與 Facebook的帳號時<br>兩個帳號上面的Email可能不是一樣的<br>自己的網站很可能無法辨認這是同一個人的帳戶<br>所以一般還是會需要自己的會員系統做整合<br>:::</p><h3 id="Microservice-security-using-tokens-JWT"><a href="#Microservice-security-using-tokens-JWT" class="headerlink" title="Microservice security (using tokens, JWT)"></a>Microservice security (using tokens, JWT)</h3><p>JWT (JSON web token):</p><ul><li>JWT基於JSON的開放標準 (RFC 7519)</li><li>被用在身份提供者和服務提供者間傳遞，被認證的用戶身份訊息</li><li>可額外增加聲明訊息，該JWT token可以直接被用於認證(Authorization)，也可被加密</li><li>特別適用於SSO</li></ul><h4 id="JWT-與-Session差別："><a href="#JWT-與-Session差別：" class="headerlink" title="JWT 與 Session差別："></a>JWT 與 Session差別：</h4><h4 id="Session"><a href="#Session" class="headerlink" title="Session:"></a>Session:</h4><p>由於http協議為stateless,無法知道每次request是誰，但每次request若都要帳號密碼很麻煩</p><p>故用戶第一次發Request時，就產生一組token紀錄在db與session, 並將token給用戶，告訴用戶將token存在cookie，當下次發送request時，透過token證明自己身份。</p><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><p>組成內容有三個部分(Header, Paylaod,Signature)並由<code>.</code> 做區隔，最後透過這三個部分，串成一個 Jwt 字串</p><p>Header: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &apos;typ&apos;: &apos;JWT&apos;, # 聲明類型</span><br><span class="line">  &apos;alg&apos;: &apos;HS256&apos; # 加密的方法: HMAC、SHA256、RSA 進行 Base64 編碼</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload: 放聲明內容，可以說就是存放溝通訊息的地方</p><p>在定義上有 3 種聲明 (Claims)</p><ul><li>Reserved (註冊聲明)</li><li>Public (公開聲明)</li><li>Private (私有聲明)</li></ul><p>註冊聲明參數 (建議但不強制使用)</p><ul><li>iss (Issuer) - jwt簽發者</li><li>sub (Subject) - jwt所面向的用戶</li><li>aud (Audience) - 接收jwt的一方</li><li>exp (Expiration Time) - jwt的過期時間，這個過期時間必須要大於簽發時間</li><li>nbf (Not Before) - 定義在什麼時間之前，該jwt都是不可用的</li><li>iat (Issued At) - jwt的簽發時間</li><li>jti (JWT ID) - jwt的唯一身份標識，主要用來作為一次性token,從而迴避重放攻擊</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;iat&quot;: 1516239022</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Signature: 由三個部分組成</p><ul><li>header (base64後的)</li><li>payload (base64後的)</li><li>secret </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), &apos;secret&apos;)</span><br></pre></td></tr></table></figure><p>:::warning<br>secret 要保存在 server 端，jwt 的 簽發驗證都必須使用這個 secret，當其他人得知這個 secret，那就意味著客戶端是可以自我簽發 jwt ，因此在任何場景都不應該外流<br>:::</p><p>最後將 Header, Payload, Signature做base64編碼，組成</p><p>使用的時候，在reqeust的header加上 <code>Authorization: Bearer &lt;token&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post(&apos;api/user/1&apos;, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    &apos;Authorization&apos;: &apos;Bearer &apos; + token</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JWT-前後端互動示意圖"><a href="#JWT-前後端互動示意圖" class="headerlink" title="JWT 前後端互動示意圖"></a>JWT 前後端互動示意圖</h3><p><img src="https://i.imgur.com/wGqdCkr.png" alt=""></p><h3 id="JWT優點"><a href="#JWT優點" class="headerlink" title="JWT優點"></a>JWT優點</h3><ul><li>跨語言，因為 json 格式大部分語言都可使用</li><li>可儲存一些簡單但非敏感的商業邏輯 - role ..</li><li>構成內容簡單，佔用 Size 小方便傳輸</li><li>!!! 不需在 server 保存 session，所以它易於應用的擴展</li></ul><h2 id="Spring-Security-教學視頻"><a href="#Spring-Security-教學視頻" class="headerlink" title="Spring Security 教學視頻"></a>Spring Security 教學視頻</h2><p>Spring Boot + Spring Security + JWT from scratch - Java Brains<br><a href="https://www.youtube.com/watch?v=X80nJ5T7YpE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=X80nJ5T7YpE</a></p><h2 id="參考資源："><a href="#參考資源：" class="headerlink" title="參考資源："></a>參考資源：</h2><p>Okta 如何協助非營利組織-從 25 個免費的授權開始<br><a href="https://www.techsoup-taiwan.org.tw/okta" target="_blank" rel="noopener">https://www.techsoup-taiwan.org.tw/okta</a></p><p>LDAP 簡介<br><a href="https://poychang.github.io/ldap-introduction/" target="_blank" rel="noopener">https://poychang.github.io/ldap-introduction/</a></p><p>一次搞懂OAuth與SSO在幹什麼?<br><a href="http://studyhost.blogspot.com/2017/01/oauthsso.html" target="_blank" rel="noopener">http://studyhost.blogspot.com/2017/01/oauthsso.html</a></p><p>GraphQL 設計： Autentication 與 Authorization 大全<br><a href="https://ithelp.ithome.com.tw/articles/10208278" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10208278</a></p><p>JSON Web Token(JWT) 簡單介紹<br><a href="https://mgleon08.github.io/blog/2018/07/16/jwt/" target="_blank" rel="noopener">https://mgleon08.github.io/blog/2018/07/16/jwt/</a></p><p>What is Spring Security really all about? Java Brains Brain Bytes</p><p><a href="https://www.youtube.com/watch?v=sm-8qfMWEV8&amp;list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=sm-8qfMWEV8&amp;list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Security-功能介紹&quot;&gt;&lt;a href=&quot;#Spring-Security-功能介紹&quot; class=&quot;headerlink&quot; title=&quot;Spring Security 功能介紹&quot;&gt;&lt;/a&gt;Spring Security 功能介紹&lt;/h1&gt;&lt;p&gt;先介紹以下常用認證功能&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://a10000005588.github.io/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://a10000005588.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://a10000005588.github.io/tags/Spring/"/>
    
      <category term="Authentication" scheme="http://a10000005588.github.io/tags/Authentication/"/>
    
  </entry>
  
  <entry>
    <title>Spring Annotation筆記整理</title>
    <link href="http://a10000005588.github.io/2020/03/10/Spring-Annotation%E4%BB%8B%E7%B4%B9/"/>
    <id>http://a10000005588.github.io/2020/03/10/Spring-Annotation介紹/</id>
    <published>2020-03-10T14:13:00.000Z</published>
    <updated>2020-08-01T02:39:49.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Annotation-筆記"><a href="#Spring-Annotation-筆記" class="headerlink" title="Spring Annotation 筆記"></a>Spring Annotation 筆記</h1><p>這邊主要整理了我使用或是遇到的Spring Annotation資料查詢與統整的紀錄</p><a id="more"></a><h2 id="API-相關-Annotation"><a href="#API-相關-Annotation" class="headerlink" title="API 相關 @Annotation"></a>API 相關 @Annotation</h2><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>將class設置為外部控制器</p><h4 id="RestControllerAdvice"><a href="#RestControllerAdvice" class="headerlink" title="@RestControllerAdvice"></a>@RestControllerAdvice</h4><p>等同於@ControllerAdvice + @ResponseBody</p><p>@ControllerAdvice為可在宣告的函式中使用@ExceptionHandler, @InitBinder或 @ModelAttribute註解的方法</p><h5 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h5><p>攔截所有控制器所發出的exception，並返回body型式</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>控制器裡面的方法，使之成為外部請求</p><p>若要設置GET method, 如下<br>(也可以改成 POST, PUT, DELETE)</p><p>定義一組restful api前綴路由<br>ex : @RequestMapping(“/api/v1”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequstMapping</span>(<span class="string">"/api/v1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"helloworld"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使用的話得在postman中用　<code>/api/v1/hello</code>　</p><h3 id="HTTP動作Annotation"><a href="#HTTP動作Annotation" class="headerlink" title="HTTP動作Annotation"></a>HTTP動作Annotation</h3><h4 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h4><h4 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h4><h4 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h4><h4 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h4><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>可以接收Body參數，得透過class宣告一組object來接收　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">setNumber</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> getType...</span><br><span class="line">    <span class="keyword">public</span> getNumber...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/v1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 透過宣告一個car，來接收Body的值 (type, number)</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/car"</span>)</span><br><span class="line">    <span class="function">function <span class="title">getCar</span><span class="params">(@RequestBody Car car)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestHeader、-CookieValue"><a href="#RequestHeader、-CookieValue" class="headerlink" title="@RequestHeader、@CookieValue"></a>@RequestHeader、@CookieValue</h3><p>處理request header部分的注解：</p><p>Request Header的內容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host                    localhost:8080  </span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=0.9  </span><br><span class="line">Accept-Language         fr,en-gb;q=0.7,en;q=0.3  </span><br><span class="line">Accept-Encoding         gzip,deflate  </span><br><span class="line">Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7  </span><br><span class="line">Keep-Alive              300</span><br></pre></td></tr></table></figure></p><p>透過 @RequestHeader(“”)接受其Header值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/displayHeaderInfo.do&quot;)  </span><br><span class="line">public void displayHeaderInfo(@RequestHeader(&quot;Accept-Encoding&quot;) String encoding,  </span><br><span class="line">                              @RequestHeader(&quot;Keep-Alive&quot;) long keepAlive)  &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h3><p>該註解用來綁定HttpSession中的attribute對象的值，便於在方法中的參數里使用。</p><p>該註解有value、types兩個屬性，可以通過名字和類型指定要使用的attribute 對象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editPet.do"</span>)  </span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// ...   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>參考資料:<br>Spring MVC常用注解@PathVariable、@RequestHeader、@CookieValue、@RequestParam、@RequestBody、@SessionAttributes、@ModelAttribute</p><p><a href="https://www.cnblogs.com/EasonJim/p/8323017.html" target="_blank" rel="noopener">https://www.cnblogs.com/EasonJim/p/8323017.html</a></p><h3 id="JsonProperty-重點，遇到接不到request的值，用這就對了"><a href="#JsonProperty-重點，遇到接不到request的值，用這就對了" class="headerlink" title="@JsonProperty (重點，遇到接不到request的值，用這就對了)"></a>@JsonProperty (重點，遇到接不到request的值，用這就對了)</h3><p>用來接收application/json中，有大小不一型別的變數</p><p>ex: Postman script<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"contact"</span>:&#123;</span><br><span class="line">        <span class="attr">"cPhone"</span>:<span class="string">"0912345678"</span>, </span><br><span class="line">        <span class="attr">"cMail"</span>:<span class="string">" abc@test.com.tw "</span>, </span><br><span class="line">        <span class="attr">"cAddress"</span>:<span class="string">"台北市中正區信義路一段21-3號"</span></span><br><span class="line">    &#125;,...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>若要接到 PHONE或Website，需要定義 @JsonProperty(“PHONE”), @JsonProperty(“Website”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lia201iReqDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    contactDto contact;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">contactDto</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="meta">@JsonProperty</span>(<span class="string">"cPhone"</span>)</span><br><span class="line">        String cPhone;</span><br><span class="line">        <span class="meta">@JsonProperty</span>(<span class="string">"cMail"</span>)</span><br><span class="line">        String cMail;</span><br><span class="line">        <span class="meta">@JsonProperty</span>(<span class="string">"cAddress"</span>)</span><br><span class="line">        String cAddress;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h4><p>Spring REST consuming JSON uppercase vs lowercase<br><a href="https://stackoverflow.com/questions/26890398/spring-rest-consuming-json-uppercase-vs-lowercase" target="_blank" rel="noopener">https://stackoverflow.com/questions/26890398/spring-rest-consuming-json-uppercase-vs-lowercase</a></p><h2 id="驗證相關的Annotation"><a href="#驗證相關的Annotation" class="headerlink" title="驗證相關的Annotation"></a>驗證相關的Annotation</h2><h3 id="Valid與-Validated"><a href="#Valid與-Validated" class="headerlink" title="@Valid與@Validated"></a>@Valid與@Validated</h3><p>負責驗證有被定義校正的參數或object</p><p>先產生要校正的實體類(class)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1(3|4|5|7|8)\\d&#123;9&#125;$"</span>,message = <span class="string">"手机号码格式错误"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"手机号码不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//... getter setter</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>於@Controller中　使用Valid做校正</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class FooController &#123;</span><br><span class="line"></span><br><span class="line">    // 對Foo class產生的foo做校正</span><br><span class="line">    @RequestMapping(&quot;/foo&quot;)</span><br><span class="line">    public String foo(@Validated Foo foo &lt;1&gt;, BindingResult bindingResult &lt;2&gt;) &#123;</span><br><span class="line">        if(bindingResult.hasErrors())&#123;</span><br><span class="line">            for (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</span><br><span class="line">                //...</span><br><span class="line">            &#125;</span><br><span class="line">            return &quot;fail&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Validate-與-Valid差異"><a href="#Validate-與-Valid差異" class="headerlink" title="@Validate 與 @Valid差異"></a>@Validate 與 @Valid差異</h4><p>@Valid能進行嵌套驗證， @Validate不行</p><p>因為@Valid能加在成員屬性上，反而@Validated不能用在成員屬性。</p><p>舉例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"id不能為空值"</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"id必須為正整數"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"props不能為空直"</span>)</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">1</span>, message = <span class="string">"至少要有一個屬性"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Prop&gt; props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而 Prop class如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"pid不能為空"</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"pid必須為正整數"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"vid不能為空"</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"vid必須為正整數"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long vid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"pidName不能為空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String pidName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"vidName不能為空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String vidName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>現在我們有個ItemController接受一個Item的參數，想要對Item進行驗證，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/item/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(@Validated Item item, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上圖中，如果Item實體的props屬性不額外加註釋，只有@NotNull和@Size，無論入參採用@Validated還是@Valid驗證，Spring Validation框架只會對Item的id和props做非空和數量驗證，不會對props字段裡的Prop實體進行字段驗證，也就是@Validated和@Valid加在方法參數前，<span style="color:red">都不會自動對參數進行嵌套驗證&lt;/ span&gt;</span></p><p>:::info<br>這邊指的嵌套(Nested)驗證，指的是若class Item中還有一個變數List<props> 且這個Props的class內也有自己定義驗證@Notnull, @NotBlank, 一層class內還有一個class定義自己的驗證，就叫做嵌套驗證<br>:::</props></p><p>要進行嵌套驗證的話得在 class Props中加入@Valid </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"id不能为空"</span>)</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">1</span>, message = <span class="string">"id必须为正整数"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// 嵌套验证必须用@Valid</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"props不能为空"</span>)</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">1</span>, message = <span class="string">"props至少要有一个自定义属性"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Prop&gt; props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="補充-負責校驗的Annotation"><a href="#補充-負責校驗的Annotation" class="headerlink" title="補充 負責校驗的Annotation"></a>補充 負責校驗的Annotation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Null 被註釋的元素必須為 null</span><br><span class="line">@NotNull 被註釋的元素必須不為 null</span><br><span class="line">@AssertTrue 被註釋的元素必須為 true</span><br><span class="line">@AssertFalse 被註釋的元素必須為 false</span><br><span class="line">@Min(value) 被註釋的元素必須是一個數字，其值必須大於等於指定的最小值</span><br><span class="line">@Max(value) 被註釋的元素必須是一個數字，其值必須小於等於指定的最大值</span><br><span class="line">@DecimalMin(value) 被註釋的元素必須是一個數字，其值必須大於等於指定的最小值</span><br><span class="line">@DecimalMax(value) 被註釋的元素必須是一個數字，其值必須小於等於指定的最大值</span><br><span class="line">@Size(max=, min=) 被註釋的元素的大小必須在指定的範圍內</span><br><span class="line">@Digits (integer, fraction) 被註釋的元素必須是一個數字，其值必須在可接受的範圍內</span><br><span class="line">@Past 被註釋的元素必須是一個過去的日期</span><br><span class="line">@Future 被註釋的元素必須是一個將來的日期</span><br><span class="line">@Pattern(regex=,flag=) 被註釋的元素必須符合指定的正則表達式</span><br><span class="line"></span><br><span class="line">@NotBlank(message =) 驗證字符串非null，且長度必須大於0</span><br><span class="line">@Email 被註釋的元素必須是電子郵箱地址</span><br><span class="line">@Length(min=,max=) 被註釋的字符串的大小必須在指定的範圍內</span><br><span class="line">@NotEmpty 被註釋的字符串的必須非空</span><br><span class="line">@Range(min=,max=,message=) 被註釋的元素必須在合適的範圍內</span><br></pre></td></tr></table></figure><h4 id="補充-用BindingResult接收-Valid拋出來的錯誤訊息"><a href="#補充-用BindingResult接收-Valid拋出來的錯誤訊息" class="headerlink" title="補充: 用BindingResult接收@Valid拋出來的錯誤訊息"></a>補充: 用<code>BindingResult</code>接收@Valid拋出來的錯誤訊息</h4><p>假設有驗證錯誤的物件為 BindingResult bindingResult<br>可透過bindResult取得錯誤資訊</p><p>舉例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class FlightDTO &#123;</span><br><span class="line">    @NotBlank</span><br><span class="line">    private String terminal; // 航廈</span><br><span class="line">    @NotBlank</span><br><span class="line">    private String type; // 航班種類</span><br><span class="line">    @NotBlank</span><br><span class="line">    private String carrier; // 航空公司代碼</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若使用@Valid對FlightDTO做參數驗證，假設有一Request少輸入terminal資訊，就會發出bindingResult訊息，其中包含：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line"><span class="keyword">for</span>(FieldError fieldError: fieldErrors) &#123;</span><br><span class="line">    <span class="comment">//　封裝錯誤格式</span></span><br><span class="line">    FieldResource fieldResource = <span class="keyword">new</span> FieldResource(</span><br><span class="line">        fieldError.getObjectName(), <span class="comment">// 取得物件名稱：為FlightDTO</span></span><br><span class="line">        fieldError.getField(), <span class="comment">// 為properties(terminal)</span></span><br><span class="line">        fieldError.getCode(), <span class="comment">// 為@Notblank</span></span><br><span class="line">        fieldError.getDefaultMessage() <span class="comment">// 為@Notblank的錯誤資訊</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:::info<br>BindingResult為Error的子介面</p><p>BindingResult<br><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BindingResult.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/BindingResult.html</a><br>Error:<br><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/Errors.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/validation/Errors.html</a><br>:::</p><h4 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h4><p>使用spring validation完成数据后端校验<br><a href="https://www.cnkirito.moe/spring-validation/" target="_blank" rel="noopener">https://www.cnkirito.moe/spring-validation/</a></p><p>@Validated和@Valid区别：Spring validation验证框架对入参实体进行嵌套验证必须在相应属性（字段）加上@Valid而不是@Validated<br><a href="https://blog.csdn.net/qq_27680317/article/details/79970590" target="_blank" rel="noopener">https://blog.csdn.net/qq_27680317/article/details/79970590</a></p><h2 id="操作數據庫相關數據相關的Annotation"><a href="#操作數據庫相關數據相關的Annotation" class="headerlink" title="操作數據庫相關數據相關的Annotation"></a>操作數據庫相關數據相關的Annotation</h2><h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><p>表示是一個對應到DB Table的物件</p><h3 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h3><p>聲明該欄位為主鍵</p><h3 id="GeneratedValue"><a href="#GeneratedValue" class="headerlink" title="@GeneratedValue"></a>@GeneratedValue</h3><p>指定ID生成的策略，若沒有設置的化, Hibernate對應的是為一個Not null的物件，得自行設定id到物件內。<br>但通常會自行在新增資料時產生ID, 故@Id與@GeneratedValue會常常同時出現</p><p>因為Hibernate會遇見不同的Database，所以有各種不同的生成策略:</p><h4 id="GenerationType-Auto"><a href="#GenerationType-Auto" class="headerlink" title="GenerationType.Auto"></a>GenerationType.Auto</h4><p>Hibernate會根據採用的Database為何，來決定要用 GenerationType.Identity 或 GenerationType.SEQUENCE。<br>(大部分的情況都會採用 GenerationType.SEQUENCE)</p><h4 id="GenerationType-IDENTITY"><a href="#GenerationType-IDENTITY" class="headerlink" title="GenerationType.IDENTITY"></a>GenerationType.IDENTITY</h4><p>透過auto-incremented database column來產生primary key.<br>常見的MySQL和MMSQL都採用該方式，相對應的DDL語言為以下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id BIGINT NOT NULL AUTO_INCREMENT</span><br></pre></td></tr></table></figure></p><h4 id="GenerationType-SEQUENCE"><a href="#GenerationType-SEQUENCE" class="headerlink" title="GenerationType.SEQUENCE"></a>GenerationType.SEQUENCE</h4><p>設定該策略，通常也會給入另一個Annotation <code>@SequenceGenerator</code>，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.SEQUENCE, generator = <span class="string">"author_generator"</span>)</span><br><span class="line"><span class="meta">@SequenceGenerator</span>(name=<span class="string">"author_generator"</span>, sequenceName = <span class="string">"author_seq"</span>, allocationSize=<span class="number">50</span>)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"id"</span>, updatable = <span class="keyword">false</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> Long id</span><br></pre></td></tr></table></figure><p>若沒有指定，Hibernate會使用預設的SequenceGenerator</p><p>可以看到若指定 sequenceGenerator的name為author_seq, Hibernate就會在 <code>author_seq</code>這個table查找下一個id值為多少</p><p><img src="https://i.imgur.com/Uw8ebCO.jpg" alt=""></p><p>注意，在Postgres情況下不適合用該方法<br><a href="https://stackoverflow.com/questions/4288740/hibernate-use-of-postgresql-sequence-does-not-affect-sequence-table/4502062#4502062" target="_blank" rel="noopener">https://stackoverflow.com/questions/4288740/hibernate-use-of-postgresql-sequence-does-not-affect-sequence-table/4502062#4502062</a></p><h4 id="GenerationType-SEQUENCE-1"><a href="#GenerationType-SEQUENCE-1" class="headerlink" title="GenerationType.SEQUENCE"></a>GenerationType.SEQUENCE</h4><p>當不希望應用程式與某一種 Database Engine 綁死的時候，可以使用這種方法，透過另外一個表格來定義 ID</p><p>會透過SQL，建立存放各種column的seqeunce<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE APP_SEQ_STORE ( APP_SEQ_NAME VARCHAR(255) NOT NULL, APP_SEQ_VALUE BIGINT NOT NULL, PRIMARY KEY(APP_SEQ_NAME) );</span><br></pre></td></tr></table></figure></p><h5 id="Reference-https-thoughts-on-java-org-jpa-generate-primary-keys"><a href="#Reference-https-thoughts-on-java-org-jpa-generate-primary-keys" class="headerlink" title="Reference: https://thoughts-on-java.org/jpa-generate-primary-keys/"></a>Reference: <a href="https://thoughts-on-java.org/jpa-generate-primary-keys/" target="_blank" rel="noopener">https://thoughts-on-java.org/jpa-generate-primary-keys/</a></h5><h4 id="IdClass-复合主键"><a href="#IdClass-复合主键" class="headerlink" title="@IdClass 复合主键"></a>@IdClass 复合主键</h4><p>复合主键由多个主键字段组成。每个主键字段必须是上面列出的支持类型之一。<br>例如，以下项目实体类的主键由两个字段组成:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> <span class="meta">@IdClass</span>(ProjectId.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="keyword">int</span> departmentId;</span><br><span class="line">    <span class="meta">@Id</span> <span class="keyword">long</span> projectId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在ProjectId.class中聲明兩個主鍵值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class ProjectId &#123;</span><br><span class="line">    <span class="keyword">int</span> departmentId;</span><br><span class="line">    <span class="keyword">long</span> projectId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Embeddable"><a href="#Embeddable" class="headerlink" title="@Embeddable"></a>@Embeddable</h4><p>嵌入式主键<br>表示复合主键的另一种方法是使用可嵌入的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EmbeddedId</span> ProjectId id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line">Class ProjectId &#123;</span><br><span class="line">    <span class="keyword">int</span> departmentId;</span><br><span class="line">    <span class="keyword">long</span> projectId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>宣告該變數與資料庫欄位的對映</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(nam=”category_name” length=<span class="number">20</span>)</span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">getCategoryName</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Return <span class="keyword">this</span>.categoryName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="參考資料-1"><a href="#參考資料-1" class="headerlink" title="參考資料:"></a>參考資料:</h4><p>SPRING中常用的注解（@ENTITY，@TABLE，@COLUMN，@REPOSITORY，@SERVICE）<a href="https://www.cnblogs.com/hoojjack/p/6568920.html" target="_blank" rel="noopener">https://www.cnblogs.com/hoojjack/p/6568920.html</a></p><p>JPA 主键@Id、@IdClass、@Embeddable、@EmbeddedId<br><a href="https://blog.csdn.net/tracycater/article/details/78319021" target="_blank" rel="noopener">https://blog.csdn.net/tracycater/article/details/78319021</a></p><h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><p>@Data 自動產生 getter(), setter(), toString(), 節省一大堆代碼的神Annotation</p><h4 id="前置作業：-引入lombok"><a href="#前置作業：-引入lombok" class="headerlink" title="前置作業： 引入lombok"></a>前置作業： 引入lombok</h4><p>要使用 @Data 注解要先引入lombok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lombok為一個Library，可以用簡單的註解形式來簡化代碼，提高開發效率。</span><br></pre></td></tr></table></figure><h4 id="如何使用lobok"><a href="#如何使用lobok" class="headerlink" title="如何使用lobok"></a>如何使用lobok</h4><ol><li><p>在<code>maven</code>中添加依賴</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.18.4&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>在編譯器中添加插件</p></li></ol><p>以IDEA為例，在setting的plugin裡搜索lombok plugin，安裝插件。</p><p>直接在Class上加上@Data即可</p><p>例如一个简单的Person Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String hobbit;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String address, Integer age, String hobbit, String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.hobbit = hobbit;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHobbit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbit</span><span class="params">(String hobbit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbit = hobbit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", hobbit='"</span> + hobbit + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone='"</span> + phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了 @Data</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String hobbit;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在按快捷鍵 <code>Ctrl + F12</code>，可以查找到set,get,toString 方法。</p><p>使用 @Data 註解就可以有下面幾個註解的功能： @ToString、@Getter、@Setter、@EqualsAndHashCode、@NoArgsConstructor 。</p><p>:::info<br>常用的幾個註解：<br>@Data ： 注在類上，提供類的get、set、equals、hashCode、canEqual、toString方法<br>@Setter ： 注在屬性上，提供 set 方法<br>@Getter ： 注在屬性上，提供 get 方法<br>構造函數</p><p>@AllArgsConstructor<br>会生成一个包含所有变量，同时如果变量使用了NotNull annotation ， 会进行是否为空的校验，<br>全部参数的Constructor函数的自动生成，该注解的作用域也是只有在实体类上，参数的顺序与属性定义的顺序一致。</p><p>範例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line">@AllArgsConstructor</span><br><span class="line">class MyClass&#123;</span><br><span class="line">    private String one;</span><br><span class="line">    private Integer three;  </span><br><span class="line">    private Integer two;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">自動生成建構子:</span><br><span class="line">public MyClass(String one, Integer three, Integer two) &#123;</span><br><span class="line">    this.one = one;</span><br><span class="line">    this.three = three;</span><br><span class="line">    this.two = two;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>參考: <a href="https://stackoverflow.com/questions/49106072/how-to-specify-the-order-of-parameters-in-allargsconstructor-in-lombok" target="_blank" rel="noopener">https://stackoverflow.com/questions/49106072/how-to-specify-the-order-of-parameters-in-allargsconstructor-in-lombok</a></p><p>@NoArgsConstructor<br>產生沒有參數的建構子<br>generate a constructor with no parameters.</p><p>@RequiredArgsConstructor<br>会生成一个包含常量（final），和标识了@NotNull的变量 的构造方法。</p><p>@EqualsAndHashCode ： 注在类上，提供对应的 equals 和 hashCode 方法<br>@Log4j/@Slf4j ： 注在类上，提供对应的 Logger 对象，变量名为 log<br>:::</p><p>:::warning<br>注意的是，同时使用@Data 和 @AllArgsConstructor 后 ，默认的无参构造函数失效，如果需要它，要重新设置 @NoArgsConstructor<br>:::</p><p>參考資料</p><p>@Data注解 与 lombok<br><a href="https://www.jianshu.com/p/c1ee7e4247bf" target="_blank" rel="noopener">https://www.jianshu.com/p/c1ee7e4247bf</a><br>学习Spring Boot：（十五）使用Lombok来优雅的编码<br><a href="https://blog.wuwii.com/springboot-15.html" target="_blank" rel="noopener">https://blog.wuwii.com/springboot-15.html</a></p><h2 id="Spring載入Bean與標示為Bean有關的Annotation"><a href="#Spring載入Bean與標示為Bean有關的Annotation" class="headerlink" title="Spring載入Bean與標示為Bean有關的Annotation"></a>Spring載入Bean與標示為Bean有關的Annotation</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p>定義可共物件化的類別，叫做Bean，並且放置在Spring Ioc Container中並且給其管理，等待被呼叫使用。</p><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><h5 id="1-程式碼Java-Code配置"><a href="#1-程式碼Java-Code配置" class="headerlink" title="1. 程式碼Java Code配置"></a>1. 程式碼Java Code配置</h5><p>Spring 的@Bean通常宣告在掛有@Configuration的Spring配置類別中的方法前，例如宣告一個 AppConfig.java，若有超過一個以上的bean，使用 @Qualifier給予名稱</p><p><img src="https://i.imgur.com/EsiQv3V.png" alt=""></p><p>AppConfig.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"add"</span>)</span><br><span class="line">    <span class="function">Calculator <span class="title">addCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AddCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"sub"</span>)</span><br><span class="line">    <span class="function">Calculator <span class="title">subCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"mul"</span>)</span><br><span class="line">    <span class="function">Calculator <span class="title">mulCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MulCalculator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定義Calculator的介面</p><p>Calculator.interface<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Calculator &#123;</span><br><span class="line">    int calc(int a, int b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定義一個實作Calculator的類別</p><p>CalculatorImpl.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.will.advanced.demo.bean;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> <span class="keyword">implements</span>  <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> <span class="keyword">implements</span>  <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="取得註冊的bean的方式"><a href="#取得註冊的bean的方式" class="headerlink" title="取得註冊的bean的方式"></a>取得註冊的bean的方式</h4><h5 id="1-使用-Autowire-與-Qualifier"><a href="#1-使用-Autowire-與-Qualifier" class="headerlink" title="1. 使用@Autowire 與 @Qualifier"></a>1. 使用@Autowire 與 @Qualifier</h5><p>然後在 CommandLineRunner中使用 @AutoWire使用@Bean<br>，然而若要Autowired的類別對象是介面的話，且介面有很多的實作子類別<br>(AddCalculator, SubCalculator, MulCalculator)</p><p>那得透過 @Qualifier來指名是哪一個子類別</p><p>CommandLineAppStartupRunner.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineAppStartupRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"add"</span>)</span><br><span class="line">    Calculator addCalculator;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"sub"</span>)</span><br><span class="line">    Calculator subCalculator;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"mul"</span>)</span><br><span class="line">    Calculator mulCaculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String...args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(addCalculator.calc(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(subCalculator.calc(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(mulCaculator.calc(<span class="number">2</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-使用getBean"><a href="#2-使用getBean" class="headerlink" title="2. 使用getBean()"></a>2. 使用getBean()</h5><p>CommandLineAppStartupRunner.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineAppStartupRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String...args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//　取得所有已經註冊的bean</span></span><br><span class="line">        System.out.println(Arrays.asList(context.getBeanDefinitionNames()));</span><br><span class="line">        <span class="comment">// 取得名稱為add的bean</span></span><br><span class="line">        Calculator addCalculator = context.getBean(<span class="string">"add"</span>, Calculator.class);</span><br><span class="line">        Calculator subCalculator = context.getBean(<span class="string">"sub"</span>, Calculator.class);</span><br><span class="line">        Calculator mulCalculator = context.getBean(<span class="string">"mul"</span>, Calculator.class);</span><br><span class="line">        </span><br><span class="line">        System.out.println(addCalculator.calc(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(subCalculator.calc(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(mulCalculator.calc(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="補充-使用CommandlineRunner讓Spring設置可以先被載入，然後可透過run-定義自訂義執行的內容"><a href="#補充-使用CommandlineRunner讓Spring設置可以先被載入，然後可透過run-定義自訂義執行的內容" class="headerlink" title="補充: 使用CommandlineRunner讓Spring設置可以先被載入，然後可透過run()定義自訂義執行的內容"></a>補充: 使用CommandlineRunner讓Spring設置可以先被載入，然後可透過run()定義自訂義執行的內容</h6><p><a href="https://dzone.com/articles/spring-boot-applicationrunner-and-commandlinerunne" target="_blank" rel="noopener">https://dzone.com/articles/spring-boot-applicationrunner-and-commandlinerunne</a></p><h5 id="3-xml檔案配置"><a href="#3-xml檔案配置" class="headerlink" title="3. xml檔案配置"></a>3. xml檔案配置</h5><p>上面的寫法等同在 <code>appConfig.xml</code> 宣告:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean name=&quot;addCalculator&quot; class=&quot;com.will.advanced.TransferServiceImpl&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h4 id="ComponentScan-掃描指定package中掛有-Component的類別，自動註冊包含的bean"><a href="#ComponentScan-掃描指定package中掛有-Component的類別，自動註冊包含的bean" class="headerlink" title="@ComponentScan: 掃描指定package中掛有@Component的類別，自動註冊包含的bean"></a>@ComponentScan: 掃描指定package中掛有@Component的類別，自動註冊包含的bean</h4><p>不過一般在沒有特殊需求的情況下都會使用@ComponentScan掃描指定package中掛有@Component的類別來自動註冊為bean。</p><p>而會使用@Bean的時機為，當要被註冊為bean的類別建構步驟或邏輯比較複雜，此時就需要@Bean讓你可以在構造bean的方法內撰寫構造的詳細邏輯，而@ComponentScan就無法滿足比較細微的配置。</p><p>例如在 service層中新增一個 TestService class<br>透過@Component將TestService註冊成Bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TestService &#123;</span><br><span class="line">    public String test() &#123;</span><br><span class="line">        return &quot;testing&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>透過@ComponentScan可使用@Component註冊的bean，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineAppStartupRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String...args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(testService.test());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="參考資料-2"><a href="#參考資料-2" class="headerlink" title="參考資料"></a>參考資料</h5><p>Spring: A Head Start 🔥 — Beans Configuration (Part 2)<br><a href="https://medium.com/omarelgabrys-blog/spring-a-head-start-beans-configuration-part-2-4a8c239b070a" target="_blank" rel="noopener">https://medium.com/omarelgabrys-blog/spring-a-head-start-beans-configuration-part-2-4a8c239b070a</a></p><h4 id="Scope-定義Bean被引用時要怎樣被使用"><a href="#Scope-定義Bean被引用時要怎樣被使用" class="headerlink" title="@Scope: 定義Bean被引用時要怎樣被使用"></a>@Scope: 定義Bean被引用時要怎樣被使用</h4><ul><li>singleton：在Spring IoC Container，該bean只會有單一實例(a single instance)，此為Spring預設值</li><li>prototype：在Spring IoC Container中，該bean可以有多個實例(any number of object instances)</li><li>request： 在每一次的HTTP Request，spring container會根據loginAction bean的定義來建立一個全新的instance，而且僅在目前的request中有效，所以可以放心的去更改instance的內部狀態，請求結束，request scope的bean instance會被destroy</li><li>session：針對某個HTTP Session，spring container會根據userPreference bean的定義來建立一個全新的instance，同樣的，和request scope一樣，可以放心的去更改instance內部狀態。</li><li>global-session：僅在portlet為基礎的Web應用下有作用。Porlet的規範中定義了global session的概念。</li></ul><h5 id="參考資料-3"><a href="#參考資料-3" class="headerlink" title="參考資料:"></a>參考資料:</h5><p>Spring Bean Scope 學習<br><a href="https://kevingo75.blogspot.com/2012/03/spring-bean-scope.html" target="_blank" rel="noopener">https://kevingo75.blogspot.com/2012/03/spring-bean-scope.html</a></p><h4 id="補充-什麼是Spring-IoC-Inversion-of-Control-container"><a href="#補充-什麼是Spring-IoC-Inversion-of-Control-container" class="headerlink" title="補充: 什麼是Spring IoC (Inversion of Control) container."></a>補充: 什麼是Spring IoC (Inversion of Control) container.</h4><p> Inversion of Control, or IoC for short, is a process in which an object defines its dependencies without creating them. This object delegates the job of constructing such dependencies to an IoC container.</p><p>用一柱話描述IoC： class不用自己主動new欲依賴class的instance，而是透過外部　(main()方法)　以建構子、setter或是介面注入來產生依賴class的instance</p><p>:::success<br>需要的 遊戲，不用自己 下載，而是 網咖提供 給你。<br>———————-||———————</p><p>需要的 物件，不用自己 取得，而是 服務容器 提供 給你。<br>———————-||———————<br>需要的 依賴實例，不用 主動 (Active) 建立，而是 被動 (Passive) 接收。<br>:::</p><h5 id="參考資料：-1"><a href="#參考資料：-1" class="headerlink" title="參考資料："></a>參考資料：</h5><p>控制反轉 (IoC) 與 依賴注入 (DI)<br><a href="https://notfalse.net/3/ioc-di" target="_blank" rel="noopener">https://notfalse.net/3/ioc-di</a></p><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><p>简化 Spring 的开发。@Repository注解便属于最先引入的一批，它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO类上即可。</p><h3 id="Service、-Controller-和-Component-將class標示为Bean"><a href="#Service、-Controller-和-Component-將class標示为Bean" class="headerlink" title="@Service、@Controller 和 @Component 將class標示为Bean"></a>@Service、@Controller 和 @Component 將class標示为Bean</h3><ul><li>@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。</li><li>@Service 通常作用在業務邏輯層，但是目前该功能与 @Component 相同。</li><li>@Controller 通常作用在控制層(Controller)，但是目前该功能與@Component 相同。</li></ul><h3 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h3><p>被@PostConstruct修飾的方法會在服務器加載Servlet的時候運行，並且只會被服務器執行一次。</p><h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><p>假若你在class中設定了@Transactional, 該class所有的method有使用到JPA的都會被spring的transaction所管理。</p><p>舉例：當有個Transaction有三個動作：entity1.save, entity2.save, entity3.save.</p><p>若entity3.save失敗，那Spring就會將entity1.save與entity2.save的執行結果給rollback，還原其動作。</p><h4 id="參考資料-4"><a href="#參考資料-4" class="headerlink" title="參考資料"></a>參考資料</h4><p><a href="https://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background" target="_blank" rel="noopener">https://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background</a></p><h2 id="AOP相關的Annotaion"><a href="#AOP相關的Annotaion" class="headerlink" title="AOP相關的Annotaion"></a>AOP相關的Annotaion</h2><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><p>@Aspect:定義AOP，作用在class</p><p>AOP為 Aspect Oritented Programming<br>AOP通過給程序定義一個切入點，然後在其前後切入不同的執行內容<br>AOP不會破壞原來的程序邏輯<br>AOP使用場景：</p><ul><li>紀錄日誌</li><li>事務管理</li><li>安全檢查</li><li>資源控制</li></ul><h3 id="Pointcut-Before-After"><a href="#Pointcut-Before-After" class="headerlink" title="@Pointcut, @Before, @After"></a>@Pointcut, @Before, @After</h3><p>範例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="comment">// 切入package為com.william.demo.api的LogTestApi類別的log函式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.william.demo.api.LogTestApi.log(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 希望在切入點　log()函式前執行某些內容</span></span><br><span class="line">    <span class="comment">// 或是用直接用　@Before("execution(* com.william.demo.api.LogTestApi.log(..))");</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"----------do before---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"----------do after----------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他Annotation"><a href="#其他Annotation" class="headerlink" title="其他Annotation"></a>其他Annotation</h2><h3 id="Cache"><a href="#Cache" class="headerlink" title="@Cache"></a>@Cache</h3><p>定義cache策略與範圍，可以定義以下參數：</p><ul><li><p>usage: 當前緩存策略(NONE, READ_ONLY, NONSTRICT_READ_WRITE, TRANSACTIONAL)</p><ul><li>read-only: 只讀緩存<ul><li>如果你的應用程序只需讀取一個持久化類的實例，而無需對其修改， 那麼就可以對其進行只讀緩存</li></ul></li><li>read-write: 讀寫緩存<ul><li>如果應用程序需要更新數據，那麼使用讀/寫緩存比較合適。如果應用程序要求“序列化事務”的隔離級別（serializable transaction isolation level），那麼就決不能使用這種緩存策略</li></ul></li><li>nonstrict-read-write: 不嚴格讀寫緩存<ul><li>如果應用程序只偶爾需要更新數據（也就是說，兩個事務同時更新同一記錄的情況很不常見），也不需要十分嚴格的事務隔離，那麼比較適合使用非嚴格讀/寫緩存策略。</li></ul></li><li>transactional :事務性緩存<ul><li>Hibernate 的事務緩存策略提供了全事務的緩存支持，例如對 JBoss TreeCache 的支持。這樣的緩存只能用於 JTA 環境中，你必須指定為其hibernate.transaction.manager_lookup_class屬性。</li></ul></li></ul></li><li><p>region: 可選參數，指定二級緩存的去域名，默認為類或者集合的名字。</p></li><li>include: 可選參數(all, non-lazy)。 all包含所有屬性，non-lazy僅包含非延遲加載的屬性。</li></ul><h4 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Table(name = &quot;PROVICE&quot;)</span><br><span class="line">@Cache(usage =CacheConcurrencyStrategy.READ_ONLY)</span><br><span class="line">public class Province() &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Table(name = &quot;PROVICE&quot;)</span><br><span class="line">@Cache(usage =CacheConcurrencyStrategy.READ_ONLY)</span><br><span class="line">public class Province() &#123; </span><br><span class="line">    @OneToMany(fetch = FetchType.LAZY)</span><br><span class="line">    @JoinColumn(name = &quot;cityId&quot;)</span><br><span class="line">    @Cache(usage = CacheConcrrencyStrategy.READ_ONLY)</span><br><span class="line">    private Set&lt;City&gt; cities;</span><br></pre></td></tr></table></figure><h5 id="參考資料-5"><a href="#參考資料-5" class="headerlink" title="參考資料"></a>參考資料</h5><p>Hibernate @Cache注解-天才小小布<br><a href="https://blog.csdn.net/w410589502/article/details/54603265" target="_blank" rel="noopener">https://blog.csdn.net/w410589502/article/details/54603265</a></p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>@Configuration的作用同以前的xml配置檔（例如Spring的applicationContext.xml或dispatcher-servlet.xml），用來設定Spring環境配置，例如宣告及註冊bean至Spring容器中，注入properties參數等。</p><h4 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h4><p>例如我們有一個FooService類別，若此類別要成為Spring容器管理的bean，有兩種方法：</p><ol><li>一般在該類別上宣告@Component並搭配@ComponentScan掃描的方式註冊為bean</li><li>透過在@Configuration類別中搭配@Bean的方式註冊。</li></ol><p>例如建立一個AppConfig並在類別名稱前掛上@Configuration，則此類別及成為Spring的配置類。在配置類的方法前掛上@Bean則方法回傳的物件就會被註冊為Spring容器管理的bean</p><p>fooService()方法便會將FooService註冊為bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.will.advanced.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.will.advanced.demo.service.FooService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FooService <span class="title">fooService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FooService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為了程式管理及維護上的方便，通常我們會把某些相關的配置寫在另外的配置檔，而不是全部塞在同一個類別，此時就可以利用@Configuration另外定義一個配置檔，例如上面的AppConfig。</p><h4 id="SpringBootApplication-本身也包含-Configuration"><a href="#SpringBootApplication-本身也包含-Configuration" class="headerlink" title="@SpringBootApplication: 本身也包含@Configuration"></a>@SpringBootApplication: 本身也包含@Configuration</h4><p>而在Spring Boot中，<span style="color:red">@SpringBootApplication類本身即包含了@Configuration，所以可以直接在裡面進行如上Bean的配置</span>，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.will.advanced.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.will.advanced.demo.FooService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootBeanDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootBeanDemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FooService <span class="title">fooService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FooService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="參考資料-6"><a href="#參考資料-6" class="headerlink" title="參考資料"></a>參考資料</h5><p>Spring @Configuration作用<br><a href="https://matthung0807.blogspot.com/2019/04/spring-configuration_28.html" target="_blank" rel="noopener">https://matthung0807.blogspot.com/2019/04/spring-configuration_28.html</a></p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>定義 @SpringBootApplication的預設掃瞄bean的範圍</p><p>Spring Boot的@SpringBootApplication預設只會掃描所屬package下的類，因此若@Configuration類別定義在@SpringBootApplication類以外的package，則要用scanBasePackages屬性來設定要額外掃描的package，例如@SpringBootApplication(scanBasePackages=”com.will.advanced.demo.config”)　（@Configuration包含了@Component），</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.will.advanced.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">// 注意在scanBasePackages的package名稱</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages=<span class="string">"com.will.advanced.demo.config"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootBeanDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootBeanDemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><p>或是透過@Import來引入 ，例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.will.advanced.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 注意pacakge名稱</span></span><br><span class="line"><span class="meta">@Import</span>(value = &#123; com.will.advanced.demo.config.AnotherAppConfig.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootBeanDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootBeanDemoApplication.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>:::warning<br>注意使用@Import會忽略@Configuration設定<br>:::</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>依賴注入物件</p><p>Spring的@Autowired用來依賴注入物件，典型的用法就是掛在類別成員變數上。@Autowired預設會依注入對象的類別型態來選擇容器(透過@Configuration定義的class會成為容器)中相符的物件(設置成bean)來注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Car car;</span><br></pre></td></tr></table></figure><p>Spring會自動去容器中找到　有容器定義CarBeans的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ....xxx.Car;</span><br><span class="line"><span class="meta">@Configuation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarBeans</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Car() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowire為Spring IoC的實現，不用自己去new一個car出來，而是透過容器(會做constructor or setter or interface injection)，來去實現外部注入，降低模組(class)之間的耦合性</p><h3 id="EnableScheduling"><a href="#EnableScheduling" class="headerlink" title="@EnableScheduling"></a>@EnableScheduling</h3><p>若開發者在AppConfig類中使用了@EnableScheduling，並在某個task class中使用了@Schedule註解，那麼被@Schedule標註的方法既可以在指定時間內自動執行</p><p>注意：@EnableScheduling要與@Schedule搭配使用才有效果</p><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>若想要把配置文件的信息，讀取好並自動封裝(getter讀取private的config值)成實體類，如此一來我們在代碼裡面使用就輕鬆許多，這時就可以使用@ConfiguationProperties，把同類的配置訊息自動封裝成實體類。</p><p>假設有設定文件在 <code>application.properties</code>之下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.username=admin</span><br><span class="line">connection.password=kyjufskifas2jsfs</span><br><span class="line">connection.remoteAddress=192.168.1.1</span><br></pre></td></tr></table></figure></p><p>我們可以定義一個實體類在裝載配置文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"connection"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionSettings</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String remoteAddress;</span><br><span class="line">    <span class="keyword">private</span> String password ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRemoteAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remoteAddress;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemoteAddress</span><span class="params">(String remoteAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.remoteAddress = remoteAddress;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>亦可以把 @ConfigurationProperties 定義在@Bean之下，說明@Bean是參考到有用configuationProperties設定的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"connection"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionSettings <span class="title">connectionSettings</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConnectionSettings();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要使用時直接用@Autowire注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/task"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//　在這裡注入 config！</span></span><br><span class="line">    <span class="meta">@Autowired</span> ConnectionSettings conn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/"</span>,<span class="string">""</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hellTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String userName = conn.getUsername();     </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello task !!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="參考資料：-2"><a href="#參考資料：-2" class="headerlink" title="參考資料："></a>參考資料：</h5><p>spring boot 使用@ConfigurationProperties<br><a href="https://blog.csdn.net/yingxiake/article/details/51263071" target="_blank" rel="noopener">https://blog.csdn.net/yingxiake/article/details/51263071</a></p><h3 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass"></a>@ConditionalOnClass</h3><p>是Springboot实现自动配置的重要支撑之一。其用途是判断当前classpath下是否存在指定类，若是则将当前的配置装载入spring容器。</p><h5 id="參考資料：-3"><a href="#參考資料：-3" class="headerlink" title="參考資料："></a>參考資料：</h5><p>@ConditionalOnClass的使用探索 新日暮里格斗大会<br><a href="https://blog.csdn.net/lucyTheSlayer/article/details/80430912" target="_blank" rel="noopener">https://blog.csdn.net/lucyTheSlayer/article/details/80430912</a></p><h3 id="ConditionalOnMissingBean"><a href="#ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnMissingBean"></a>@ConditionalOnMissingBean</h3><p>结合使用注解@ConditionalOnMissingBean和@Bean,可以做到只有特定名称或者类型的Bean不存在于BeanFactory中时才创建某个Bean </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionalOnMissingBeanConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">//　無條件定義一個bean</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> A <span class="title">beanA</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> A(); <span class="comment">//　</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">　<span class="meta">@ConditionalOnMissingBean</span>(name=<span class="string">"beanA"</span>)</span><br><span class="line">　<span class="function"><span class="keyword">public</span> B <span class="title">beanB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果 beanFactory 中存在一个名称为 beanA 的 bean，才定义bean ： beanB；</span></span><br><span class="line">　　<span class="comment">// 因为上面的方法已经定义了一个 beanA，所以这里 beanB定义并不会发生。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> B(); </span><br><span class="line">　&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　<span class="meta">@Bean</span></span><br><span class="line">　<span class="meta">@ConditionalOnMissingBean</span>(name=<span class="string">"beanD"</span>)</span><br><span class="line">　<span class="function"><span class="keyword">public</span> C <span class="title">beanC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果 beanFactory 中存在一个名称为 beanD的 bean，才定义bean ： beanC；    </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> C(); </span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="參考資料：-4"><a href="#參考資料：-4" class="headerlink" title="參考資料："></a>參考資料：</h4><p>Spring Boot基于特定条件创建Bean例子 : ConditionalOnMissingBeanhttps:<br>//blog.csdn.net/andy_zhang2007/article/details/81285130</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Annotation-筆記&quot;&gt;&lt;a href=&quot;#Spring-Annotation-筆記&quot; class=&quot;headerlink&quot; title=&quot;Spring Annotation 筆記&quot;&gt;&lt;/a&gt;Spring Annotation 筆記&lt;/h1&gt;&lt;p&gt;這邊主要整理了我使用或是遇到的Spring Annotation資料查詢與統整的紀錄&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://a10000005588.github.io/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://a10000005588.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://a10000005588.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>2020年的想法</title>
    <link href="http://a10000005588.github.io/2020/01/01/2020%E5%B9%B4%E7%9A%84%E6%83%B3%E6%B3%95%E8%88%87%E8%87%AA%E4%BF%AE%E8%A6%8F%E5%8A%83/"/>
    <id>http://a10000005588.github.io/2020/01/01/2020年的想法與自修規劃/</id>
    <published>2020-01-01T13:30:48.000Z</published>
    <updated>2020-01-01T14:22:47.890Z</updated>
    
    <content type="html"><![CDATA[<p>回顧了一下2019年對自己的期許，<br>自己與期許的似乎還有所差距，<br>就再接再厲。<br><a id="more"></a></p><p>希望今年強化自身的網站開發的實力(以後端為主)<br>接下來2020年想要趁下班閒暇時間時來做：</p><ul><li>刷刷leetcode</li><li>找一個side project來經營 (預計用Java Spring Boot後端, Angular前端)</li><li>複習資料結構，資料庫SQL語法等</li></ul><p>以上繼續精進，自我勉勵</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回顧了一下2019年對自己的期許，&lt;br&gt;自己與期許的似乎還有所差距，&lt;br&gt;就再接再厲。&lt;br&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://a10000005588.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>如何查看透過智能合約存在以太坊上的資料？</title>
    <link href="http://a10000005588.github.io/2019/02/10/checksmartcontractdata/"/>
    <id>http://a10000005588.github.io/2019/02/10/checksmartcontractdata/</id>
    <published>2019-02-10T15:25:43.000Z</published>
    <updated>2019-02-10T15:36:44.807Z</updated>
    
    <content type="html"><![CDATA[<p>在看這篇文章之前必須要知道一件事，那就是透過智能合約存在區塊鏈上的資訊都是<span style="color:red">公開的</span>。</p><a id="more"></a><p>不管你是否有在智能合約上面有用<code>requre(), revert(), assert()</code>等等來限制某地址的人來存取智能合約上的變數，但這些變數都會存以太坊EVM的Storage上面，每個節點都可以透過以下方式來對EVM的Storage內的編碼進行解析，並還原當初透過合約所儲存的變數資料！！！</p><p>以下透過一個範例來瞭解如何透過web3.js library中的<code>eth.getStorage()</code>方法來解析Storage內儲存的資訊。</p><h4 id="智能合約範例："><a href="#智能合約範例：" class="headerlink" title="智能合約範例："></a>智能合約範例：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">prama solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract testStorage &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint</span> storeduint1 = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">uint</span> constant constuint = <span class="number">16</span>;</span><br><span class="line">    uint128 investmentsLimit = <span class="number">17055</span>;</span><br><span class="line">    <span class="keyword">uint32</span> investmentsDeadlinedTimeStamp = <span class="keyword">uint32</span>(now);</span><br><span class="line">    </span><br><span class="line">    bytes16 string1 = <span class="string">'test1'</span>;</span><br><span class="line">    bytes32 string2 = <span class="string">'test1236'</span>;</span><br><span class="line">    <span class="keyword">string</span> string3 = <span class="string">'lets string something'</span>;</span><br><span class="line">    </span><br><span class="line">    mapping (address =&gt; <span class="keyword">uint</span>) uints1;</span><br><span class="line">    mapping (address =&gt; DeviceData) structs1;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">uint</span>[] uintarray;</span><br><span class="line">    DeviceData[] deviceDataArray;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> DeviceData &#123;</span><br><span class="line">        <span class="keyword">string</span> deviceBrand;</span><br><span class="line">        <span class="keyword">string</span> deviceYear;</span><br><span class="line">        <span class="keyword">string</span> batteryWearLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function testStorage() &#123;</span><br><span class="line">        address address1 = <span class="number">0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df</span>6</span><br><span class="line">        address address2 = <span class="number">0xaee905fdd3ed851e48d22059575b9f</span>4245a82b04;</span><br><span class="line">        </span><br><span class="line">        uints1[address1] = <span class="number">88</span>;</span><br><span class="line">        uints1[address2] = <span class="number">99</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> dev1 = DeviceData(<span class="string">'deviceBrand'</span>, <span class="string">'deviceYear'</span>, <span class="string">'wearLevel'</span>);</span><br><span class="line">        <span class="keyword">var</span> dev2 = DeviceData(<span class="string">'deviceBrand2'</span>, <span class="string">'deviceYear2'</span>, <span class="string">'wearLevel2'</span>);</span><br><span class="line">        </span><br><span class="line">        structs1[addresss1] = dev1;</span><br><span class="line">        structs1[addresss2] = dev2;</span><br><span class="line">        </span><br><span class="line">        uintarray.push(<span class="number">8000</span>);</span><br><span class="line">        uintarray.push(<span class="number">9000</span>);</span><br><span class="line">        </span><br><span class="line">        deviceDataArray.push(dev1);</span><br><span class="line">        deviceDataArray.push(dev2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假設我們合約的地址是在：<code>0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b</code></p><p>所有儲存在storage內的參數都可以用index來索引，index的格式為256 bytes以及對應64碼。<br>在以上的範例中我們有 10個參數，所以可以透過index來一一遍歷他們：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let contractAddress = &apos;0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b&apos;</span><br><span class="line">for (index = 0; index &lt; 10; index++)&#123;</span><br><span class="line"> console.log(`[$&#123;index&#125;]` + </span><br><span class="line">   web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">&#125;</span><br><span class="line">result:</span><br><span class="line">[0] 0x000000000000000000000000000000000000000000000000000000000000000f</span><br><span class="line">[1] 0x00000000000000000000000059b92d9a0000000000000000000000000000429f</span><br><span class="line">[2] 0x0000000000000000000000000000000074657374310000000000000000000000</span><br><span class="line">[3] 0x7465737431323336000000000000000000000000000000000000000000000000</span><br><span class="line">[4] 0x6c65747320737472696e6720736f6d657468696e67000000000000000000002a</span><br><span class="line">[5] 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">[6] 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">[7] 0x0000000000000000000000000000000000000000000000000000000000000002</span><br><span class="line">[8] 0x0000000000000000000000000000000000000000000000000000000000000002</span><br><span class="line">[9] 0x0000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p>開始針對合約內的10個變數一一做遍歷和解析</p><h3 id="index-0-storeduint1"><a href="#index-0-storeduint1" class="headerlink" title="index 0 - storeduint1"></a>index 0 - storeduint1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let contractAddress = &apos;0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b&apos;</span><br><span class="line">let index = 0</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;DEC:&apos; + web3.toDecimal(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result:</span><br><span class="line">0x000000000000000000000000000000000000000000000000000000000000000f</span><br><span class="line">DEC:15</span><br></pre></td></tr></table></figure><h3 id="constuint"><a href="#constuint" class="headerlink" title="constuint"></a>constuint</h3><p>Constants(常數) 不會被存在storage內，只能夠透過code來存取</p><h3 id="index-1-investmentsLimit-investmentsDeadlineTimeStamp"><a href="#index-1-investmentsLimit-investmentsDeadlineTimeStamp" class="headerlink" title="index 1 - investmentsLimit, investmentsDeadlineTimeStamp"></a>index 1 - investmentsLimit, investmentsDeadlineTimeStamp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let index = 1</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">result:</span><br><span class="line"> 0x00000000000000000000000059b92d9a0000000000000000000000000000429f</span><br><span class="line">DEC:  1505308058   and  17055</span><br></pre></td></tr></table></figure><p>在index 1中，會將2個變數(investmentsLimit, investmentsDeadlineTimeStamp)做合併來最佳化storage的存放</p><h3 id="index-2-string1"><a href="#index-2-string1" class="headerlink" title="index 2 - string1"></a>index 2 - string1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index = 2</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result: </span><br><span class="line">0x0000000000000000000000000000000074657374310000000000000000000000</span><br><span class="line">ASCII: test1</span><br></pre></td></tr></table></figure><h3 id="index-3-string2"><a href="#index-3-string2" class="headerlink" title="index 3 - string2"></a>index 3 - string2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index = 3</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result:</span><br><span class="line">0x7465737431323336000000000000000000000000000000000000000000000000</span><br><span class="line">ASCII: test1236</span><br></pre></td></tr></table></figure><h3 id="index-4-string3"><a href="#index-4-string3" class="headerlink" title="index 4 - string3"></a>index 4 - string3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index = 4</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))</span><br><span class="line">result:</span><br><span class="line">0x6c65747320737472696e6720736f6d657468696e67000000000000000000002a</span><br><span class="line">ASCII: lets string something         * (42)</span><br></pre></td></tr></table></figure><p>在result最後有 2a(dec42)為 string儲存的長度<br>可參閱solidity官方文件描述變數在storage中呈現的格式：<a href="https://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage</a></p><h3 id="index-5-—-uints1"><a href="#index-5-—-uints1" class="headerlink" title="index 5 — uints1"></a>index 5 — uints1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = 5</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">PROBLEM!!!!</span><br></pre></td></tr></table></figure><p>若遇到 mapping struct宣告的變數，無法直接透過一般的index來取得struct內所儲存的值，必須得曉得對應value中的 <code>key</code>值，否則是不可能取得的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 要取回在 uints1 struct所儲存在addresss1的值 :88</span><br><span class="line">// uints1[address1] = 88; </span><br><span class="line"></span><br><span class="line">address1 = 0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">index = &apos;0000000000000000000000000000000000000000000000000000000000000005&apos;</span><br><span class="line"></span><br><span class="line">// convert address1 to the 256 bytes...</span><br><span class="line">key =  &apos;00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6&apos;</span><br><span class="line"></span><br><span class="line">let newKey =  web3.sha3(key + index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;DEC: &apos; + web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000000058</span><br><span class="line">DEC: 88</span><br></pre></td></tr></table></figure><h3 id="index6-structs1"><a href="#index6-structs1" class="headerlink" title="index6 - structs1"></a>index6 - structs1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000006&quot;</span><br><span class="line">key =  &quot;00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6&quot;</span><br><span class="line">let newKey =  web3.sha3(key + index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963654272616e64000000000000000000000000000000000000000016</span><br><span class="line">ASCII: deviceBrand</span><br></pre></td></tr></table></figure><p>若要讀取下一個struct的值，只需要將newKey的值+1即可取到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function increaseHexByOne(hex) &#123;</span><br><span class="line"> let x = new BigNumber(hex)</span><br><span class="line"> let sum = x.add(1)</span><br><span class="line"> let result = &apos;0x&apos; + sum.toString(16)</span><br><span class="line"> return result</span><br><span class="line">&#125;</span><br><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000006&quot;</span><br><span class="line">key =  &quot;00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6&quot;</span><br><span class="line">let newKey =  increaseHexByOne(</span><br><span class="line">  web3.sha3(key + index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress,newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963655965617200000000000000000000000000000000000000000014</span><br><span class="line">ASCII: deviceYear</span><br></pre></td></tr></table></figure><p>若還需要第三個之後的值，繼續將newKey遞增，就能夠取到。</p><h3 id="index-7-uintarray"><a href="#index-7-uintarray" class="headerlink" title="index 7 - uintarray"></a>index 7 - uintarray</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;7&quot;</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, index))</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line">  0x0000000000000000000000000000000000000000000000000000000000000002</span><br></pre></td></tr></table></figure><p>以上的result表示 array目前有2個值 (8000, 9000)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000007&quot;</span><br><span class="line">let newKey = web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;DEC: &apos; +</span><br><span class="line">  web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000001f40</span><br><span class="line">DEC: 8000</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">newKey = increaseHexByOne(web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;DEC: &apos; +</span><br><span class="line">  web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x0000000000000000000000000000000000000000000000000000000000002328</span><br><span class="line">DEC: 9000</span><br></pre></td></tr></table></figure><h3 id="index-8-deviceDataArray"><a href="#index-8-deviceDataArray" class="headerlink" title="index 8 - deviceDataArray"></a>index 8 - deviceDataArray</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000008&quot;</span><br><span class="line">let newKey = web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;)</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line"> web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963654272616e64000000000000000000000000000000000000000016</span><br><span class="line">ASCII: deviceBrand</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000008&quot;</span><br><span class="line">let newKey = increaseHexByOne(web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line">web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x6465766963655965617200000000000000000000000000000000000000000014</span><br><span class="line">ASCII: deviceYear</span><br></pre></td></tr></table></figure><p>繼續增加index的值(+1), result:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index = &quot;0000000000000000000000000000000000000000000000000000000000000008&quot;</span><br><span class="line">let newKey = increaseHexByTwo(web3.sha3(index, &#123;&quot;encoding&quot;:&quot;hex&quot;&#125;))</span><br><span class="line">console.log(web3.eth.getStorageAt(contractAddress, newKey))</span><br><span class="line">console.log(&apos;ASCII: &apos; +</span><br><span class="line">web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))</span><br><span class="line">result:</span><br><span class="line">0x776561724c6576656c0000000000000000000000000000000000000000000012</span><br><span class="line">ASCII: wearLevel</span><br></pre></td></tr></table></figure><p>若加3之後，result會顯示第二組(dev2) 存進array的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result:</span><br><span class="line">0x6465766963654272616e64320000000000000000000000000000000000000018</span><br><span class="line"></span><br><span class="line">ASCII: deviceBrand2</span><br></pre></td></tr></table></figure><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>How to read Ethereum contract storage - Darius</p><p><a href="https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925" target="_blank" rel="noopener">https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看這篇文章之前必須要知道一件事，那就是透過智能合約存在區塊鏈上的資訊都是&lt;span style=&quot;color:red&quot;&gt;公開的&lt;/span&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Solidity" scheme="http://a10000005588.github.io/categories/Solidity/"/>
    
    
      <category term="Smart Contract" scheme="http://a10000005588.github.io/tags/Smart-Contract/"/>
    
      <category term="Ethereum" scheme="http://a10000005588.github.io/tags/Ethereum/"/>
    
      <category term="Solidity" scheme="http://a10000005588.github.io/tags/Solidity/"/>
    
  </entry>
  
</feed>
